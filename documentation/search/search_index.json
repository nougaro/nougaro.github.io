{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Nougaro documentation Warning This documentation is a work-in-progress and is not actually the most up-to-date source of information. For the actual documentation (that will soon be moved here), see the wiki Overview Nougaro is an interpreted dynamic-typed programming language. Choose your version 0.22 License This document is under the GNU FDL licence. Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled \"GNU Free Documentation License\".","title":"Welcome to the Nougaro documentation"},{"location":"#welcome-to-the-nougaro-documentation","text":"Warning This documentation is a work-in-progress and is not actually the most up-to-date source of information. For the actual documentation (that will soon be moved here), see the wiki","title":"Welcome to the Nougaro documentation"},{"location":"#overview","text":"Nougaro is an interpreted dynamic-typed programming language.","title":"Overview"},{"location":"#choose-your-version","text":"0.22","title":"Choose your version"},{"location":"#license","text":"This document is under the GNU FDL licence. Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled \"GNU Free Documentation License\".","title":"License"},{"location":"0.22/","text":"Nougaro 0.22.0-beta documentation This is the official documentation for Nougaro version 0.22.0-beta. Hello, world Language reference: syntax, statements, \u2026 Basic syntax Number literals String literals Identifiers and keywords Operators Values Standard library reference: builtins, modules, \u2026 Expanding Nougaro (for Python developers)","title":"Nougaro 0.22.0-beta documentation"},{"location":"0.22/#nougaro-0220-beta-documentation","text":"This is the official documentation for Nougaro version 0.22.0-beta. Hello, world Language reference: syntax, statements, \u2026 Basic syntax Number literals String literals Identifiers and keywords Operators Values Standard library reference: builtins, modules, \u2026 Expanding Nougaro (for Python developers)","title":"Nougaro 0.22.0-beta documentation"},{"location":"0.22/hello_world/","text":"Hello, world! This is the \u201cHello, world!\u201d program in Nougaro. print(\"Hello, world!\") Alternatively: import hello If you want to use functionnal programming: def main() print(\"Hello, world!\") end main() If you want to use object-oriented programming: class Main def print_hello_world() print(\"Hello, world!\") end end Main().print_hello_world()","title":"Hello, world!"},{"location":"0.22/hello_world/#hello-world","text":"This is the \u201cHello, world!\u201d program in Nougaro. print(\"Hello, world!\") Alternatively: import hello If you want to use functionnal programming: def main() print(\"Hello, world!\") end main() If you want to use object-oriented programming: class Main def print_hello_world() print(\"Hello, world!\") end end Main().print_hello_world()","title":"Hello, world!"},{"location":"0.22/01language/01syntax/","text":"Very basic syntax This document covers the basic syntax of Nougaro. Comments There are two types of comments in Nougaro: single-line comments and multi-line comments. Single-line comments Single-line comments start with # and end with a new line. They can start at the beginning of a line or after some code. Example: # this is a single-line comment foo(bar) # this calls the function foo with the argument bar Multi-line comments Multi-line comments start with /* and end with */ . They can start and stop at any point in the code. Example: /* this is a multi line comment */ print(\"hello\") /* this is also a multi line comment*/ Multi-line comments can also be only on one line: print(\"hello\") /* this is a multi-line comment that is only on one line */ Multi-line comments are simply ignored, which mean you can do things such as: print( /* this is a comment */ \"hello\" /* this is another comment */) print(/* this is actually a comment*/ \"hello\") Multi-line comments can be nested: /* comment /* comment-inside comment*/ /* /* comment-ception */ */ comment */ Line joining If you don\u2019t have enough space on your line, you can join two \u201creal lines\u201d to form a Nougaro line, using a backspace. Example: var fruits = [\\ \"banana\", \\ \"apple\", \\ \"raspberry\", \\ \"pineapple\" \\ ] Blank lines Blank lines are ignored. Indentation Indentation is optional, as (mostly) every statement ends with end . Whitespaces Whitespaces are ignored everywhere (except in string literals and to differentiate things such as foobar and foo bar , or += and + = ).","title":"Very basic syntax"},{"location":"0.22/01language/01syntax/#very-basic-syntax","text":"This document covers the basic syntax of Nougaro.","title":"Very basic syntax"},{"location":"0.22/01language/01syntax/#comments","text":"There are two types of comments in Nougaro: single-line comments and multi-line comments.","title":"Comments"},{"location":"0.22/01language/01syntax/#single-line-comments","text":"Single-line comments start with # and end with a new line. They can start at the beginning of a line or after some code. Example: # this is a single-line comment foo(bar) # this calls the function foo with the argument bar","title":"Single-line comments"},{"location":"0.22/01language/01syntax/#multi-line-comments","text":"Multi-line comments start with /* and end with */ . They can start and stop at any point in the code. Example: /* this is a multi line comment */ print(\"hello\") /* this is also a multi line comment*/ Multi-line comments can also be only on one line: print(\"hello\") /* this is a multi-line comment that is only on one line */ Multi-line comments are simply ignored, which mean you can do things such as: print( /* this is a comment */ \"hello\" /* this is another comment */) print(/* this is actually a comment*/ \"hello\") Multi-line comments can be nested: /* comment /* comment-inside comment*/ /* /* comment-ception */ */ comment */","title":"Multi-line comments"},{"location":"0.22/01language/01syntax/#line-joining","text":"If you don\u2019t have enough space on your line, you can join two \u201creal lines\u201d to form a Nougaro line, using a backspace. Example: var fruits = [\\ \"banana\", \\ \"apple\", \\ \"raspberry\", \\ \"pineapple\" \\ ]","title":"Line joining"},{"location":"0.22/01language/01syntax/#blank-lines","text":"Blank lines are ignored.","title":"Blank lines"},{"location":"0.22/01language/01syntax/#indentation","text":"Indentation is optional, as (mostly) every statement ends with end .","title":"Indentation"},{"location":"0.22/01language/01syntax/#whitespaces","text":"Whitespaces are ignored everywhere (except in string literals and to differentiate things such as foobar and foo bar , or += and + = ).","title":"Whitespaces"},{"location":"0.22/01language/02number_literals/","text":"Number literals Here\u2019s all the different ways to write a number in Nougaro: 123 12.3 123e2 12.3e2 123e-2 123e+2 12.3e-2 12.3e+2 Note You can put + or - in front of the number to specify its sign. Example: -123 . Other bases: 0b01110 (base 2, binary) 0o17403 (base 8, octal) 0x4EF1A (base 16, hexadecimal) 0b10e30 0o70e30 Note 0xA0e30 will be interpreted as the hexadecimal number A0E30 ( 3*16^1 + 15*16^2 + 10*16^4 ) and not as 0xA0 * 10^30 _ in numbers Note You can put as much underscores ( _ ) as you want in a number literal, as long as the underscore are not at the beginning or at the end of the literal, or around the dot in floating-point numbers (ex: 10_694_254 is the same as 10694254 , 10_ is not valid, 12._3 is not valid and 12_._3 isn\u2019t either.)","title":"Number literals"},{"location":"0.22/01language/02number_literals/#number-literals","text":"Here\u2019s all the different ways to write a number in Nougaro: 123 12.3 123e2 12.3e2 123e-2 123e+2 12.3e-2 12.3e+2 Note You can put + or - in front of the number to specify its sign. Example: -123 . Other bases: 0b01110 (base 2, binary) 0o17403 (base 8, octal) 0x4EF1A (base 16, hexadecimal) 0b10e30 0o70e30 Note 0xA0e30 will be interpreted as the hexadecimal number A0E30 ( 3*16^1 + 15*16^2 + 10*16^4 ) and not as 0xA0 * 10^30","title":"Number literals"},{"location":"0.22/01language/02number_literals/#_-in-numbers","text":"Note You can put as much underscores ( _ ) as you want in a number literal, as long as the underscore are not at the beginning or at the end of the literal, or around the dot in floating-point numbers (ex: 10_694_254 is the same as 10694254 , 10_ is not valid, 12._3 is not valid and 12_._3 isn\u2019t either.)","title":"_ in numbers"},{"location":"0.22/01language/03string_literals/","text":"String literals String literals are delimited by \"\" , '' or \u00ab\u00bb . Examples: \"hello\" 'hello' \u00abhello\u00bb Escape characters: \\' : ' \\\" : \" \\\u00bb : \u00bb \\n : backline \\t : tab \\\\ : backslash \\xAA : unicode character number AA (hex) \\uAAAA : unicode character number AAAA (hex) \\UAAAAAAAA : unicode character number AAAAAAAA (hex) \\N{NAME} : unicode character with name NAME. Returns SyntaxError if it doesn\u2019t exist. Note The backslash isn\u2019t left if the next character is not recognised (example: \"\\/\" is the same as \"/\" , and not \"\\\\/\" ) Examples: 'I\\'m a string literal' \"He said: \\\"'I'm a string literal'\\\"\" \"\\\\ backslashes, \\t tabs and \\n backlines\" \u00abThis string has a \\N{NO BREAK SPACE}\u00bb \"\\N{Latin Small Letter C with Cedilla}: \\xe7\" \"\\N{Greek Small Letter Eta with Dasia and Oxia and Ypogegrammeni}: \\u1F95\" \"This is Person Shrugging (\ud83e\udd37): \\U0001f937\" Note You can use the meta nbspBetweenFrenchGuillemets to be forced to use a no-break-space or a narrow-no-break-space after \u00ab and before \u00bb . These NBSP are not counted in the string and this does not affect the other string delimiters.","title":"String literals"},{"location":"0.22/01language/03string_literals/#string-literals","text":"String literals are delimited by \"\" , '' or \u00ab\u00bb . Examples: \"hello\" 'hello' \u00abhello\u00bb Escape characters: \\' : ' \\\" : \" \\\u00bb : \u00bb \\n : backline \\t : tab \\\\ : backslash \\xAA : unicode character number AA (hex) \\uAAAA : unicode character number AAAA (hex) \\UAAAAAAAA : unicode character number AAAAAAAA (hex) \\N{NAME} : unicode character with name NAME. Returns SyntaxError if it doesn\u2019t exist. Note The backslash isn\u2019t left if the next character is not recognised (example: \"\\/\" is the same as \"/\" , and not \"\\\\/\" ) Examples: 'I\\'m a string literal' \"He said: \\\"'I'm a string literal'\\\"\" \"\\\\ backslashes, \\t tabs and \\n backlines\" \u00abThis string has a \\N{NO BREAK SPACE}\u00bb \"\\N{Latin Small Letter C with Cedilla}: \\xe7\" \"\\N{Greek Small Letter Eta with Dasia and Oxia and Ypogegrammeni}: \\u1F95\" \"This is Person Shrugging (\ud83e\udd37): \\U0001f937\" Note You can use the meta nbspBetweenFrenchGuillemets to be forced to use a no-break-space or a narrow-no-break-space after \u00ab and before \u00bb . These NBSP are not counted in the string and this does not affect the other string delimiters.","title":"String literals"},{"location":"0.22/01language/04identifiers_and_keywords/","text":"Identifiers and keywords Identifiers (variable names) can be composed of the 26 characters of the ASCII alphabet ( a to z \u202fthen A to Z ), in lower and upper case, the underscore _ and digits ( 0 to 9 ). Note An identifier can not start with a digit. Keywords The following identifiers are reserved and can not be used as variable names: and as assert break class continue def del do elif else end export for if import in loop not or read return step then to var while write xor","title":"Identifiers and keywords"},{"location":"0.22/01language/04identifiers_and_keywords/#identifiers-and-keywords","text":"Identifiers (variable names) can be composed of the 26 characters of the ASCII alphabet ( a to z \u202fthen A to Z ), in lower and upper case, the underscore _ and digits ( 0 to 9 ). Note An identifier can not start with a digit.","title":"Identifiers and keywords"},{"location":"0.22/01language/04identifiers_and_keywords/#keywords","text":"The following identifiers are reserved and can not be used as variable names: and as assert break class continue def del do elif else end export for if import in loop not or read return step then to var while write xor","title":"Keywords"},{"location":"0.22/01language/05operators/","text":"Operators Mathematical operators Here all the mathematical operators in Nougaro (ordered by priority): Nougaro Python Comments ^ ** power * * multiplication % % modulo / / division // // floor division + + addition - - substraction & & bitwise and | | bitwise or ^^ ^ bitwise xor ~ ~ bitwise not It respects operation priority and you can use parenthesis. Examples 3 * 4 returns 12 4 / 2 returns 2 1 + 1 returns 2 3 - 4 returns -1 10 % 7 returns 3 10 % 3 returns 1 10 // 7 returns 1 10 // 3 returns 3 5 ^ 2 returns 25 62 & 35 returns 34 ~1 returns -2 and ~-2 returns 1 5 + 5 * 3 + 2 returns 22 (5 + 5) * (3 + 2) returns 50 Test operators They are exactly same as Python ones: Nougaro Python Comments == == equals to != != different than < < less than <= <= less than or equals > > greater than >= >= greater than or equals in in check if a value is in another Note the in keyword can check if: int , float , str , list , DefaultValue or NoneValue is in a str any value is in a list Added in 0.22.0-beta DefaultValue is new in 0.22.0-beta. Logical operators There is one logical operator that isn't here in Python. There is a list: Nougaro Python Comments and and boolean 'and' or or boolean 'or' xor ^ boolean 'exclusive or' not not boolean 'not' (inverter)","title":"Operators"},{"location":"0.22/01language/05operators/#operators","text":"","title":"Operators"},{"location":"0.22/01language/05operators/#mathematical-operators","text":"Here all the mathematical operators in Nougaro (ordered by priority): Nougaro Python Comments ^ ** power * * multiplication % % modulo / / division // // floor division + + addition - - substraction & & bitwise and | | bitwise or ^^ ^ bitwise xor ~ ~ bitwise not It respects operation priority and you can use parenthesis.","title":"Mathematical operators"},{"location":"0.22/01language/05operators/#examples","text":"3 * 4 returns 12 4 / 2 returns 2 1 + 1 returns 2 3 - 4 returns -1 10 % 7 returns 3 10 % 3 returns 1 10 // 7 returns 1 10 // 3 returns 3 5 ^ 2 returns 25 62 & 35 returns 34 ~1 returns -2 and ~-2 returns 1 5 + 5 * 3 + 2 returns 22 (5 + 5) * (3 + 2) returns 50","title":"Examples"},{"location":"0.22/01language/05operators/#test-operators","text":"They are exactly same as Python ones: Nougaro Python Comments == == equals to != != different than < < less than <= <= less than or equals > > greater than >= >= greater than or equals in in check if a value is in another Note the in keyword can check if: int , float , str , list , DefaultValue or NoneValue is in a str any value is in a list Added in 0.22.0-beta DefaultValue is new in 0.22.0-beta.","title":"Test operators"},{"location":"0.22/01language/05operators/#logical-operators","text":"There is one logical operator that isn't here in Python. There is a list: Nougaro Python Comments and and boolean 'and' or or boolean 'or' xor ^ boolean 'exclusive or' not not boolean 'not' (inverter)","title":"Logical operators"},{"location":"0.22/01language/06values/","text":"Values Here is the list of the value types in Nougaro: int ( integers ). Internal type: int float ( floats ). Internal type: float str ( strings ). Internal type: str list ( lists ). Internal type: list NoneType ( None ). Internal type: NoneValue function . Internal type: func . module . Internal type: module constructor . Internal type: constructor object . Internal type: depends on the class\u2019 name, and it is <class> if the class has no name. Note Internal value types are base value (type: BaseValue ) and default value (type: DefaultValue ) Added in 0.22.0-beta DefaultValue is new in 0.22.0-beta. Changed in 0.22.0-beta Before 0.22.0-beta, a distinction was made between func (user-defined function or function in a module written in Nougaro) and built-in func (built-in function or function in a module written in Python) Numbers Numbers represents real-life numbers. The two types of numbers are int and float . To declare a number, you can use a number literal . Operations that can be used between two numbers are: addition, substraction, multiplication, power. If the second number is non-zero, division, modulo and floor division can be used. All these operations follow the mathematical logic (except for 0^0, that returns 1). Multiplication can be used between a integer (type int ) and a string or a list . For example, 3*\"str\" returns \"strstrstr\" , and 2*[1, 2] returns [1, 2, 1, 2] . In boolean context, a number is true if it is non-zero. Strings The type of a string is str . To declare a string, you can use a string literal The only operation that can be used between strings is addition, which concatenates the string with the other. For example, \"hello, \" + \"world!\" returns \"hello, world!\" . Multiplication can be used between a string and an integer (type int ). For example, \"str\"*3 returns \"strstrstr\" . In boolean context, a string is true if it contains at least one character. Lists Lists are a succession of values. To declare a list, you can use brackets ( [] ), and put every value separated by a comma ( , ) inside. They may be 0 values. To create a list with elements from another list (and other elements), you can use this syntax: [1, 2, *list_, 5] (which is [1, 2, 3, 4, 5] if list_ is [3, 4] ). The only operation that can be used between two lists is multiplication, which extends the first list with the content of the second list. This can also be achieved using extend(list1, list2) Addition can be used between a list and any other value to add an element to the list. Substraction can be used between a list and an integer (type int ) to pop (i.e. delete) an element by index. This supports negative numbers. The returned value is the list after the pop. This can be achieved with pop(list, index) , although this returns the popped value. Multiplication can be used between a list and an integer (type int ). For example, [1, 2]*2 returns [1, 2, 1, 2] . Division can be used between a list and an integer (type int ) to get an element by index. This supports negative numbers. This can be achieved using list[index] or get(list, index) . In boolean context, a list is true if it is not empty None None is a value to denote the absence of other values. It is accessible trought the None built-in variable. No operation can be used on None . In boolean context, None is false.","title":"Values"},{"location":"0.22/01language/06values/#values","text":"Here is the list of the value types in Nougaro: int ( integers ). Internal type: int float ( floats ). Internal type: float str ( strings ). Internal type: str list ( lists ). Internal type: list NoneType ( None ). Internal type: NoneValue function . Internal type: func . module . Internal type: module constructor . Internal type: constructor object . Internal type: depends on the class\u2019 name, and it is <class> if the class has no name. Note Internal value types are base value (type: BaseValue ) and default value (type: DefaultValue ) Added in 0.22.0-beta DefaultValue is new in 0.22.0-beta. Changed in 0.22.0-beta Before 0.22.0-beta, a distinction was made between func (user-defined function or function in a module written in Nougaro) and built-in func (built-in function or function in a module written in Python)","title":"Values"},{"location":"0.22/01language/06values/#numbers","text":"Numbers represents real-life numbers. The two types of numbers are int and float . To declare a number, you can use a number literal . Operations that can be used between two numbers are: addition, substraction, multiplication, power. If the second number is non-zero, division, modulo and floor division can be used. All these operations follow the mathematical logic (except for 0^0, that returns 1). Multiplication can be used between a integer (type int ) and a string or a list . For example, 3*\"str\" returns \"strstrstr\" , and 2*[1, 2] returns [1, 2, 1, 2] . In boolean context, a number is true if it is non-zero.","title":"Numbers"},{"location":"0.22/01language/06values/#strings","text":"The type of a string is str . To declare a string, you can use a string literal The only operation that can be used between strings is addition, which concatenates the string with the other. For example, \"hello, \" + \"world!\" returns \"hello, world!\" . Multiplication can be used between a string and an integer (type int ). For example, \"str\"*3 returns \"strstrstr\" . In boolean context, a string is true if it contains at least one character.","title":"Strings"},{"location":"0.22/01language/06values/#lists","text":"Lists are a succession of values. To declare a list, you can use brackets ( [] ), and put every value separated by a comma ( , ) inside. They may be 0 values. To create a list with elements from another list (and other elements), you can use this syntax: [1, 2, *list_, 5] (which is [1, 2, 3, 4, 5] if list_ is [3, 4] ). The only operation that can be used between two lists is multiplication, which extends the first list with the content of the second list. This can also be achieved using extend(list1, list2) Addition can be used between a list and any other value to add an element to the list. Substraction can be used between a list and an integer (type int ) to pop (i.e. delete) an element by index. This supports negative numbers. The returned value is the list after the pop. This can be achieved with pop(list, index) , although this returns the popped value. Multiplication can be used between a list and an integer (type int ). For example, [1, 2]*2 returns [1, 2, 1, 2] . Division can be used between a list and an integer (type int ) to get an element by index. This supports negative numbers. This can be achieved using list[index] or get(list, index) . In boolean context, a list is true if it is not empty","title":"Lists"},{"location":"0.22/01language/06values/#none","text":"None is a value to denote the absence of other values. It is accessible trought the None built-in variable. No operation can be used on None . In boolean context, None is false.","title":"None"},{"location":"0.22/01language/07variables/","text":"Variables Definition Use the syntax var identifier = value (see identifiers and values ) to assign the value value to the variable named identifier . The expression var identifier = value returns value . To assign the same value to multiple variables, you can use var variable1 = var variable2 = var variable3 = value . If you want to assign multiple values to multiple variables, you can use var variable1, variable2 = value1, value2 . This can be used to swap variables: var a, b = b, a . Except for keywords , there are no prohibited variable name. Edition You can edit variables by multiple ways: var a = value ; var a += value : same as var a = a + value ; var a ++ : same as var a += 1 ; var a -= value : same as var a = a - value ; var a -- : same as var a -= 1 ; var a *= value : same as var a = a * value ; var a /= value : same as var a = a / value ; var a ^= value : same as var a = a ^ value ; var a //= value : same as var a = a // value ; var a %= value : same as var a = a % value ; var a ||= value : same as var a = a or value ; var a &&= value : same as var a = a and value ; var a ^^^= value : same as var a = a xor value ; var a |= value : same as var a = a | value ; var a &= value : same as var a = a & value ; var a ^^= value : same as var a = a ^^ value ; var a === value : same as var a = a == value ; var a <== value : same as var a = a <= value ; var a <<= value : same as var a = a < value ; var a >== value : same as var a = a >= value ; var a >>= value : same as var a = a > value . Info For details about these operators, see this page . Note You can also edit multiple variables at the same time: var a, b += 1, 2 : same as var a += 1 ; var b += 2 var a, b ++ : same as var a, b += 1, 1 var a, b //= b, a : same as var c = a ; var a //= b ; var b //= c ; del c Access To access to a variable, you can: give the identifier: foo (returns the value of foo ) use the special syntax: foo ? bar ? a ? b (returns the value of foo if it is defined, otherwise the value of bar ... You can put as much ? identifier as you want.) Then, you can put an expression at the end, such as 2 . In this case, the value returned will be 2 if none of the given identifiers is defined. Deletion If you don't need a variable anymore, you can delete it with the del keyword: del identifier . Examples var foo = var bar = 12 while foo != bar - 1 then var bar -= 1 (see while loop ) Example for deletion Create a variable a , the delete it: nougaro> var a = 1 1 nougaro> del a But be careful! It can return errors: nougaro> var a = 1 1 nougaro> del a nougaro> del a Traceback (more recent call last): In file <stdin>, line 1, in <program>: del a ^ NotDefinedError: a is not defined.","title":"Variables"},{"location":"0.22/01language/07variables/#variables","text":"","title":"Variables"},{"location":"0.22/01language/07variables/#definition","text":"Use the syntax var identifier = value (see identifiers and values ) to assign the value value to the variable named identifier . The expression var identifier = value returns value . To assign the same value to multiple variables, you can use var variable1 = var variable2 = var variable3 = value . If you want to assign multiple values to multiple variables, you can use var variable1, variable2 = value1, value2 . This can be used to swap variables: var a, b = b, a . Except for keywords , there are no prohibited variable name.","title":"Definition"},{"location":"0.22/01language/07variables/#edition","text":"You can edit variables by multiple ways: var a = value ; var a += value : same as var a = a + value ; var a ++ : same as var a += 1 ; var a -= value : same as var a = a - value ; var a -- : same as var a -= 1 ; var a *= value : same as var a = a * value ; var a /= value : same as var a = a / value ; var a ^= value : same as var a = a ^ value ; var a //= value : same as var a = a // value ; var a %= value : same as var a = a % value ; var a ||= value : same as var a = a or value ; var a &&= value : same as var a = a and value ; var a ^^^= value : same as var a = a xor value ; var a |= value : same as var a = a | value ; var a &= value : same as var a = a & value ; var a ^^= value : same as var a = a ^^ value ; var a === value : same as var a = a == value ; var a <== value : same as var a = a <= value ; var a <<= value : same as var a = a < value ; var a >== value : same as var a = a >= value ; var a >>= value : same as var a = a > value . Info For details about these operators, see this page . Note You can also edit multiple variables at the same time: var a, b += 1, 2 : same as var a += 1 ; var b += 2 var a, b ++ : same as var a, b += 1, 1 var a, b //= b, a : same as var c = a ; var a //= b ; var b //= c ; del c","title":"Edition"},{"location":"0.22/01language/07variables/#access","text":"To access to a variable, you can: give the identifier: foo (returns the value of foo ) use the special syntax: foo ? bar ? a ? b (returns the value of foo if it is defined, otherwise the value of bar ... You can put as much ? identifier as you want.) Then, you can put an expression at the end, such as 2 . In this case, the value returned will be 2 if none of the given identifiers is defined.","title":"Access"},{"location":"0.22/01language/07variables/#deletion","text":"If you don't need a variable anymore, you can delete it with the del keyword: del identifier .","title":"Deletion"},{"location":"0.22/01language/07variables/#examples","text":"var foo = var bar = 12 while foo != bar - 1 then var bar -= 1 (see while loop )","title":"Examples"},{"location":"0.22/01language/07variables/#example-for-deletion","text":"Create a variable a , the delete it: nougaro> var a = 1 1 nougaro> del a But be careful! It can return errors: nougaro> var a = 1 1 nougaro> del a nougaro> del a Traceback (more recent call last): In file <stdin>, line 1, in <program>: del a ^ NotDefinedError: a is not defined.","title":"Example for deletion"}]}