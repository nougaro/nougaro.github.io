{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Nougaro documentation Overview Nougaro is an interpreted dynamic-typed programming language. Choose your version 0.22 0.23 1.0 1.1 1.2 (latest) License This document is under the GNU FDL licence. Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled \"GNU Free Documentation License\" .","title":"Welcome to the Nougaro documentation"},{"location":"#welcome-to-the-nougaro-documentation","text":"","title":"Welcome to the Nougaro documentation"},{"location":"#overview","text":"Nougaro is an interpreted dynamic-typed programming language.","title":"Overview"},{"location":"#choose-your-version","text":"0.22 0.23 1.0 1.1 1.2 (latest)","title":"Choose your version"},{"location":"#license","text":"This document is under the GNU FDL licence. Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled \"GNU Free Documentation License\" .","title":"License"},{"location":"gnu_fdl/","text":"GNU Free Documentation Licence GNU Free Documentation License Version 1.3, 3 November 2008 Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc. <https://fsf.org/> Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. 0. PREAMBLE The purpose of this License is to make a manual, textbook, or other functional and useful document \"free\" in the sense of freedom: to assure everyone the effective freedom to copy and redistribute it, with or without modifying it, either commercially or noncommercially. Secondarily, this License preserves for the author and publisher a way to get credit for their work, while not being considered responsible for modifications made by others. This License is a kind of \"copyleft\", which means that derivative works of the document must themselves be free in the same sense. It complements the GNU General Public License, which is a copyleft license designed for free software. We have designed this License in order to use it for manuals for free software, because free software needs free documentation: a free program should come with manuals providing the same freedoms that the software does. But this License is not limited to software manuals; it can be used for any textual work, regardless of subject matter or whether it is published as a printed book. We recommend this License principally for works whose purpose is instruction or reference. 1. APPLICABILITY AND DEFINITIONS This License applies to any manual or other work, in any medium, that contains a notice placed by the copyright holder saying it can be distributed under the terms of this License. Such a notice grants a world-wide, royalty-free license, unlimited in duration, to use that work under the conditions stated herein. The \"Document\", below, refers to any such manual or work. Any member of the public is a licensee, and is addressed as \"you\". You accept the license if you copy, modify or distribute the work in a way requiring permission under copyright law. A \"Modified Version\" of the Document means any work containing the Document or a portion of it, either copied verbatim, or with modifications and/or translated into another language. A \"Secondary Section\" is a named appendix or a front-matter section of the Document that deals exclusively with the relationship of the publishers or authors of the Document to the Document's overall subject (or to related matters) and contains nothing that could fall directly within that overall subject. (Thus, if the Document is in part a textbook of mathematics, a Secondary Section may not explain any mathematics.) The relationship could be a matter of historical connection with the subject or with related matters, or of legal, commercial, philosophical, ethical or political position regarding them. The \"Invariant Sections\" are certain Secondary Sections whose titles are designated, as being those of Invariant Sections, in the notice that says that the Document is released under this License. If a section does not fit the above definition of Secondary then it is not allowed to be designated as Invariant. The Document may contain zero Invariant Sections. If the Document does not identify any Invariant Sections then there are none. The \"Cover Texts\" are certain short passages of text that are listed, as Front-Cover Texts or Back-Cover Texts, in the notice that says that the Document is released under this License. A Front-Cover Text may be at most 5 words, and a Back-Cover Text may be at most 25 words. A \"Transparent\" copy of the Document means a machine-readable copy, represented in a format whose specification is available to the general public, that is suitable for revising the document straightforwardly with generic text editors or (for images composed of pixels) generic paint programs or (for drawings) some widely available drawing editor, and that is suitable for input to text formatters or for automatic translation to a variety of formats suitable for input to text formatters. A copy made in an otherwise Transparent file format whose markup, or absence of markup, has been arranged to thwart or discourage subsequent modification by readers is not Transparent. An image format is not Transparent if used for any substantial amount of text. A copy that is not \"Transparent\" is called \"Opaque\". Examples of suitable formats for Transparent copies include plain ASCII without markup, Texinfo input format, LaTeX input format, SGML or XML using a publicly available DTD, and standard-conforming simple HTML, PostScript or PDF designed for human modification. Examples of transparent image formats include PNG, XCF and JPG. Opaque formats include proprietary formats that can be read and edited only by proprietary word processors, SGML or XML for which the DTD and/or processing tools are not generally available, and the machine-generated HTML, PostScript or PDF produced by some word processors for output purposes only. The \"Title Page\" means, for a printed book, the title page itself, plus such following pages as are needed to hold, legibly, the material this License requires to appear in the title page. For works in formats which do not have any title page as such, \"Title Page\" means the text near the most prominent appearance of the work's title, preceding the beginning of the body of the text. The \"publisher\" means any person or entity that distributes copies of the Document to the public. A section \"Entitled XYZ\" means a named subunit of the Document whose title either is precisely XYZ or contains XYZ in parentheses following text that translates XYZ in another language. (Here XYZ stands for a specific section name mentioned below, such as \"Acknowledgements\", \"Dedications\", \"Endorsements\", or \"History\".) To \"Preserve the Title\" of such a section when you modify the Document means that it remains a section \"Entitled XYZ\" according to this definition. The Document may include Warranty Disclaimers next to the notice which states that this License applies to the Document. These Warranty Disclaimers are considered to be included by reference in this License, but only as regards disclaiming warranties: any other implication that these Warranty Disclaimers may have is void and has no effect on the meaning of this License. 2. VERBATIM COPYING You may copy and distribute the Document in any medium, either commercially or noncommercially, provided that this License, the copyright notices, and the license notice saying this License applies to the Document are reproduced in all copies, and that you add no other conditions whatsoever to those of this License. You may not use technical measures to obstruct or control the reading or further copying of the copies you make or distribute. However, you may accept compensation in exchange for copies. If you distribute a large enough number of copies you must also follow the conditions in section 3. You may also lend copies, under the same conditions stated above, and you may publicly display copies. 3. COPYING IN QUANTITY If you publish printed copies (or copies in media that commonly have printed covers) of the Document, numbering more than 100, and the Document's license notice requires Cover Texts, you must enclose the copies in covers that carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on the back cover. Both covers must also clearly and legibly identify you as the publisher of these copies. The front cover must present the full title with all words of the title equally prominent and visible. You may add other material on the covers in addition. Copying with changes limited to the covers, as long as they preserve the title of the Document and satisfy these conditions, can be treated as verbatim copying in other respects. If the required texts for either cover are too voluminous to fit legibly, you should put the first ones listed (as many as fit reasonably) on the actual cover, and continue the rest onto adjacent pages. If you publish or distribute Opaque copies of the Document numbering more than 100, you must either include a machine-readable Transparent copy along with each Opaque copy, or state in or with each Opaque copy a computer-network location from which the general network-using public has access to download using public-standard network protocols a complete Transparent copy of the Document, free of added material. If you use the latter option, you must take reasonably prudent steps, when you begin distribution of Opaque copies in quantity, to ensure that this Transparent copy will remain thus accessible at the stated location until at least one year after the last time you distribute an Opaque copy (directly or through your agents or retailers) of that edition to the public. It is requested, but not required, that you contact the authors of the Document well before redistributing any large number of copies, to give them a chance to provide you with an updated version of the Document. 4. MODIFICATIONS You may copy and distribute a Modified Version of the Document under the conditions of sections 2 and 3 above, provided that you release the Modified Version under precisely this License, with the Modified Version filling the role of the Document, thus licensing distribution and modification of the Modified Version to whoever possesses a copy of it. In addition, you must do these things in the Modified Version: A. Use in the Title Page (and on the covers, if any) a title distinct from that of the Document, and from those of previous versions (which should, if there were any, be listed in the History section of the Document). You may use the same title as a previous version if the original publisher of that version gives permission. B. List on the Title Page, as authors, one or more persons or entities responsible for authorship of the modifications in the Modified Version, together with at least five of the principal authors of the Document (all of its principal authors, if it has fewer than five), unless they release you from this requirement. C. State on the Title page the name of the publisher of the Modified Version, as the publisher. D. Preserve all the copyright notices of the Document. E. Add an appropriate copyright notice for your modifications adjacent to the other copyright notices. F. Include, immediately after the copyright notices, a license notice giving the public permission to use the Modified Version under the terms of this License, in the form shown in the Addendum below. G. Preserve in that license notice the full lists of Invariant Sections and required Cover Texts given in the Document's license notice. H. Include an unaltered copy of this License. I. Preserve the section Entitled \"History\", Preserve its Title, and add to it an item stating at least the title, year, new authors, and publisher of the Modified Version as given on the Title Page. If there is no section Entitled \"History\" in the Document, create one stating the title, year, authors, and publisher of the Document as given on its Title Page, then add an item describing the Modified Version as stated in the previous sentence. J. Preserve the network location, if any, given in the Document for public access to a Transparent copy of the Document, and likewise the network locations given in the Document for previous versions it was based on. These may be placed in the \"History\" section. You may omit a network location for a work that was published at least four years before the Document itself, or if the original publisher of the version it refers to gives permission. K. For any section Entitled \"Acknowledgements\" or \"Dedications\", Preserve the Title of the section, and preserve in the section all the substance and tone of each of the contributor acknowledgements and/or dedications given therein. L. Preserve all the Invariant Sections of the Document, unaltered in their text and in their titles. Section numbers or the equivalent are not considered part of the section titles. M. Delete any section Entitled \"Endorsements\". Such a section may not be included in the Modified Version. N. Do not retitle any existing section to be Entitled \"Endorsements\" or to conflict in title with any Invariant Section. O. Preserve any Warranty Disclaimers. If the Modified Version includes new front-matter sections or appendices that qualify as Secondary Sections and contain no material copied from the Document, you may at your option designate some or all of these sections as invariant. To do this, add their titles to the list of Invariant Sections in the Modified Version's license notice. These titles must be distinct from any other section titles. You may add a section Entitled \"Endorsements\", provided it contains nothing but endorsements of your Modified Version by various parties--for example, statements of peer review or that the text has been approved by an organization as the authoritative definition of a standard. You may add a passage of up to five words as a Front-Cover Text, and a passage of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts in the Modified Version. Only one passage of Front-Cover Text and one of Back-Cover Text may be added by (or through arrangements made by) any one entity. If the Document already includes a cover text for the same cover, previously added by you or by arrangement made by the same entity you are acting on behalf of, you may not add another; but you may replace the old one, on explicit permission from the previous publisher that added the old one. The author(s) and publisher(s) of the Document do not by this License give permission to use their names for publicity for or to assert or imply endorsement of any Modified Version. 5. COMBINING DOCUMENTS You may combine the Document with other documents released under this License, under the terms defined in section 4 above for modified versions, provided that you include in the combination all of the Invariant Sections of all of the original documents, unmodified, and list them all as Invariant Sections of your combined work in its license notice, and that you preserve all their Warranty Disclaimers. The combined work need only contain one copy of this License, and multiple identical Invariant Sections may be replaced with a single copy. If there are multiple Invariant Sections with the same name but different contents, make the title of each such section unique by adding at the end of it, in parentheses, the name of the original author or publisher of that section if known, or else a unique number. Make the same adjustment to the section titles in the list of Invariant Sections in the license notice of the combined work. In the combination, you must combine any sections Entitled \"History\" in the various original documents, forming one section Entitled \"History\"; likewise combine any sections Entitled \"Acknowledgements\", and any sections Entitled \"Dedications\". You must delete all sections Entitled \"Endorsements\". 6. COLLECTIONS OF DOCUMENTS You may make a collection consisting of the Document and other documents released under this License, and replace the individual copies of this License in the various documents with a single copy that is included in the collection, provided that you follow the rules of this License for verbatim copying of each of the documents in all other respects. You may extract a single document from such a collection, and distribute it individually under this License, provided you insert a copy of this License into the extracted document, and follow this License in all other respects regarding verbatim copying of that document. 7. AGGREGATION WITH INDEPENDENT WORKS A compilation of the Document or its derivatives with other separate and independent documents or works, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the copyright resulting from the compilation is not used to limit the legal rights of the compilation's users beyond what the individual works permit. When the Document is included in an aggregate, this License does not apply to the other works in the aggregate which are not themselves derivative works of the Document. If the Cover Text requirement of section 3 is applicable to these copies of the Document, then if the Document is less than one half of the entire aggregate, the Document's Cover Texts may be placed on covers that bracket the Document within the aggregate, or the electronic equivalent of covers if the Document is in electronic form. Otherwise they must appear on printed covers that bracket the whole aggregate. 8. TRANSLATION Translation is considered a kind of modification, so you may distribute translations of the Document under the terms of section 4. Replacing Invariant Sections with translations requires special permission from their copyright holders, but you may include translations of some or all Invariant Sections in addition to the original versions of these Invariant Sections. You may include a translation of this License, and all the license notices in the Document, and any Warranty Disclaimers, provided that you also include the original English version of this License and the original versions of those notices and disclaimers. In case of a disagreement between the translation and the original version of this License or a notice or disclaimer, the original version will prevail. If a section in the Document is Entitled \"Acknowledgements\", \"Dedications\", or \"History\", the requirement (section 4) to Preserve its Title (section 1) will typically require changing the actual title. 9. TERMINATION You may not copy, modify, sublicense, or distribute the Document except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, or distribute it is void, and will automatically terminate your rights under this License. However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, receipt of a copy of some or all of the same material does not give you any rights to use it. 10. FUTURE REVISIONS OF THIS LICENSE The Free Software Foundation may publish new, revised versions of the GNU Free Documentation License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. See https://www.gnu.org/licenses/. Each version of the License is given a distinguishing version number. If the Document specifies that a particular numbered version of this License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that specified version or of any later version that has been published (not as a draft) by the Free Software Foundation. If the Document does not specify a version number of this License, you may choose any version ever published (not as a draft) by the Free Software Foundation. If the Document specifies that a proxy can decide which future versions of this License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Document. 11. RELICENSING \"Massive Multiauthor Collaboration Site\" (or \"MMC Site\") means any World Wide Web server that publishes copyrightable works and also provides prominent facilities for anybody to edit those works. A public wiki that anybody can edit is an example of such a server. A \"Massive Multiauthor Collaboration\" (or \"MMC\") contained in the site means any set of copyrightable works thus published on the MMC site. \"CC-BY-SA\" means the Creative Commons Attribution-Share Alike 3.0 license published by Creative Commons Corporation, a not-for-profit corporation with a principal place of business in San Francisco, California, as well as future copyleft versions of that license published by that same organization. \"Incorporate\" means to publish or republish a Document, in whole or in part, as part of another Document. An MMC is \"eligible for relicensing\" if it is licensed under this License, and if all works that were first published under this License somewhere other than this MMC, and subsequently incorporated in whole or in part into the MMC, (1) had no cover texts or invariant sections, and (2) were thus incorporated prior to November 1, 2008. The operator of an MMC Site may republish an MMC contained in the site under CC-BY-SA on the same site at any time before August 1, 2009, provided the MMC is eligible for relicensing. ADDENDUM: How to use this License for your documents To use this License in a document you have written, include a copy of the License in the document and put the following copyright and license notices just after the title page: Copyright (c) YEAR YOUR NAME. Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled \"GNU Free Documentation License\". If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts, replace the \"with...Texts.\" line with this: with the Invariant Sections being LIST THEIR TITLES, with the Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST. If you have Invariant Sections without Cover Texts, or some other combination of the three, merge those two alternatives to suit the situation. If your document contains nontrivial examples of program code, we recommend releasing these examples in parallel under your choice of free software license, such as the GNU General Public License, to permit their use in free software.","title":"GNU Free Documentation Licence"},{"location":"gnu_fdl/#gnu-free-documentation-licence","text":"GNU Free Documentation License Version 1.3, 3 November 2008 Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc. <https://fsf.org/> Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. 0. PREAMBLE The purpose of this License is to make a manual, textbook, or other functional and useful document \"free\" in the sense of freedom: to assure everyone the effective freedom to copy and redistribute it, with or without modifying it, either commercially or noncommercially. Secondarily, this License preserves for the author and publisher a way to get credit for their work, while not being considered responsible for modifications made by others. This License is a kind of \"copyleft\", which means that derivative works of the document must themselves be free in the same sense. It complements the GNU General Public License, which is a copyleft license designed for free software. We have designed this License in order to use it for manuals for free software, because free software needs free documentation: a free program should come with manuals providing the same freedoms that the software does. But this License is not limited to software manuals; it can be used for any textual work, regardless of subject matter or whether it is published as a printed book. We recommend this License principally for works whose purpose is instruction or reference. 1. APPLICABILITY AND DEFINITIONS This License applies to any manual or other work, in any medium, that contains a notice placed by the copyright holder saying it can be distributed under the terms of this License. Such a notice grants a world-wide, royalty-free license, unlimited in duration, to use that work under the conditions stated herein. The \"Document\", below, refers to any such manual or work. Any member of the public is a licensee, and is addressed as \"you\". You accept the license if you copy, modify or distribute the work in a way requiring permission under copyright law. A \"Modified Version\" of the Document means any work containing the Document or a portion of it, either copied verbatim, or with modifications and/or translated into another language. A \"Secondary Section\" is a named appendix or a front-matter section of the Document that deals exclusively with the relationship of the publishers or authors of the Document to the Document's overall subject (or to related matters) and contains nothing that could fall directly within that overall subject. (Thus, if the Document is in part a textbook of mathematics, a Secondary Section may not explain any mathematics.) The relationship could be a matter of historical connection with the subject or with related matters, or of legal, commercial, philosophical, ethical or political position regarding them. The \"Invariant Sections\" are certain Secondary Sections whose titles are designated, as being those of Invariant Sections, in the notice that says that the Document is released under this License. If a section does not fit the above definition of Secondary then it is not allowed to be designated as Invariant. The Document may contain zero Invariant Sections. If the Document does not identify any Invariant Sections then there are none. The \"Cover Texts\" are certain short passages of text that are listed, as Front-Cover Texts or Back-Cover Texts, in the notice that says that the Document is released under this License. A Front-Cover Text may be at most 5 words, and a Back-Cover Text may be at most 25 words. A \"Transparent\" copy of the Document means a machine-readable copy, represented in a format whose specification is available to the general public, that is suitable for revising the document straightforwardly with generic text editors or (for images composed of pixels) generic paint programs or (for drawings) some widely available drawing editor, and that is suitable for input to text formatters or for automatic translation to a variety of formats suitable for input to text formatters. A copy made in an otherwise Transparent file format whose markup, or absence of markup, has been arranged to thwart or discourage subsequent modification by readers is not Transparent. An image format is not Transparent if used for any substantial amount of text. A copy that is not \"Transparent\" is called \"Opaque\". Examples of suitable formats for Transparent copies include plain ASCII without markup, Texinfo input format, LaTeX input format, SGML or XML using a publicly available DTD, and standard-conforming simple HTML, PostScript or PDF designed for human modification. Examples of transparent image formats include PNG, XCF and JPG. Opaque formats include proprietary formats that can be read and edited only by proprietary word processors, SGML or XML for which the DTD and/or processing tools are not generally available, and the machine-generated HTML, PostScript or PDF produced by some word processors for output purposes only. The \"Title Page\" means, for a printed book, the title page itself, plus such following pages as are needed to hold, legibly, the material this License requires to appear in the title page. For works in formats which do not have any title page as such, \"Title Page\" means the text near the most prominent appearance of the work's title, preceding the beginning of the body of the text. The \"publisher\" means any person or entity that distributes copies of the Document to the public. A section \"Entitled XYZ\" means a named subunit of the Document whose title either is precisely XYZ or contains XYZ in parentheses following text that translates XYZ in another language. (Here XYZ stands for a specific section name mentioned below, such as \"Acknowledgements\", \"Dedications\", \"Endorsements\", or \"History\".) To \"Preserve the Title\" of such a section when you modify the Document means that it remains a section \"Entitled XYZ\" according to this definition. The Document may include Warranty Disclaimers next to the notice which states that this License applies to the Document. These Warranty Disclaimers are considered to be included by reference in this License, but only as regards disclaiming warranties: any other implication that these Warranty Disclaimers may have is void and has no effect on the meaning of this License. 2. VERBATIM COPYING You may copy and distribute the Document in any medium, either commercially or noncommercially, provided that this License, the copyright notices, and the license notice saying this License applies to the Document are reproduced in all copies, and that you add no other conditions whatsoever to those of this License. You may not use technical measures to obstruct or control the reading or further copying of the copies you make or distribute. However, you may accept compensation in exchange for copies. If you distribute a large enough number of copies you must also follow the conditions in section 3. You may also lend copies, under the same conditions stated above, and you may publicly display copies. 3. COPYING IN QUANTITY If you publish printed copies (or copies in media that commonly have printed covers) of the Document, numbering more than 100, and the Document's license notice requires Cover Texts, you must enclose the copies in covers that carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on the back cover. Both covers must also clearly and legibly identify you as the publisher of these copies. The front cover must present the full title with all words of the title equally prominent and visible. You may add other material on the covers in addition. Copying with changes limited to the covers, as long as they preserve the title of the Document and satisfy these conditions, can be treated as verbatim copying in other respects. If the required texts for either cover are too voluminous to fit legibly, you should put the first ones listed (as many as fit reasonably) on the actual cover, and continue the rest onto adjacent pages. If you publish or distribute Opaque copies of the Document numbering more than 100, you must either include a machine-readable Transparent copy along with each Opaque copy, or state in or with each Opaque copy a computer-network location from which the general network-using public has access to download using public-standard network protocols a complete Transparent copy of the Document, free of added material. If you use the latter option, you must take reasonably prudent steps, when you begin distribution of Opaque copies in quantity, to ensure that this Transparent copy will remain thus accessible at the stated location until at least one year after the last time you distribute an Opaque copy (directly or through your agents or retailers) of that edition to the public. It is requested, but not required, that you contact the authors of the Document well before redistributing any large number of copies, to give them a chance to provide you with an updated version of the Document. 4. MODIFICATIONS You may copy and distribute a Modified Version of the Document under the conditions of sections 2 and 3 above, provided that you release the Modified Version under precisely this License, with the Modified Version filling the role of the Document, thus licensing distribution and modification of the Modified Version to whoever possesses a copy of it. In addition, you must do these things in the Modified Version: A. Use in the Title Page (and on the covers, if any) a title distinct from that of the Document, and from those of previous versions (which should, if there were any, be listed in the History section of the Document). You may use the same title as a previous version if the original publisher of that version gives permission. B. List on the Title Page, as authors, one or more persons or entities responsible for authorship of the modifications in the Modified Version, together with at least five of the principal authors of the Document (all of its principal authors, if it has fewer than five), unless they release you from this requirement. C. State on the Title page the name of the publisher of the Modified Version, as the publisher. D. Preserve all the copyright notices of the Document. E. Add an appropriate copyright notice for your modifications adjacent to the other copyright notices. F. Include, immediately after the copyright notices, a license notice giving the public permission to use the Modified Version under the terms of this License, in the form shown in the Addendum below. G. Preserve in that license notice the full lists of Invariant Sections and required Cover Texts given in the Document's license notice. H. Include an unaltered copy of this License. I. Preserve the section Entitled \"History\", Preserve its Title, and add to it an item stating at least the title, year, new authors, and publisher of the Modified Version as given on the Title Page. If there is no section Entitled \"History\" in the Document, create one stating the title, year, authors, and publisher of the Document as given on its Title Page, then add an item describing the Modified Version as stated in the previous sentence. J. Preserve the network location, if any, given in the Document for public access to a Transparent copy of the Document, and likewise the network locations given in the Document for previous versions it was based on. These may be placed in the \"History\" section. You may omit a network location for a work that was published at least four years before the Document itself, or if the original publisher of the version it refers to gives permission. K. For any section Entitled \"Acknowledgements\" or \"Dedications\", Preserve the Title of the section, and preserve in the section all the substance and tone of each of the contributor acknowledgements and/or dedications given therein. L. Preserve all the Invariant Sections of the Document, unaltered in their text and in their titles. Section numbers or the equivalent are not considered part of the section titles. M. Delete any section Entitled \"Endorsements\". Such a section may not be included in the Modified Version. N. Do not retitle any existing section to be Entitled \"Endorsements\" or to conflict in title with any Invariant Section. O. Preserve any Warranty Disclaimers. If the Modified Version includes new front-matter sections or appendices that qualify as Secondary Sections and contain no material copied from the Document, you may at your option designate some or all of these sections as invariant. To do this, add their titles to the list of Invariant Sections in the Modified Version's license notice. These titles must be distinct from any other section titles. You may add a section Entitled \"Endorsements\", provided it contains nothing but endorsements of your Modified Version by various parties--for example, statements of peer review or that the text has been approved by an organization as the authoritative definition of a standard. You may add a passage of up to five words as a Front-Cover Text, and a passage of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts in the Modified Version. Only one passage of Front-Cover Text and one of Back-Cover Text may be added by (or through arrangements made by) any one entity. If the Document already includes a cover text for the same cover, previously added by you or by arrangement made by the same entity you are acting on behalf of, you may not add another; but you may replace the old one, on explicit permission from the previous publisher that added the old one. The author(s) and publisher(s) of the Document do not by this License give permission to use their names for publicity for or to assert or imply endorsement of any Modified Version. 5. COMBINING DOCUMENTS You may combine the Document with other documents released under this License, under the terms defined in section 4 above for modified versions, provided that you include in the combination all of the Invariant Sections of all of the original documents, unmodified, and list them all as Invariant Sections of your combined work in its license notice, and that you preserve all their Warranty Disclaimers. The combined work need only contain one copy of this License, and multiple identical Invariant Sections may be replaced with a single copy. If there are multiple Invariant Sections with the same name but different contents, make the title of each such section unique by adding at the end of it, in parentheses, the name of the original author or publisher of that section if known, or else a unique number. Make the same adjustment to the section titles in the list of Invariant Sections in the license notice of the combined work. In the combination, you must combine any sections Entitled \"History\" in the various original documents, forming one section Entitled \"History\"; likewise combine any sections Entitled \"Acknowledgements\", and any sections Entitled \"Dedications\". You must delete all sections Entitled \"Endorsements\". 6. COLLECTIONS OF DOCUMENTS You may make a collection consisting of the Document and other documents released under this License, and replace the individual copies of this License in the various documents with a single copy that is included in the collection, provided that you follow the rules of this License for verbatim copying of each of the documents in all other respects. You may extract a single document from such a collection, and distribute it individually under this License, provided you insert a copy of this License into the extracted document, and follow this License in all other respects regarding verbatim copying of that document. 7. AGGREGATION WITH INDEPENDENT WORKS A compilation of the Document or its derivatives with other separate and independent documents or works, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the copyright resulting from the compilation is not used to limit the legal rights of the compilation's users beyond what the individual works permit. When the Document is included in an aggregate, this License does not apply to the other works in the aggregate which are not themselves derivative works of the Document. If the Cover Text requirement of section 3 is applicable to these copies of the Document, then if the Document is less than one half of the entire aggregate, the Document's Cover Texts may be placed on covers that bracket the Document within the aggregate, or the electronic equivalent of covers if the Document is in electronic form. Otherwise they must appear on printed covers that bracket the whole aggregate. 8. TRANSLATION Translation is considered a kind of modification, so you may distribute translations of the Document under the terms of section 4. Replacing Invariant Sections with translations requires special permission from their copyright holders, but you may include translations of some or all Invariant Sections in addition to the original versions of these Invariant Sections. You may include a translation of this License, and all the license notices in the Document, and any Warranty Disclaimers, provided that you also include the original English version of this License and the original versions of those notices and disclaimers. In case of a disagreement between the translation and the original version of this License or a notice or disclaimer, the original version will prevail. If a section in the Document is Entitled \"Acknowledgements\", \"Dedications\", or \"History\", the requirement (section 4) to Preserve its Title (section 1) will typically require changing the actual title. 9. TERMINATION You may not copy, modify, sublicense, or distribute the Document except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, or distribute it is void, and will automatically terminate your rights under this License. However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, receipt of a copy of some or all of the same material does not give you any rights to use it. 10. FUTURE REVISIONS OF THIS LICENSE The Free Software Foundation may publish new, revised versions of the GNU Free Documentation License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. See https://www.gnu.org/licenses/. Each version of the License is given a distinguishing version number. If the Document specifies that a particular numbered version of this License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that specified version or of any later version that has been published (not as a draft) by the Free Software Foundation. If the Document does not specify a version number of this License, you may choose any version ever published (not as a draft) by the Free Software Foundation. If the Document specifies that a proxy can decide which future versions of this License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Document. 11. RELICENSING \"Massive Multiauthor Collaboration Site\" (or \"MMC Site\") means any World Wide Web server that publishes copyrightable works and also provides prominent facilities for anybody to edit those works. A public wiki that anybody can edit is an example of such a server. A \"Massive Multiauthor Collaboration\" (or \"MMC\") contained in the site means any set of copyrightable works thus published on the MMC site. \"CC-BY-SA\" means the Creative Commons Attribution-Share Alike 3.0 license published by Creative Commons Corporation, a not-for-profit corporation with a principal place of business in San Francisco, California, as well as future copyleft versions of that license published by that same organization. \"Incorporate\" means to publish or republish a Document, in whole or in part, as part of another Document. An MMC is \"eligible for relicensing\" if it is licensed under this License, and if all works that were first published under this License somewhere other than this MMC, and subsequently incorporated in whole or in part into the MMC, (1) had no cover texts or invariant sections, and (2) were thus incorporated prior to November 1, 2008. The operator of an MMC Site may republish an MMC contained in the site under CC-BY-SA on the same site at any time before August 1, 2009, provided the MMC is eligible for relicensing. ADDENDUM: How to use this License for your documents To use this License in a document you have written, include a copy of the License in the document and put the following copyright and license notices just after the title page: Copyright (c) YEAR YOUR NAME. Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled \"GNU Free Documentation License\". If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts, replace the \"with...Texts.\" line with this: with the Invariant Sections being LIST THEIR TITLES, with the Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST. If you have Invariant Sections without Cover Texts, or some other combination of the three, merge those two alternatives to suit the situation. If your document contains nontrivial examples of program code, we recommend releasing these examples in parallel under your choice of free software license, such as the GNU General Public License, to permit their use in free software.","title":"GNU Free Documentation Licence"},{"location":"0.22/","text":"Nougaro 0.22.0-beta documentation This is the official documentation for Nougaro version 0.22.0-beta. Hello, world! Language reference: syntax, statements, \u2026 Basic syntax Number literals String literals Identifiers and keywords Operators Values Variables Tests ( if statement, assert ) Loops Functions Attributes Classes Read and write in files Import and export Metas Dollar-print Standard library reference: builtins, modules, \u2026 Built-in variables Built-in functions Modules Expanding Nougaro (for Python developers) Write libraries for Nougaro Internals","title":"Nougaro 0.22.0-beta documentation"},{"location":"0.22/#nougaro-0220-beta-documentation","text":"This is the official documentation for Nougaro version 0.22.0-beta. Hello, world! Language reference: syntax, statements, \u2026 Basic syntax Number literals String literals Identifiers and keywords Operators Values Variables Tests ( if statement, assert ) Loops Functions Attributes Classes Read and write in files Import and export Metas Dollar-print Standard library reference: builtins, modules, \u2026 Built-in variables Built-in functions Modules Expanding Nougaro (for Python developers) Write libraries for Nougaro Internals","title":"Nougaro 0.22.0-beta documentation"},{"location":"0.22/hello_world/","text":"Hello, world! This is the \u201cHello, world!\u201d program in Nougaro. print(\"Hello, world!\") Alternatively: import hello If you want to use functionnal programming: def main() print(\"Hello, world!\") end main() If you want to use object-oriented programming: class Main def print_hello_world() print(\"Hello, world!\") end end Main().print_hello_world()","title":"Hello, world!"},{"location":"0.22/hello_world/#hello-world","text":"This is the \u201cHello, world!\u201d program in Nougaro. print(\"Hello, world!\") Alternatively: import hello If you want to use functionnal programming: def main() print(\"Hello, world!\") end main() If you want to use object-oriented programming: class Main def print_hello_world() print(\"Hello, world!\") end end Main().print_hello_world()","title":"Hello, world!"},{"location":"0.22/internals/","text":"Internals Features that had to be documented but that are mainly used for debugging purposes. Context variables __actual_context__ is the name of the function where the code is executed. May be <program> . __exec_from__ is the name of the parent of the function where the code is executed. If __actual_context__ is <program> , __exec_from__ is (shell) . If the code is inside a function foo that is directly in <program> , __exec_from__ is foo from <program> . If the code is inside a function bar executed from our foo (that is in <program> ), __exec_from__ is bar from foo . Base value __base_value__ is the base value (python class Value ). It is the parent class of all the other values. It is the only value to crash on == and != operators . Nougaro informations Note This section is duplicated in this file __noug_version__ : string of the Nougaro version (e.g. \"0.15.0-beta\".) You can use the noug_version lib to have better informations. __data_version__ : the Nougaro data version, an internal version keeping track of changes in the config file directory structure __version_id__ : an ID increased at least once per version __python_version__ : string of the Python version (e.g. \"3.10.5\") __noug_dir__ : string of the absolute path of the directory where shell.(py/exe/bin) is located. May be used with file I/O read and write statements. Symbol table __symbol_table__ : string of the internal \u201cp-formated\u201d symbols dictionnary.","title":"Internals"},{"location":"0.22/internals/#internals","text":"Features that had to be documented but that are mainly used for debugging purposes.","title":"Internals"},{"location":"0.22/internals/#context-variables","text":"__actual_context__ is the name of the function where the code is executed. May be <program> . __exec_from__ is the name of the parent of the function where the code is executed. If __actual_context__ is <program> , __exec_from__ is (shell) . If the code is inside a function foo that is directly in <program> , __exec_from__ is foo from <program> . If the code is inside a function bar executed from our foo (that is in <program> ), __exec_from__ is bar from foo .","title":"Context variables"},{"location":"0.22/internals/#base-value","text":"__base_value__ is the base value (python class Value ). It is the parent class of all the other values. It is the only value to crash on == and != operators .","title":"Base value"},{"location":"0.22/internals/#nougaro-informations","text":"Note This section is duplicated in this file __noug_version__ : string of the Nougaro version (e.g. \"0.15.0-beta\".) You can use the noug_version lib to have better informations. __data_version__ : the Nougaro data version, an internal version keeping track of changes in the config file directory structure __version_id__ : an ID increased at least once per version __python_version__ : string of the Python version (e.g. \"3.10.5\") __noug_dir__ : string of the absolute path of the directory where shell.(py/exe/bin) is located. May be used with file I/O read and write statements.","title":"Nougaro informations"},{"location":"0.22/internals/#symbol-table","text":"__symbol_table__ : string of the internal \u201cp-formated\u201d symbols dictionnary.","title":"Symbol table"},{"location":"0.22/Expanding/Write-libs/","text":"You are a Nougaro developer, and you want to write an amazing library to implement python amazing things in Nougaro? You're at the right place!! You have to options: either writting it in Nougaro (with limited resources), either writting it in Python (with unlimited resources). Write libs in Nougaro Requirements You need to know how to code in Nougaro. Start coding The file should be named nameofthelib.noug and be located in the lib_ folder in the Nougaro repository. Simply write all your code. If you want something to be accessible when imported, use one of those syntaxes : export identifier (as identifier) export (any expression) as identifier You can find examples of built-in modules written in Nougaro in the lib_ folder. Write libs in Python Warning Everything changed in 0.16.0-beta and in 0.19.0-beta Requirements You need to know how to code in Python. Don't worry, that's easy ;) Start coding The file should be named nameofthelib_.py (the \u201c_\u201d is VERY important!!) The file will be placed in the lib_ folder in the Nougaro repository. Paste this generic code in your file: # -*- coding:utf-8 -*- \"\"\" YourModuleName module YourModuleName is a module that do [...] and [...] and also [...]. \"\"\" # IMPORTS # nougaro modules imports from lib_.lib_to_make_libs import * # useful stuff to make libs. # built-in python imports # here put the useful python imports your module will need ;) __LIB_VERSION__ = 4 Note Lib versions depending on Nougaro versions: prior to 0.20.0: 1 0.20.0: 2 0.21.0: 3 0.22.0: 4 Lib with constants If your lib contains constants, you can add them to the code, outside any class. Use py2noug function imported from lib_to_make_libs to convert Python values to Nougaro values. Python types that can be converted into Nougaro values are: str , int , float , bool (which is converted to 0 or 1), list , tuple (converted into list), dict (converted into a list of lists, each sub-list is [key, value] ), None . Other types will return generic value Value , which you can't make anything with... Example: AMAZING_CONSTANT = py2noug(3, *default_pos()) # will be Number(3), type 'int' ANOTHER_AMAZING_CONSTANT = py2noug(\"Hello world :)\", *default_pos()) # will be String(\"Hello world :)\"), type 'str' ( py2noug and default_pos are imported from lib_to_make_libs ) Lib with functions If you want functions in your lib, paste this code in your file (replace the generic names/texts with appropriate things): class YourModuleName(ModuleFunction): \"\"\" YourModuleName Module \"\"\" functions: dict[str, builtin_function_dict] = {} def __init__(self, function_name: str): super().__init__(\"your_module_name\", function_name, \"https://link_to_report_bugs.com (not required)\", functions=self.functions) def copy(self): \"\"\"Return a copy of self\"\"\" copy = YourModuleName(self.name) return self.set_context_and_pos_to_a_copy(copy) def is_eq(self, other: Value): return isinstance(other, YourModuleName) and self.name == other.name Changed in 0.20.0-beta Prior to 0.20.0, the method is_eq was named get_comparison_eq and had this syntax: def get_comparison_eq(self, other: Value): if isinstance(other, YourModuleName): return Number(self.name == other.name, self.pos_start, other.pos_end).set_context(self.context), None return Number(False, self.pos_start, other.pos_end).set_context(self.context), None Then, to add a function, add a method in this class following this syntax: def execute_function_name(self, context: Context): \"\"\" Docstring (optional) \"\"\" assert context.symbol_table is not None ... functions[\"function_name\"] = { \"function\": execute_function_name, \"param_names\": [\"parameter_1\", \"parameter_2\"], \"optional_params\": [\"optional_parameter_1\"], \"should_respect_args_number\": True, # The two following values are used internally. # They are not documented, don\u2019t set them to True except if you know what you\u2019re doing. \"run_noug_dir\": False, \"noug_dir\": False } Changed in 0.22.0-beta Prior to 0.22.0-beta, the key \"run_noug_dir\" was called \"run_noug_dir_work_dir\" . keys param_names and optional_params should be of type list[str] . should_respect_args_number is a bool. It is True when the number of given arguments should match with the number of parameters, and False if not. You can then add code in your function. Get arguments To get the arguments given by the user in your functions, use context.symbol_table.getf(\"identifier\") Replace the identifier by the one you given to the parameter. If your parameter is optional and that the user didn\u2019t specified it, the default value is a Python None (not a Nougaro NoneValue ). Danger Please don\u2019t use .get symbol table method, it does NOT work in modules (even if it looks like) and should NOT be used. (The short explanation why is that this method looks for the name also in parent symbol table, so if an optional param is not given but the user defined a variable with that name, it will be taken as the value for that param, which is not what we want. We don\u2019t care about parent symbol table, so we just look in the current symbol table which only contains the parameters. The corresponding issue is #10 .) Values Important You often have to switch between Nougaro and Python values! To convert python to Nougaro values, use py2noug function. To convert Nougaro to python values, use noug2py . Both functions are imported from lib_to_make_libs . You reed a position with py2noug : you can simply put self.pos_start and self.pos_end or the position of any value you want. What to return? Values and errors. If you don't need to return anything, simply use return RTResult().success(NoneValue(*default_pos(), False)) . Return errors Oops! It crashed! How to say it to the user under a good shape? Simply use this syntax: return RTResult().failure(NameOfTheError( self.pos_start, self.pos_end, \"error message.\", context )) If the user gave you a value with an incorrect type, use: return RTResult().failure(RTTypeErrorF( bad_argument.pos_start, bad_argument.pos_end, \"first/second/third\u2026\", \"name of the module.name of the function\", \"type that should be found\", bad_argument, context )) Replace \"first/second/third\u2026\" by the actual index of the argument. If it is the first argument, put \"first\" , et c\u00e6tera. The error will print, for instance, second argument of builtin function 'name of the function' should be 'type that should be found', not 'type of (bad_argument)'. You can replace self by any Nougaro value, such as your arguments. For example, in the lib math : if value.value < 0: # we check if the value is greater than (or equal to) 0 return RTResult().failure(RTArithmeticError( value.pos_start, value.pos_end, \"first argument of the built-in function 'math.sqrt' must be greater than (or equal to) 0.\", exec_context, \"lib_.math_.Math.execute_math_sqrt\" )) All the errors available in a Module: RunTimeError : basic run-time error RTIndexError : IndexError RTArithmeticError : ArithmeticError RTNotDefinedError : NotDefinedError RTTypeErrorF : TypeError (you give a Number but you need a String) RTFileNotFoundError : FileNotFoundError RTAssertionError : AssertionError (not useful in libs...) RTAttributeError : AttributeError RTOverflowError : OverflowError RTRecursionError : RecursionError (new in 0.20.0) PythonError : PythonError: an error due to Python. Don\u2019t put a str error message: pass directly the Python Exception. Return values To return a Nougaro value, use return RTResult().success(value) To return a Python value, use return RTResult().success(py2noug(value, self.pos_start, self.pos_end)) WHAT_TO_IMPORT : DO NOT forget that one!! When you have finished coding your amazing lib, create the WHAT_TO_IMPORT dict. It tells to the Nougaro Interpreter what should be imported and with which name. Follow this syntax: WHAT_TO_IMPORT = { \"name_of_a_constant\": IDENTIFIER, \"name_of_a_function\": YourModuleName('function_name'), } The function name is what you specified as the key of the functions dictionary. Custom errors To use a custom error in your code, simply copy-paste this code: class YourErrorName(RunTimeError): \"\"\"YourErrorName is an error that can be triggered ONLY via functions in this module.\"\"\" def __init__(self, pos_start: Position, pos_end: Position, details: str, context: Context, origin_file: str = \"lib_.(nameofthelib)_\"): super().__init__(pos_start, pos_end, details, context, rt_error=False, error_name=\"YourErrorName\", origin_file=origin_file) Then, call it like any other errors (like this ) Note: origin_file is used for debugging. To trigger it, you can run: nougaro> import debug;debug.enable() DEBUG mode is now ENABLED. [<module debug>, None] nougaro> (anything that throws an error) Example: nougaro> import debug;debug.enable() DEBUG mode is now ENABLED. [<module debug>, None] nougaro> thisisnotdefined [identifier:\"thisisnotdefined\", end of file] list:[(var_access:[identifier:\"thisisnotdefined\"], False)] (from src.runtime.interpreter.Interpreter.visit_VarAccessNode (is NOT lib and close match in symbol table)) Traceback (most recent call last): In file <stdin>, line 1, in <program>: thisisnotdefined ^^^^^^^^^^^^^^^^ NotDefinedError: name 'thisisnotdefined' is not defined. Did you mean 'is_none'? nougaro> this is a syntax error [identifier:\"this\", identifier:\"is\", identifier:\"a\", identifier:\"syntax\", identifier:\"error\", end of file] (from src.parser.parser.Parser.statements) In file <stdin>, line 1: this is a syntax error ^^ InvalidSyntaxError: unexpected token: identifier:\"is\". nougaro> Here, origin_file is src.runtime.interpreter.Interpreter.visit_VarAccessNode and src.parser.parser.Parser.parse . Example: RTStatisticsError in built-in lib statistics class RTStatisticsError(RunTimeError): \"\"\"StatisticsError is an error that can be triggered ONLY via functions in this module.\"\"\" def __init__(self, pos_start: Position, pos_end: Position, details: str, context: Context, origin_file: str = \"lib_.statistics_\"): super().__init__(pos_start, pos_end, details, context, rt_error=False, error_name=\"StatisticsError\", origin_file=origin_file) Examples You can read builtin files stored in lib_ folder to make you a good idea of what a nice-coded lib is ;) Here you go! If you think that your lib is absolutely awesome, you can open a PR to submit your idea. The best ideas will be implemented into vanilla Nougaro! If you think that this document is incomplete, that it didn\u2019t help you, or just to find some help, open an issue .","title":"Write libs"},{"location":"0.22/Expanding/Write-libs/#write-libs-in-nougaro","text":"","title":"Write libs in Nougaro"},{"location":"0.22/Expanding/Write-libs/#requirements","text":"You need to know how to code in Nougaro.","title":"Requirements"},{"location":"0.22/Expanding/Write-libs/#start-coding","text":"The file should be named nameofthelib.noug and be located in the lib_ folder in the Nougaro repository. Simply write all your code. If you want something to be accessible when imported, use one of those syntaxes : export identifier (as identifier) export (any expression) as identifier You can find examples of built-in modules written in Nougaro in the lib_ folder.","title":"Start coding"},{"location":"0.22/Expanding/Write-libs/#write-libs-in-python","text":"Warning Everything changed in 0.16.0-beta and in 0.19.0-beta","title":"Write libs in Python"},{"location":"0.22/Expanding/Write-libs/#requirements_1","text":"You need to know how to code in Python. Don't worry, that's easy ;)","title":"Requirements"},{"location":"0.22/Expanding/Write-libs/#start-coding_1","text":"The file should be named nameofthelib_.py (the \u201c_\u201d is VERY important!!) The file will be placed in the lib_ folder in the Nougaro repository. Paste this generic code in your file: # -*- coding:utf-8 -*- \"\"\" YourModuleName module YourModuleName is a module that do [...] and [...] and also [...]. \"\"\" # IMPORTS # nougaro modules imports from lib_.lib_to_make_libs import * # useful stuff to make libs. # built-in python imports # here put the useful python imports your module will need ;) __LIB_VERSION__ = 4 Note Lib versions depending on Nougaro versions: prior to 0.20.0: 1 0.20.0: 2 0.21.0: 3 0.22.0: 4","title":"Start coding"},{"location":"0.22/Expanding/Write-libs/#lib-with-constants","text":"If your lib contains constants, you can add them to the code, outside any class. Use py2noug function imported from lib_to_make_libs to convert Python values to Nougaro values. Python types that can be converted into Nougaro values are: str , int , float , bool (which is converted to 0 or 1), list , tuple (converted into list), dict (converted into a list of lists, each sub-list is [key, value] ), None . Other types will return generic value Value , which you can't make anything with... Example: AMAZING_CONSTANT = py2noug(3, *default_pos()) # will be Number(3), type 'int' ANOTHER_AMAZING_CONSTANT = py2noug(\"Hello world :)\", *default_pos()) # will be String(\"Hello world :)\"), type 'str' ( py2noug and default_pos are imported from lib_to_make_libs )","title":"Lib with constants"},{"location":"0.22/Expanding/Write-libs/#lib-with-functions","text":"If you want functions in your lib, paste this code in your file (replace the generic names/texts with appropriate things): class YourModuleName(ModuleFunction): \"\"\" YourModuleName Module \"\"\" functions: dict[str, builtin_function_dict] = {} def __init__(self, function_name: str): super().__init__(\"your_module_name\", function_name, \"https://link_to_report_bugs.com (not required)\", functions=self.functions) def copy(self): \"\"\"Return a copy of self\"\"\" copy = YourModuleName(self.name) return self.set_context_and_pos_to_a_copy(copy) def is_eq(self, other: Value): return isinstance(other, YourModuleName) and self.name == other.name Changed in 0.20.0-beta Prior to 0.20.0, the method is_eq was named get_comparison_eq and had this syntax: def get_comparison_eq(self, other: Value): if isinstance(other, YourModuleName): return Number(self.name == other.name, self.pos_start, other.pos_end).set_context(self.context), None return Number(False, self.pos_start, other.pos_end).set_context(self.context), None Then, to add a function, add a method in this class following this syntax: def execute_function_name(self, context: Context): \"\"\" Docstring (optional) \"\"\" assert context.symbol_table is not None ... functions[\"function_name\"] = { \"function\": execute_function_name, \"param_names\": [\"parameter_1\", \"parameter_2\"], \"optional_params\": [\"optional_parameter_1\"], \"should_respect_args_number\": True, # The two following values are used internally. # They are not documented, don\u2019t set them to True except if you know what you\u2019re doing. \"run_noug_dir\": False, \"noug_dir\": False } Changed in 0.22.0-beta Prior to 0.22.0-beta, the key \"run_noug_dir\" was called \"run_noug_dir_work_dir\" . keys param_names and optional_params should be of type list[str] . should_respect_args_number is a bool. It is True when the number of given arguments should match with the number of parameters, and False if not. You can then add code in your function.","title":"Lib with functions"},{"location":"0.22/Expanding/Write-libs/#get-arguments","text":"To get the arguments given by the user in your functions, use context.symbol_table.getf(\"identifier\") Replace the identifier by the one you given to the parameter. If your parameter is optional and that the user didn\u2019t specified it, the default value is a Python None (not a Nougaro NoneValue ). Danger Please don\u2019t use .get symbol table method, it does NOT work in modules (even if it looks like) and should NOT be used. (The short explanation why is that this method looks for the name also in parent symbol table, so if an optional param is not given but the user defined a variable with that name, it will be taken as the value for that param, which is not what we want. We don\u2019t care about parent symbol table, so we just look in the current symbol table which only contains the parameters. The corresponding issue is #10 .)","title":"Get arguments"},{"location":"0.22/Expanding/Write-libs/#values","text":"Important You often have to switch between Nougaro and Python values! To convert python to Nougaro values, use py2noug function. To convert Nougaro to python values, use noug2py . Both functions are imported from lib_to_make_libs . You reed a position with py2noug : you can simply put self.pos_start and self.pos_end or the position of any value you want.","title":"Values"},{"location":"0.22/Expanding/Write-libs/#what-to-return-values-and-errors","text":"If you don't need to return anything, simply use return RTResult().success(NoneValue(*default_pos(), False)) .","title":"What to return? Values and errors."},{"location":"0.22/Expanding/Write-libs/#return-errors","text":"Oops! It crashed! How to say it to the user under a good shape? Simply use this syntax: return RTResult().failure(NameOfTheError( self.pos_start, self.pos_end, \"error message.\", context )) If the user gave you a value with an incorrect type, use: return RTResult().failure(RTTypeErrorF( bad_argument.pos_start, bad_argument.pos_end, \"first/second/third\u2026\", \"name of the module.name of the function\", \"type that should be found\", bad_argument, context )) Replace \"first/second/third\u2026\" by the actual index of the argument. If it is the first argument, put \"first\" , et c\u00e6tera. The error will print, for instance, second argument of builtin function 'name of the function' should be 'type that should be found', not 'type of (bad_argument)'. You can replace self by any Nougaro value, such as your arguments. For example, in the lib math : if value.value < 0: # we check if the value is greater than (or equal to) 0 return RTResult().failure(RTArithmeticError( value.pos_start, value.pos_end, \"first argument of the built-in function 'math.sqrt' must be greater than (or equal to) 0.\", exec_context, \"lib_.math_.Math.execute_math_sqrt\" )) All the errors available in a Module: RunTimeError : basic run-time error RTIndexError : IndexError RTArithmeticError : ArithmeticError RTNotDefinedError : NotDefinedError RTTypeErrorF : TypeError (you give a Number but you need a String) RTFileNotFoundError : FileNotFoundError RTAssertionError : AssertionError (not useful in libs...) RTAttributeError : AttributeError RTOverflowError : OverflowError RTRecursionError : RecursionError (new in 0.20.0) PythonError : PythonError: an error due to Python. Don\u2019t put a str error message: pass directly the Python Exception.","title":"Return errors"},{"location":"0.22/Expanding/Write-libs/#return-values","text":"To return a Nougaro value, use return RTResult().success(value) To return a Python value, use return RTResult().success(py2noug(value, self.pos_start, self.pos_end))","title":"Return values"},{"location":"0.22/Expanding/Write-libs/#what_to_import-do-not-forget-that-one","text":"When you have finished coding your amazing lib, create the WHAT_TO_IMPORT dict. It tells to the Nougaro Interpreter what should be imported and with which name. Follow this syntax: WHAT_TO_IMPORT = { \"name_of_a_constant\": IDENTIFIER, \"name_of_a_function\": YourModuleName('function_name'), } The function name is what you specified as the key of the functions dictionary.","title":"WHAT_TO_IMPORT : DO NOT forget that one!!"},{"location":"0.22/Expanding/Write-libs/#custom-errors","text":"To use a custom error in your code, simply copy-paste this code: class YourErrorName(RunTimeError): \"\"\"YourErrorName is an error that can be triggered ONLY via functions in this module.\"\"\" def __init__(self, pos_start: Position, pos_end: Position, details: str, context: Context, origin_file: str = \"lib_.(nameofthelib)_\"): super().__init__(pos_start, pos_end, details, context, rt_error=False, error_name=\"YourErrorName\", origin_file=origin_file) Then, call it like any other errors (like this ) Note: origin_file is used for debugging. To trigger it, you can run: nougaro> import debug;debug.enable() DEBUG mode is now ENABLED. [<module debug>, None] nougaro> (anything that throws an error) Example: nougaro> import debug;debug.enable() DEBUG mode is now ENABLED. [<module debug>, None] nougaro> thisisnotdefined [identifier:\"thisisnotdefined\", end of file] list:[(var_access:[identifier:\"thisisnotdefined\"], False)] (from src.runtime.interpreter.Interpreter.visit_VarAccessNode (is NOT lib and close match in symbol table)) Traceback (most recent call last): In file <stdin>, line 1, in <program>: thisisnotdefined ^^^^^^^^^^^^^^^^ NotDefinedError: name 'thisisnotdefined' is not defined. Did you mean 'is_none'? nougaro> this is a syntax error [identifier:\"this\", identifier:\"is\", identifier:\"a\", identifier:\"syntax\", identifier:\"error\", end of file] (from src.parser.parser.Parser.statements) In file <stdin>, line 1: this is a syntax error ^^ InvalidSyntaxError: unexpected token: identifier:\"is\". nougaro> Here, origin_file is src.runtime.interpreter.Interpreter.visit_VarAccessNode and src.parser.parser.Parser.parse .","title":"Custom errors"},{"location":"0.22/Expanding/Write-libs/#example-rtstatisticserror-in-built-in-lib-statistics","text":"class RTStatisticsError(RunTimeError): \"\"\"StatisticsError is an error that can be triggered ONLY via functions in this module.\"\"\" def __init__(self, pos_start: Position, pos_end: Position, details: str, context: Context, origin_file: str = \"lib_.statistics_\"): super().__init__(pos_start, pos_end, details, context, rt_error=False, error_name=\"StatisticsError\", origin_file=origin_file)","title":"Example: RTStatisticsError in built-in lib statistics"},{"location":"0.22/Expanding/Write-libs/#examples","text":"You can read builtin files stored in lib_ folder to make you a good idea of what a nice-coded lib is ;)","title":"Examples"},{"location":"0.22/Expanding/Write-libs/#here-you-go","text":"If you think that your lib is absolutely awesome, you can open a PR to submit your idea. The best ideas will be implemented into vanilla Nougaro! If you think that this document is incomplete, that it didn\u2019t help you, or just to find some help, open an issue .","title":"Here you go!"},{"location":"0.22/Language/01syntax/","text":"Very basic syntax This document covers the basic syntax of Nougaro. Comments There are two types of comments in Nougaro: single-line comments and multi-line comments. Single-line comments Single-line comments start with # and end with a new line. They can start at the beginning of a line or after some code. Example: # this is a single-line comment foo(bar) # this calls the function foo with the argument bar Multi-line comments Multi-line comments start with /* and end with */ . They can start and stop at any point in the code. Example: /* this is a multi line comment */ print(\"hello\") /* this is also a multi line comment*/ Multi-line comments can also be only on one line: print(\"hello\") /* this is a multi-line comment that is only on one line */ Multi-line comments are simply ignored, which mean you can do things such as: print( /* this is a comment */ \"hello\" /* this is another comment */) print(/* this is actually a comment*/ \"hello\") Multi-line comments can be nested: /* comment /* comment-inside comment*/ /* /* comment-ception */ */ comment */ NOUGAROIGNORE comments Added in 0.22.0-beta These comments start and end with ..NOUGAROIGNORE or .. NOUGAROIGNORE , where . is any character among #@/%!$; . There should be nothing else on the NOUGAROIGNORE line. Example: file examples/fizzbuzz.cpp.c.py.noug (polyglott file using C/C++ comments, Python docstrings and Nougaro NOUGAROIGNORE comments). Lines Line are separated by a newline or a semicolon ( ; ). a b is equivalent to a ; b . Line joining If you don\u2019t have enough space on your line, you can join two \u201creal lines\u201d to form a Nougaro line, using a backspace. Example: var fruits = [\\ \"banana\", \\ \"apple\", \\ \"raspberry\", \\ \"pineapple\" \\ ] Blank lines Blank lines are ignored. Indentation Indentation is optional, as (mostly) every statement ends with end . Whitespaces Whitespaces are ignored everywhere (except in string literals and to differentiate things such as foobar and foo bar , or += and + = ).","title":"Very basic syntax"},{"location":"0.22/Language/01syntax/#very-basic-syntax","text":"This document covers the basic syntax of Nougaro.","title":"Very basic syntax"},{"location":"0.22/Language/01syntax/#comments","text":"There are two types of comments in Nougaro: single-line comments and multi-line comments.","title":"Comments"},{"location":"0.22/Language/01syntax/#single-line-comments","text":"Single-line comments start with # and end with a new line. They can start at the beginning of a line or after some code. Example: # this is a single-line comment foo(bar) # this calls the function foo with the argument bar","title":"Single-line comments"},{"location":"0.22/Language/01syntax/#multi-line-comments","text":"Multi-line comments start with /* and end with */ . They can start and stop at any point in the code. Example: /* this is a multi line comment */ print(\"hello\") /* this is also a multi line comment*/ Multi-line comments can also be only on one line: print(\"hello\") /* this is a multi-line comment that is only on one line */ Multi-line comments are simply ignored, which mean you can do things such as: print( /* this is a comment */ \"hello\" /* this is another comment */) print(/* this is actually a comment*/ \"hello\") Multi-line comments can be nested: /* comment /* comment-inside comment*/ /* /* comment-ception */ */ comment */","title":"Multi-line comments"},{"location":"0.22/Language/01syntax/#nougaroignore-comments","text":"Added in 0.22.0-beta These comments start and end with ..NOUGAROIGNORE or .. NOUGAROIGNORE , where . is any character among #@/%!$; . There should be nothing else on the NOUGAROIGNORE line. Example: file examples/fizzbuzz.cpp.c.py.noug (polyglott file using C/C++ comments, Python docstrings and Nougaro NOUGAROIGNORE comments).","title":"NOUGAROIGNORE comments"},{"location":"0.22/Language/01syntax/#lines","text":"Line are separated by a newline or a semicolon ( ; ). a b is equivalent to a ; b .","title":"Lines"},{"location":"0.22/Language/01syntax/#line-joining","text":"If you don\u2019t have enough space on your line, you can join two \u201creal lines\u201d to form a Nougaro line, using a backspace. Example: var fruits = [\\ \"banana\", \\ \"apple\", \\ \"raspberry\", \\ \"pineapple\" \\ ]","title":"Line joining"},{"location":"0.22/Language/01syntax/#blank-lines","text":"Blank lines are ignored.","title":"Blank lines"},{"location":"0.22/Language/01syntax/#indentation","text":"Indentation is optional, as (mostly) every statement ends with end .","title":"Indentation"},{"location":"0.22/Language/01syntax/#whitespaces","text":"Whitespaces are ignored everywhere (except in string literals and to differentiate things such as foobar and foo bar , or += and + = ).","title":"Whitespaces"},{"location":"0.22/Language/02number_literals/","text":"Number literals Here\u2019s all the different ways to write a number in Nougaro: 123 12.3 123e2 12.3e2 123e-2 123e+2 12.3e-2 12.3e+2 Note You can put + or - in front of the number to specify its sign. Example: -123 . Other bases: 0b01110 (base 2, binary) 0o17403 (base 8, octal) 0x4EF1A (base 16, hexadecimal) 0b10e30 0o70e30 Note 0xA0e30 will be interpreted as the hexadecimal number A0E30 ( 3*16^1 + 15*16^2 + 10*16^4 ) and not as 0xA0 * 10^30 _ in numbers Note You can put as much underscores ( _ ) as you want in a number literal, as long as the underscore are not at the beginning or at the end of the literal, or around the dot in floating-point numbers (ex: 10_694_254 is the same as 10694254 , 10_ is not valid, 12._3 is not valid and 12_._3 isn\u2019t either.)","title":"Number literals"},{"location":"0.22/Language/02number_literals/#number-literals","text":"Here\u2019s all the different ways to write a number in Nougaro: 123 12.3 123e2 12.3e2 123e-2 123e+2 12.3e-2 12.3e+2 Note You can put + or - in front of the number to specify its sign. Example: -123 . Other bases: 0b01110 (base 2, binary) 0o17403 (base 8, octal) 0x4EF1A (base 16, hexadecimal) 0b10e30 0o70e30 Note 0xA0e30 will be interpreted as the hexadecimal number A0E30 ( 3*16^1 + 15*16^2 + 10*16^4 ) and not as 0xA0 * 10^30","title":"Number literals"},{"location":"0.22/Language/02number_literals/#_-in-numbers","text":"Note You can put as much underscores ( _ ) as you want in a number literal, as long as the underscore are not at the beginning or at the end of the literal, or around the dot in floating-point numbers (ex: 10_694_254 is the same as 10694254 , 10_ is not valid, 12._3 is not valid and 12_._3 isn\u2019t either.)","title":"_ in numbers"},{"location":"0.22/Language/03string_literals/","text":"String literals String literals are delimited by \"\" , '' or \u00ab\u00bb . Examples: \"hello\" 'hello' \u00abhello\u00bb Escape characters: \\' : ' \\\" : \" \\\u00bb : \u00bb \\n : backline \\t : tab \\\\ : backslash \\xAA : unicode character number AA (hex) \\uAAAA : unicode character number AAAA (hex) \\UAAAAAAAA : unicode character number AAAAAAAA (hex) \\N{NAME} : unicode character with name NAME. Returns SyntaxError if it doesn\u2019t exist. Note The backslash isn\u2019t left if the next character is not recognised (example: \"\\/\" is the same as \"/\" , and not \"\\\\/\" ) Examples: 'I\\'m a string literal' \"He said: \\\"'I'm a string literal'\\\"\" \"\\\\ backslashes, \\t tabs and \\n backlines\" \u00abThis string has a \\N{NO BREAK SPACE}\u00bb \"\\N{Latin Small Letter C with Cedilla}: \\xe7\" \"\\N{Greek Small Letter Eta with Dasia and Oxia and Ypogegrammeni}: \\u1F95\" \"This is Person Shrugging (\ud83e\udd37): \\U0001f937\" Note You can use the meta nbspBetweenFrenchGuillemets to be forced to use a no-break-space or a narrow-no-break-space after \u00ab and before \u00bb . These NBSP are not counted in the string and this does not affect the other string delimiters.","title":"String literals"},{"location":"0.22/Language/03string_literals/#string-literals","text":"String literals are delimited by \"\" , '' or \u00ab\u00bb . Examples: \"hello\" 'hello' \u00abhello\u00bb Escape characters: \\' : ' \\\" : \" \\\u00bb : \u00bb \\n : backline \\t : tab \\\\ : backslash \\xAA : unicode character number AA (hex) \\uAAAA : unicode character number AAAA (hex) \\UAAAAAAAA : unicode character number AAAAAAAA (hex) \\N{NAME} : unicode character with name NAME. Returns SyntaxError if it doesn\u2019t exist. Note The backslash isn\u2019t left if the next character is not recognised (example: \"\\/\" is the same as \"/\" , and not \"\\\\/\" ) Examples: 'I\\'m a string literal' \"He said: \\\"'I'm a string literal'\\\"\" \"\\\\ backslashes, \\t tabs and \\n backlines\" \u00abThis string has a \\N{NO BREAK SPACE}\u00bb \"\\N{Latin Small Letter C with Cedilla}: \\xe7\" \"\\N{Greek Small Letter Eta with Dasia and Oxia and Ypogegrammeni}: \\u1F95\" \"This is Person Shrugging (\ud83e\udd37): \\U0001f937\" Note You can use the meta nbspBetweenFrenchGuillemets to be forced to use a no-break-space or a narrow-no-break-space after \u00ab and before \u00bb . These NBSP are not counted in the string and this does not affect the other string delimiters.","title":"String literals"},{"location":"0.22/Language/04identifiers_and_keywords/","text":"Identifiers and keywords Identifiers (variable names) can be composed of the 26 characters of the ASCII alphabet ( a to z \u202fthen A to Z ), in lower and upper case, the underscore _ and digits ( 0 to 9 ). Note An identifier can not start with a digit. Keywords The following identifiers are reserved and can not be used as variable names: and as assert break class continue def del do elif else end export for if import in loop not or read return step then to var while write xor","title":"Identifiers and keywords"},{"location":"0.22/Language/04identifiers_and_keywords/#identifiers-and-keywords","text":"Identifiers (variable names) can be composed of the 26 characters of the ASCII alphabet ( a to z \u202fthen A to Z ), in lower and upper case, the underscore _ and digits ( 0 to 9 ). Note An identifier can not start with a digit.","title":"Identifiers and keywords"},{"location":"0.22/Language/04identifiers_and_keywords/#keywords","text":"The following identifiers are reserved and can not be used as variable names: and as assert break class continue def del do elif else end export for if import in loop not or read return step then to var while write xor","title":"Keywords"},{"location":"0.22/Language/05operators/","text":"Operators Mathematical operators Here all the mathematical operators in Nougaro (ordered by priority): Nougaro Python Comments ^ ** power * * multiplication % % modulo / / division // // floor division + + addition - - substraction & & bitwise and | | bitwise or ^^ ^ bitwise xor ~ ~ bitwise not It respects operation priority and you can use parenthesis. Examples 3 * 4 returns 12 4 / 2 returns 2 1 + 1 returns 2 3 - 4 returns -1 10 % 7 returns 3 10 % 3 returns 1 10 // 7 returns 1 10 // 3 returns 3 5 ^ 2 returns 25 62 & 35 returns 34 ~1 returns -2 and ~-2 returns 1 5 + 5 * 3 + 2 returns 22 (5 + 5) * (3 + 2) returns 50 Test operators They are exactly same as Python ones: Nougaro Python Comments == == equals to != != different than < < less than <= <= less than or equals > > greater than >= >= greater than or equals in in check if a value is in another Note the in keyword can check if: int , float , str , list , DefaultValue or NoneValue is in a str any value is in a list Added in 0.22.0-beta DefaultValue is new in 0.22.0-beta. Logical operators There is one logical operator that isn't here in Python. There is a list: Nougaro Python Comments and and boolean 'and' (binary operator) or or boolean 'or' (binary operator) xor ^ boolean 'exclusive or' (binary operator) not not boolean 'not' (inverter) (unary operator)","title":"Operators"},{"location":"0.22/Language/05operators/#operators","text":"","title":"Operators"},{"location":"0.22/Language/05operators/#mathematical-operators","text":"Here all the mathematical operators in Nougaro (ordered by priority): Nougaro Python Comments ^ ** power * * multiplication % % modulo / / division // // floor division + + addition - - substraction & & bitwise and | | bitwise or ^^ ^ bitwise xor ~ ~ bitwise not It respects operation priority and you can use parenthesis.","title":"Mathematical operators"},{"location":"0.22/Language/05operators/#examples","text":"3 * 4 returns 12 4 / 2 returns 2 1 + 1 returns 2 3 - 4 returns -1 10 % 7 returns 3 10 % 3 returns 1 10 // 7 returns 1 10 // 3 returns 3 5 ^ 2 returns 25 62 & 35 returns 34 ~1 returns -2 and ~-2 returns 1 5 + 5 * 3 + 2 returns 22 (5 + 5) * (3 + 2) returns 50","title":"Examples"},{"location":"0.22/Language/05operators/#test-operators","text":"They are exactly same as Python ones: Nougaro Python Comments == == equals to != != different than < < less than <= <= less than or equals > > greater than >= >= greater than or equals in in check if a value is in another Note the in keyword can check if: int , float , str , list , DefaultValue or NoneValue is in a str any value is in a list Added in 0.22.0-beta DefaultValue is new in 0.22.0-beta.","title":"Test operators"},{"location":"0.22/Language/05operators/#logical-operators","text":"There is one logical operator that isn't here in Python. There is a list: Nougaro Python Comments and and boolean 'and' (binary operator) or or boolean 'or' (binary operator) xor ^ boolean 'exclusive or' (binary operator) not not boolean 'not' (inverter) (unary operator)","title":"Logical operators"},{"location":"0.22/Language/06values/","text":"Values Here is the list of the value types in Nougaro: int ( integers ). Internal type: int float ( floats ). Internal type: float str ( strings ). Internal type: str list ( lists ). Internal type: list NoneType ( None ). Internal type: NoneValue function . Internal type: func or method . module . Internal type: module constructor . Internal type: constructor object . Internal type: depends on the class\u2019 name, and it is <class> if the class has no name. Note Internal value types are base value (type: BaseValue ) and default value (type: DefaultValue ) Added in 0.22.0-beta DefaultValue is new in 0.22.0-beta. Changed in 0.22.0-beta Before 0.22.0-beta, a distinction was made between func (user-defined function or function in a module written in Nougaro) and built-in func (built-in function or function in a module written in Python). Numbers Numbers represents real-life numbers. The two types of numbers are int and float . To declare a number, you can use a number literal . Operations that can be used between two numbers are: addition, substraction, multiplication, power. If the second number is non-zero, division, modulo and floor division can be used. All these operations follow the mathematical logic (except for 0^0, that returns 1). Multiplication can be used between a integer (type int ) and a string or a list . For example, 3*\"str\" returns \"strstrstr\" , and 2*[1, 2] returns [1, 2, 1, 2] . In boolean context, a number is true if it is non-zero. Strings The type of a string is str . To declare a string, you can use a string literal The only operation that can be used between strings is addition, which concatenates the string with the other. For example, \"hello, \" + \"world!\" returns \"hello, world!\" . Multiplication can be used between a string and an integer (type int ). For example, \"str\"*3 returns \"strstrstr\" . In boolean context, a string is true if it contains at least one character. Lists Lists are a succession of values. To declare a list, you can use brackets ( [] ), and put every value separated by a comma ( , ) inside. They may be 0 values. To create a list with elements from another list (and other elements), you can use this syntax: [1, 2, *list_, 5] (which is [1, 2, 3, 4, 5] if list_ is [3, 4] ). The only operation that can be used between two lists is multiplication, which extends the first list with the content of the second list. This can also be achieved using extend(list1, list2) Addition can be used between a list and any other value to add an element to the list. Substraction can be used between a list and an integer (type int ) to pop (i.e. delete) an element by index. This supports negative numbers. The returned value is the list after the pop. This can be achieved with pop(list, index) , although this returns the popped value. Multiplication can be used between a list and an integer (type int ). For example, [1, 2]*2 returns [1, 2, 1, 2] . Division can be used between a list and an integer (type int ) to get an element by index. This supports negative numbers. This can be achieved using list(index) or get(list, index) . In boolean context, a list is true if it is not empty None None is a value to denote the absence of other values. It is accessible trought the None built-in variable. No operation can be used on None . In boolean context, None is false. Modules A module is a value containing various useful functions and constants. A list of modules can be found here . Importing modules is detailed here . The procedure to create your own module is detailed here . No operation can be used on modules. In boolean context, a module is true. Changed in 0.22.0-beta Prior to 0.22.0-beta, a module was false in boolean context.","title":"Values"},{"location":"0.22/Language/06values/#values","text":"Here is the list of the value types in Nougaro: int ( integers ). Internal type: int float ( floats ). Internal type: float str ( strings ). Internal type: str list ( lists ). Internal type: list NoneType ( None ). Internal type: NoneValue function . Internal type: func or method . module . Internal type: module constructor . Internal type: constructor object . Internal type: depends on the class\u2019 name, and it is <class> if the class has no name. Note Internal value types are base value (type: BaseValue ) and default value (type: DefaultValue ) Added in 0.22.0-beta DefaultValue is new in 0.22.0-beta. Changed in 0.22.0-beta Before 0.22.0-beta, a distinction was made between func (user-defined function or function in a module written in Nougaro) and built-in func (built-in function or function in a module written in Python).","title":"Values"},{"location":"0.22/Language/06values/#numbers","text":"Numbers represents real-life numbers. The two types of numbers are int and float . To declare a number, you can use a number literal . Operations that can be used between two numbers are: addition, substraction, multiplication, power. If the second number is non-zero, division, modulo and floor division can be used. All these operations follow the mathematical logic (except for 0^0, that returns 1). Multiplication can be used between a integer (type int ) and a string or a list . For example, 3*\"str\" returns \"strstrstr\" , and 2*[1, 2] returns [1, 2, 1, 2] . In boolean context, a number is true if it is non-zero.","title":"Numbers"},{"location":"0.22/Language/06values/#strings","text":"The type of a string is str . To declare a string, you can use a string literal The only operation that can be used between strings is addition, which concatenates the string with the other. For example, \"hello, \" + \"world!\" returns \"hello, world!\" . Multiplication can be used between a string and an integer (type int ). For example, \"str\"*3 returns \"strstrstr\" . In boolean context, a string is true if it contains at least one character.","title":"Strings"},{"location":"0.22/Language/06values/#lists","text":"Lists are a succession of values. To declare a list, you can use brackets ( [] ), and put every value separated by a comma ( , ) inside. They may be 0 values. To create a list with elements from another list (and other elements), you can use this syntax: [1, 2, *list_, 5] (which is [1, 2, 3, 4, 5] if list_ is [3, 4] ). The only operation that can be used between two lists is multiplication, which extends the first list with the content of the second list. This can also be achieved using extend(list1, list2) Addition can be used between a list and any other value to add an element to the list. Substraction can be used between a list and an integer (type int ) to pop (i.e. delete) an element by index. This supports negative numbers. The returned value is the list after the pop. This can be achieved with pop(list, index) , although this returns the popped value. Multiplication can be used between a list and an integer (type int ). For example, [1, 2]*2 returns [1, 2, 1, 2] . Division can be used between a list and an integer (type int ) to get an element by index. This supports negative numbers. This can be achieved using list(index) or get(list, index) . In boolean context, a list is true if it is not empty","title":"Lists"},{"location":"0.22/Language/06values/#none","text":"None is a value to denote the absence of other values. It is accessible trought the None built-in variable. No operation can be used on None . In boolean context, None is false.","title":"None"},{"location":"0.22/Language/06values/#modules","text":"A module is a value containing various useful functions and constants. A list of modules can be found here . Importing modules is detailed here . The procedure to create your own module is detailed here . No operation can be used on modules. In boolean context, a module is true. Changed in 0.22.0-beta Prior to 0.22.0-beta, a module was false in boolean context.","title":"Modules"},{"location":"0.22/Language/07variables/","text":"Variables Definition Use the syntax var identifier = value (see identifiers and values ) to assign the value value to the variable named identifier . The expression var identifier = value returns value . To assign the same value to multiple variables, you can use var variable1 = var variable2 = var variable3 = value . If you want to assign multiple values to multiple variables, you can use var variable1, variable2 = value1, value2 . This can be used to swap variables: var a, b = b, a . Except for keywords , there are no prohibited variable name. Edition You can edit variables by multiple ways: var a = value ; var a += value : same as var a = a + value ; var a ++ : same as var a += 1 ; var a -= value : same as var a = a - value ; var a -- : same as var a -= 1 ; var a *= value : same as var a = a * value ; var a /= value : same as var a = a / value ; var a ^= value : same as var a = a ^ value ; var a //= value : same as var a = a // value ; var a %= value : same as var a = a % value ; var a ||= value : same as var a = a or value ; var a &&= value : same as var a = a and value ; var a ^^^= value : same as var a = a xor value ; var a |= value : same as var a = a | value ; var a &= value : same as var a = a & value ; var a ^^= value : same as var a = a ^^ value ; var a === value : same as var a = a == value ; var a <== value : same as var a = a <= value ; var a <<= value : same as var a = a < value ; var a >== value : same as var a = a >= value ; var a >>= value : same as var a = a > value . Info For details about these operators, see this page . Note You can also edit multiple variables at the same time: var a, b += 1, 2 : same as var a += 1 ; var b += 2 var a, b ++ : same as var a, b += 1, 1 var a, b //= b, a : same as var c = a ; var a //= b ; var b //= c ; del c Access To access to a variable, you can: give the identifier: foo (returns the value of foo ) use the special syntax: foo ? bar ? a ? b (returns the value of foo if it is defined, otherwise the value of bar ... You can put as much ? identifier as you want.) Then, you can put an expression at the end, such as 2 . In this case, the value returned will be 2 if none of the given identifiers is defined. Deletion If you don't need a variable anymore, you can delete it with the del keyword: del identifier . Examples var foo = var bar = 12 while foo != bar - 1 then var bar -= 1 (see while loop ) Example for deletion Create a variable a , the delete it: nougaro> var a = 1 1 nougaro> del a But be careful! It can return errors: nougaro> var a = 1 1 nougaro> del a nougaro> del a Traceback (more recent call last): In file <stdin>, line 1, in <program>: del a ^ NotDefinedError: a is not defined.","title":"Variables"},{"location":"0.22/Language/07variables/#variables","text":"","title":"Variables"},{"location":"0.22/Language/07variables/#definition","text":"Use the syntax var identifier = value (see identifiers and values ) to assign the value value to the variable named identifier . The expression var identifier = value returns value . To assign the same value to multiple variables, you can use var variable1 = var variable2 = var variable3 = value . If you want to assign multiple values to multiple variables, you can use var variable1, variable2 = value1, value2 . This can be used to swap variables: var a, b = b, a . Except for keywords , there are no prohibited variable name.","title":"Definition"},{"location":"0.22/Language/07variables/#edition","text":"You can edit variables by multiple ways: var a = value ; var a += value : same as var a = a + value ; var a ++ : same as var a += 1 ; var a -= value : same as var a = a - value ; var a -- : same as var a -= 1 ; var a *= value : same as var a = a * value ; var a /= value : same as var a = a / value ; var a ^= value : same as var a = a ^ value ; var a //= value : same as var a = a // value ; var a %= value : same as var a = a % value ; var a ||= value : same as var a = a or value ; var a &&= value : same as var a = a and value ; var a ^^^= value : same as var a = a xor value ; var a |= value : same as var a = a | value ; var a &= value : same as var a = a & value ; var a ^^= value : same as var a = a ^^ value ; var a === value : same as var a = a == value ; var a <== value : same as var a = a <= value ; var a <<= value : same as var a = a < value ; var a >== value : same as var a = a >= value ; var a >>= value : same as var a = a > value . Info For details about these operators, see this page . Note You can also edit multiple variables at the same time: var a, b += 1, 2 : same as var a += 1 ; var b += 2 var a, b ++ : same as var a, b += 1, 1 var a, b //= b, a : same as var c = a ; var a //= b ; var b //= c ; del c","title":"Edition"},{"location":"0.22/Language/07variables/#access","text":"To access to a variable, you can: give the identifier: foo (returns the value of foo ) use the special syntax: foo ? bar ? a ? b (returns the value of foo if it is defined, otherwise the value of bar ... You can put as much ? identifier as you want.) Then, you can put an expression at the end, such as 2 . In this case, the value returned will be 2 if none of the given identifiers is defined.","title":"Access"},{"location":"0.22/Language/07variables/#deletion","text":"If you don't need a variable anymore, you can delete it with the del keyword: del identifier .","title":"Deletion"},{"location":"0.22/Language/07variables/#examples","text":"var foo = var bar = 12 while foo != bar - 1 then var bar -= 1 (see while loop )","title":"Examples"},{"location":"0.22/Language/07variables/#example-for-deletion","text":"Create a variable a , the delete it: nougaro> var a = 1 1 nougaro> del a But be careful! It can return errors: nougaro> var a = 1 1 nougaro> del a nougaro> del a Traceback (more recent call last): In file <stdin>, line 1, in <program>: del a ^ NotDefinedError: a is not defined.","title":"Example for deletion"},{"location":"0.22/Language/08tests/","text":"Test statements List There is the list of test keywords in Nougaro : Nougaro Python if if then : elif elif else else assert assert Syntax if <cond> then <expr> if <cond> then <expr> else <expr> if <cond> then <expr> elif <cond> then <expr> if <cond> then <expr> elif <cond> then <expr> else <expr> if <cond> then <expr> elif <cond> then <expr> elif <cond> then <expr> if <cond> then <expr> elif <cond> then <expr> elif <cond> then <expr> else <expr> etc. Multi-line : if <cond> then <some code here> end if <cond> then <some code here> else <some other code> end if <cond> then <some code here> else <some other code> end etc. Behaviour The condition is checked. If it is true, the expression in the if branch is executed. Otherwise, Nougaro checks for an elif branch. If it exists, it re-checks the condition, etc. If none of the conditions is true and that there is an else branch, the expression in the else branch is executed. If there is no else branch, nothing is executed. Logicals constants Nougaro Python Comments True True equals to 1 False False equals to 0 Conditions Conditions can be any value , which will be interpreted in its boolean context. Conditions can also use test operators . For instance, a == b checks if a is equal to b , where a < b checks if a is strictly less than b .\u202fYou can chain multiple operators: a == b <= c != d checks if a is equal to b and if b is less than or equal to c and if c is different from d . Multiple conditions can be combined with boolean/logical operators . Here is the truth table of the logical operators: and a b a and b 0 0 0 0 1 0 1 0 0 1 1 1 or a b a or b 0 0 0 0 1 1 1 0 1 1 1 1 xor a b a xor b 0 0 0 0 1 1 1 0 1 1 1 0 not a not a 0 1 1 0 There is no priority amongst boolean operators, so for instance a and b or c xor d gives ((a and b) or c) xor d . After interpretation, a condition is always 0 or 1 ( False or True ). Examples if foo == bar then var foo = 12 if bar != foo then var foo = 12 else var bar = 13 * if foo > bar and 12 <= variable then var bar = variable elif foo < bar xor foo > variable then var foo = 3 end if foo > bar and 12 <= variable then var bar = variable elif foo < bar xor foo > variable then var foo = 3 else var foo = 12 end Assertions The assert keyword can be used to quickly check for a condition, and crash if the condition is not met. Its syntax is the following: assert (condition) assert (condition), \"error message.\" If (condition) is true, nothing happens and the program continues. However, if it is false, the program crashes with AssertionError with the error message specified in the code (or without any error message if no error message is specified.)","title":"Test statements"},{"location":"0.22/Language/08tests/#test-statements","text":"","title":"Test statements"},{"location":"0.22/Language/08tests/#list","text":"There is the list of test keywords in Nougaro : Nougaro Python if if then : elif elif else else assert assert","title":"List"},{"location":"0.22/Language/08tests/#syntax","text":"if <cond> then <expr> if <cond> then <expr> else <expr> if <cond> then <expr> elif <cond> then <expr> if <cond> then <expr> elif <cond> then <expr> else <expr> if <cond> then <expr> elif <cond> then <expr> elif <cond> then <expr> if <cond> then <expr> elif <cond> then <expr> elif <cond> then <expr> else <expr> etc. Multi-line : if <cond> then <some code here> end if <cond> then <some code here> else <some other code> end if <cond> then <some code here> else <some other code> end etc.","title":"Syntax"},{"location":"0.22/Language/08tests/#behaviour","text":"The condition is checked. If it is true, the expression in the if branch is executed. Otherwise, Nougaro checks for an elif branch. If it exists, it re-checks the condition, etc. If none of the conditions is true and that there is an else branch, the expression in the else branch is executed. If there is no else branch, nothing is executed.","title":"Behaviour"},{"location":"0.22/Language/08tests/#logicals-constants","text":"Nougaro Python Comments True True equals to 1 False False equals to 0","title":"Logicals constants"},{"location":"0.22/Language/08tests/#conditions","text":"Conditions can be any value , which will be interpreted in its boolean context. Conditions can also use test operators . For instance, a == b checks if a is equal to b , where a < b checks if a is strictly less than b .\u202fYou can chain multiple operators: a == b <= c != d checks if a is equal to b and if b is less than or equal to c and if c is different from d . Multiple conditions can be combined with boolean/logical operators . Here is the truth table of the logical operators:","title":"Conditions"},{"location":"0.22/Language/08tests/#and","text":"a b a and b 0 0 0 0 1 0 1 0 0 1 1 1","title":"and"},{"location":"0.22/Language/08tests/#or","text":"a b a or b 0 0 0 0 1 1 1 0 1 1 1 1","title":"or"},{"location":"0.22/Language/08tests/#xor","text":"a b a xor b 0 0 0 0 1 1 1 0 1 1 1 0","title":"xor"},{"location":"0.22/Language/08tests/#not","text":"a not a 0 1 1 0 There is no priority amongst boolean operators, so for instance a and b or c xor d gives ((a and b) or c) xor d . After interpretation, a condition is always 0 or 1 ( False or True ).","title":"not"},{"location":"0.22/Language/08tests/#examples","text":"if foo == bar then var foo = 12 if bar != foo then var foo = 12 else var bar = 13 * if foo > bar and 12 <= variable then var bar = variable elif foo < bar xor foo > variable then var foo = 3 end if foo > bar and 12 <= variable then var bar = variable elif foo < bar xor foo > variable then var foo = 3 else var foo = 12 end","title":"Examples"},{"location":"0.22/Language/08tests/#assertions","text":"The assert keyword can be used to quickly check for a condition, and crash if the condition is not met. Its syntax is the following: assert (condition) assert (condition), \"error message.\" If (condition) is true, nothing happens and the program continues. However, if it is false, the program crashes with AssertionError with the error message specified in the code (or without any error message if no error message is specified.)","title":"Assertions"},{"location":"0.22/Language/09loops/","text":"Loops Loops are made to execute the same piece of code multiple times in a row. Here is a list of available loops in Nougaro: Nougaro Python C/C++ for for for while while while do ... then loop while (nothing) do ... while for The for loop can have two usages: browse every element in a list (or a str ), or iterate a certain number of times. for each To browse every element in a list (or a str ), use the following syntax: # One line for identifier in list then ... # Multiple lines for identifier in list then ... ... end For each element of the list, the variable identifier will be set to the corresponding element, and this variable can be used inside the loop. for i = ... to ... # One line for identifier = start_value to end_value then ... for identifier = start_value to end_value step step_value then ... # Multiple lines for identifier = start_value to end_value then ... ... end for identifier = start_value to end_value step step_value then ... ... end start_value , end_value and step_value are integers . If step_value is not specified, the default value is 0. This loop starts by setting the variable identifier to start_value , then executes the loop. It then adds step_value to identifier . If the value of identifier is greater than or equal to end_value , the loops stops without executing. Otherwise, it runs until this condition is reached. Note In for loops, the start value can be less than the end value. In that case, don\u2019t forget to give a negative step! while The while loop is used to repeat a piece of code as long as a condition is met. It has the following syntax: # One line while condition then ... # Multiple lines while condition then ... ... end do The do loop is used to execute a piece of code a first time, then repeat it as long as a condition is met. It has the following syntax: # One line do ... then loop while condition # Multiple lines do ... ... then loop while condition Labels Added in 0.20.0-beta Labels were added in 0.20.0-beta. You can label a loop using for:label , while:label or do:label . Labels are identifiers . You can use labels with break and continue . break , continue Changed in 0.20.0-beta Prior to 0.20.0-beta, break and continue did append None to the return list. To re-enable this behaviour, you can enable appendNoneOnBreak or appendNoneOnContinue metas . Added in 0.20.0-beta Labels were added in 0.20.0-beta. The break statement completely stops the loop. If there is a returned list, the value is not added to this list. You can use break and return ... to return a specific value. The continue statement omit the code after it, and execute another time the loop like if the last time was ended. continue and break work normally at the first execution of a do body. continue:label will continue the loop that has this label. If you\u2019re in an :inner loop inside a :label loop, the :inner loop will break and the :label loop will continue. break:label will break the loop that has this label. If you\u2019re in an :inner loop inside a :label loop, the :inner AND the :label loop will break.","title":"Loops"},{"location":"0.22/Language/09loops/#loops","text":"Loops are made to execute the same piece of code multiple times in a row. Here is a list of available loops in Nougaro: Nougaro Python C/C++ for for for while while while do ... then loop while (nothing) do ... while","title":"Loops"},{"location":"0.22/Language/09loops/#for","text":"The for loop can have two usages: browse every element in a list (or a str ), or iterate a certain number of times.","title":"for"},{"location":"0.22/Language/09loops/#for-each","text":"To browse every element in a list (or a str ), use the following syntax: # One line for identifier in list then ... # Multiple lines for identifier in list then ... ... end For each element of the list, the variable identifier will be set to the corresponding element, and this variable can be used inside the loop.","title":"for each"},{"location":"0.22/Language/09loops/#for-i-to","text":"# One line for identifier = start_value to end_value then ... for identifier = start_value to end_value step step_value then ... # Multiple lines for identifier = start_value to end_value then ... ... end for identifier = start_value to end_value step step_value then ... ... end start_value , end_value and step_value are integers . If step_value is not specified, the default value is 0. This loop starts by setting the variable identifier to start_value , then executes the loop. It then adds step_value to identifier . If the value of identifier is greater than or equal to end_value , the loops stops without executing. Otherwise, it runs until this condition is reached. Note In for loops, the start value can be less than the end value. In that case, don\u2019t forget to give a negative step!","title":"for i = ... to ..."},{"location":"0.22/Language/09loops/#while","text":"The while loop is used to repeat a piece of code as long as a condition is met. It has the following syntax: # One line while condition then ... # Multiple lines while condition then ... ... end","title":"while"},{"location":"0.22/Language/09loops/#do","text":"The do loop is used to execute a piece of code a first time, then repeat it as long as a condition is met. It has the following syntax: # One line do ... then loop while condition # Multiple lines do ... ... then loop while condition","title":"do"},{"location":"0.22/Language/09loops/#labels","text":"Added in 0.20.0-beta Labels were added in 0.20.0-beta. You can label a loop using for:label , while:label or do:label . Labels are identifiers . You can use labels with break and continue .","title":"Labels"},{"location":"0.22/Language/09loops/#break-continue","text":"Changed in 0.20.0-beta Prior to 0.20.0-beta, break and continue did append None to the return list. To re-enable this behaviour, you can enable appendNoneOnBreak or appendNoneOnContinue metas . Added in 0.20.0-beta Labels were added in 0.20.0-beta. The break statement completely stops the loop. If there is a returned list, the value is not added to this list. You can use break and return ... to return a specific value. The continue statement omit the code after it, and execute another time the loop like if the last time was ended. continue and break work normally at the first execution of a do body. continue:label will continue the loop that has this label. If you\u2019re in an :inner loop inside a :label loop, the :inner loop will break and the :label loop will continue. break:label will break the loop that has this label. If you\u2019re in an :inner loop inside a :label loop, the :inner AND the :label loop will break.","title":"break, continue"},{"location":"0.22/Language/10functions/","text":"Functions Internal type: func . No operation can be used on functions. Functions are true in boolean context. Changed in 0.22.0-beta Prior to 0.22.0-beta, functions were false in boolean context. Definition To define a function, use the def keyword and an arrow: def name(param1, param2) -> <some code here> . You can omit the name, but in this case you have to call directly the function or to store it in a variable: (def (param1) -> <some code here>)(<arg1>) ; var somefunc = def (param1) -> <some code here> You can define multi-line functions: def name(param1, param2, param3) <some code here> end Note The arguments given and the variables created inside the function are deleted at the end of the function execution. Similarly, the variables created outside the function and before its definition are accessible inside the function, but modifications are not saved. Info There can be 0 parameters. Optional parameters Note Added in 0.22.0-beta To define optional parameters, use this syntax: def name(param1, param2, param3)(optional_param1=default_value, optional_param2=default_value) <some code here> end return statement In the code executed by your function, there can be the return statement. It stops the function. If a value is placed after the statement, the function will return this value when called. In the other cases, it will return None . Call Call a function using this syntax: func(arg1, arg2) You can store arguments in a list and use *list . E.g. func(*list_) , func(*[1, 2, 3]) . Optional arguments Note Added in 0.22.0-beta You can omit optional arguments, which will set them to their default value. In this case: def name(param1, param2, param3)(optional_param1=default_value, optional_param2=default_value) , if you want to keep optional_param1 to its default value but not optional_param2 , you can use: name(argument1, argument2, argument3, <default>, optional_argument2) (keep < and > around <default> ) Examples def foo(a, b) -> a*b - b def bar(a, b) -> (a-1)*b var c = 2 var d = 5 if foo(c, d) == bar(c, d) then var e = True else var e = False (In this case, e = 1) def foo(a, b) if a == 2 then return a + b else return b end end def foo(a, b)(should_return_none = False) if a == 2 then return a + b else if should_return_none then return return b end end foo(1, 5) # 5 foo(2, 5) # 7 foo(1, 5, <default>) # 5 foo(2, 5, <default>) # 7 foo(1, 5, True) # None foo(2, 5, True) # 7","title":"Functions"},{"location":"0.22/Language/10functions/#functions","text":"Internal type: func . No operation can be used on functions. Functions are true in boolean context. Changed in 0.22.0-beta Prior to 0.22.0-beta, functions were false in boolean context.","title":"Functions"},{"location":"0.22/Language/10functions/#definition","text":"To define a function, use the def keyword and an arrow: def name(param1, param2) -> <some code here> . You can omit the name, but in this case you have to call directly the function or to store it in a variable: (def (param1) -> <some code here>)(<arg1>) ; var somefunc = def (param1) -> <some code here> You can define multi-line functions: def name(param1, param2, param3) <some code here> end Note The arguments given and the variables created inside the function are deleted at the end of the function execution. Similarly, the variables created outside the function and before its definition are accessible inside the function, but modifications are not saved. Info There can be 0 parameters.","title":"Definition"},{"location":"0.22/Language/10functions/#optional-parameters","text":"Note Added in 0.22.0-beta To define optional parameters, use this syntax: def name(param1, param2, param3)(optional_param1=default_value, optional_param2=default_value) <some code here> end","title":"Optional parameters"},{"location":"0.22/Language/10functions/#return-statement","text":"In the code executed by your function, there can be the return statement. It stops the function. If a value is placed after the statement, the function will return this value when called. In the other cases, it will return None .","title":"return statement"},{"location":"0.22/Language/10functions/#call","text":"Call a function using this syntax: func(arg1, arg2) You can store arguments in a list and use *list . E.g. func(*list_) , func(*[1, 2, 3]) .","title":"Call"},{"location":"0.22/Language/10functions/#optional-arguments","text":"Note Added in 0.22.0-beta You can omit optional arguments, which will set them to their default value. In this case: def name(param1, param2, param3)(optional_param1=default_value, optional_param2=default_value) , if you want to keep optional_param1 to its default value but not optional_param2 , you can use: name(argument1, argument2, argument3, <default>, optional_argument2) (keep < and > around <default> )","title":"Optional arguments"},{"location":"0.22/Language/10functions/#examples","text":"def foo(a, b) -> a*b - b def bar(a, b) -> (a-1)*b var c = 2 var d = 5 if foo(c, d) == bar(c, d) then var e = True else var e = False (In this case, e = 1) def foo(a, b) if a == 2 then return a + b else return b end end def foo(a, b)(should_return_none = False) if a == 2 then return a + b else if should_return_none then return return b end end foo(1, 5) # 5 foo(2, 5) # 7 foo(1, 5, <default>) # 5 foo(2, 5, <default>) # 7 foo(1, 5, True) # None foo(2, 5, True) # 7","title":"Examples"},{"location":"0.22/Language/11attributes/","text":"Attributes Values in Nougaro can have attributes, i.e. subvalues that have a name. They can be set using the classical variable definition syntax: var variable.attribute = value They can be accessed using the dot-syntax: variable.attribute Note You can even access any name defined in the context of the value. For instance, variable.print references the print built-in function. Pro tip The next time you have a bug, document it. If it is documented, it is therefore not a bug.","title":"Attributes"},{"location":"0.22/Language/11attributes/#attributes","text":"Values in Nougaro can have attributes, i.e. subvalues that have a name. They can be set using the classical variable definition syntax: var variable.attribute = value They can be accessed using the dot-syntax: variable.attribute Note You can even access any name defined in the context of the value. For instance, variable.print references the print built-in function. Pro tip The next time you have a bug, document it. If it is documented, it is therefore not a bug.","title":"Attributes"},{"location":"0.22/Language/12classes/","text":"Classes and objects Note Added in 0.15-beta Nougaro is an object-oriented programming language, which means you can create objects using classes . Class definition To define a class, use this syntax: class Name ... end To create attributes , just use the basic var id = value syntax: class Name var a = 3 var b = 1 end To create methods , just use the basic def syntax . Access to object\u2019s attributes with this : class Name var a = 3 var b = 1 def increment_b(by) var this.b += 1 end def get_a() return this.a end end Methods are attributes themselves. Methods Internal type: method . No operation can be used on methods. Methods are true in boolean context. Changed in 0.22.0-beta Prior to 0.22.0-beta, methods were false in boolean context. Constructor value Internal type: constructor . No operation can be used on constructors. Constructors are false in boolean context. Inheritance To inherit from another class, use the class Name(Iherit) syntax: class ChildOfName(Name) var c = 3 def set_c(new_value) var this.c = new_value end def a_plus_b_plus_c() return this.get_a() + this.b + this.c end end Object Classes can be instanced into objects by calling them. Example: var instance = Name() instance.increment_b(10) assert instance.b == 11 Internal type: Name (depends on the class\u2019 name). No operation can be used on objects. Objects are false in boolean context. Example See the stack.noug example located in ./examples/ in the main Nougaro repository.","title":"Classes and objects"},{"location":"0.22/Language/12classes/#classes-and-objects","text":"Note Added in 0.15-beta Nougaro is an object-oriented programming language, which means you can create objects using classes .","title":"Classes and objects"},{"location":"0.22/Language/12classes/#class-definition","text":"To define a class, use this syntax: class Name ... end To create attributes , just use the basic var id = value syntax: class Name var a = 3 var b = 1 end To create methods , just use the basic def syntax . Access to object\u2019s attributes with this : class Name var a = 3 var b = 1 def increment_b(by) var this.b += 1 end def get_a() return this.a end end Methods are attributes themselves.","title":"Class definition"},{"location":"0.22/Language/12classes/#methods","text":"Internal type: method . No operation can be used on methods. Methods are true in boolean context. Changed in 0.22.0-beta Prior to 0.22.0-beta, methods were false in boolean context.","title":"Methods"},{"location":"0.22/Language/12classes/#constructor-value","text":"Internal type: constructor . No operation can be used on constructors. Constructors are false in boolean context.","title":"Constructor value"},{"location":"0.22/Language/12classes/#inheritance","text":"To inherit from another class, use the class Name(Iherit) syntax: class ChildOfName(Name) var c = 3 def set_c(new_value) var this.c = new_value end def a_plus_b_plus_c() return this.get_a() + this.b + this.c end end","title":"Inheritance"},{"location":"0.22/Language/12classes/#object","text":"Classes can be instanced into objects by calling them. Example: var instance = Name() instance.increment_b(10) assert instance.b == 11 Internal type: Name (depends on the class\u2019 name). No operation can be used on objects. Objects are false in boolean context.","title":"Object"},{"location":"0.22/Language/12classes/#example","text":"See the stack.noug example located in ./examples/ in the main Nougaro repository.","title":"Example"},{"location":"0.22/Language/13read_and_write_files/","text":"Read and write in files Read To read a file, use read \"path/to/file.ext\" or read \"path/to/file\" line_number . You can assign this value to a variable by using read \"file\" >> identifier line_number or var identifier = read \"file\" line_number . line_number is an integer and is optional. You can use \"<stdin>\" as file name to get a line of input from the user. It is exactly like the input built-in function . The read expression returns the content of the file (or of the line). Write To write in a file, use write \"sometext\" >> \"path/to/file.ext\" line_number . line_number is an integer and is optional. To overwrite the content when you write, replace >> by !>> . You can use \"<stdout>\" as file name to print a text in the console. It is exactly like the print built-in function . If you overwrite the contents of <stdout> , the console is cleared (exactly like the clear built-in function .) The write expression returns the text that was wrote in the file.","title":"Read and write in files"},{"location":"0.22/Language/13read_and_write_files/#read-and-write-in-files","text":"","title":"Read and write in files"},{"location":"0.22/Language/13read_and_write_files/#read","text":"To read a file, use read \"path/to/file.ext\" or read \"path/to/file\" line_number . You can assign this value to a variable by using read \"file\" >> identifier line_number or var identifier = read \"file\" line_number . line_number is an integer and is optional. You can use \"<stdin>\" as file name to get a line of input from the user. It is exactly like the input built-in function . The read expression returns the content of the file (or of the line).","title":"Read"},{"location":"0.22/Language/13read_and_write_files/#write","text":"To write in a file, use write \"sometext\" >> \"path/to/file.ext\" line_number . line_number is an integer and is optional. To overwrite the content when you write, replace >> by !>> . You can use \"<stdout>\" as file name to print a text in the console. It is exactly like the print built-in function . If you overwrite the contents of <stdout> , the console is cleared (exactly like the clear built-in function .) The write expression returns the text that was wrote in the file.","title":"Write"},{"location":"0.22/Language/14import/","text":"Import and export import and export are two keywords related to modules /libraries. Import The import keyword is used to import a module in the current code. It follows the syntax import name or import name as alias . It checks for name in Nougaro stardard library and in the current directory for a file named name.noug . dir.subdir.name looks for ./dir/subdir/name.noug . Note: the \u201ccurrent directory\u201d is the directory of the file that were executed. For instance, if the file foo.noug (in the directory project ) imported dir.bar , and that dir/bar.noug has import name , name is checked in the project directory. The \u201ccurrent directory\u201d is the working directory ( pwd ) if you launched an interactive session (shell). The import keyword created a module value with, as attributes, all the values exported by the module. Export The export keyword is used to export a value in a module, that will become an attribute of the module\u2019s value when imported. It follows the syntax export name or export expression as name . More in this page .","title":"Import and export"},{"location":"0.22/Language/14import/#import-and-export","text":"import and export are two keywords related to modules /libraries.","title":"Import and export"},{"location":"0.22/Language/14import/#import","text":"The import keyword is used to import a module in the current code. It follows the syntax import name or import name as alias . It checks for name in Nougaro stardard library and in the current directory for a file named name.noug . dir.subdir.name looks for ./dir/subdir/name.noug . Note: the \u201ccurrent directory\u201d is the directory of the file that were executed. For instance, if the file foo.noug (in the directory project ) imported dir.bar , and that dir/bar.noug has import name , name is checked in the project directory. The \u201ccurrent directory\u201d is the working directory ( pwd ) if you launched an interactive session (shell). The import keyword created a module value with, as attributes, all the values exported by the module.","title":"Import"},{"location":"0.22/Language/14import/#export","text":"The export keyword is used to export a value in a module, that will become an attribute of the module\u2019s value when imported. It follows the syntax export name or export expression as name . More in this page .","title":"Export"},{"location":"0.22/Language/15metas/","text":"Metas Note Added in 0.19.0-beta Metas are a way to use other (or old) functionnalities in Nougaro. They\u2019re used by adding @meta metaName or @meta metaName value at the beginning of a file or in an interactive shell. Note that, instead of @ , you can use any of those prefixes: #@ , %@ , @@ , -@ , $@ . appendNoneOnBreak Note Added in 0.20.0-beta If enabled, this meta forces a break statement to append None to the list returned by the loop . appendNoneOnContinue Note Added in 0.20.0-beta If enabled, this meta forces a continue statement to append None to the list returned by the loop . legacyAbs The legacyAbs meta lets you use the old syntax (in the prototype-1 version) for absolute value, which is |...| . However, this meta disables the bitwise or operation . Example: @meta legacyAbs print(|-1|) # 1 var a = 12 print(|-a|) # 12 nbspBetweenFrenchGuillemets The nbspBetweenFrenchGuillemets meta requires you, if you use the french string quotes ( \u00ab\u00bb ), to put a no-break space (or a narrow no-break space) after the \u00ab and before the \u00bb . Example: @meta nbspBetweenFrenchGuillemets print(\u00ab hello, world \u00bb) /* hello, world * note that the quotes aren\u2019t regular spaces */ setTheTestValueTo Sets __the_test_value__ to the str value given in the meta value If no value is given, it sets it to None .","title":"Metas"},{"location":"0.22/Language/15metas/#metas","text":"Note Added in 0.19.0-beta Metas are a way to use other (or old) functionnalities in Nougaro. They\u2019re used by adding @meta metaName or @meta metaName value at the beginning of a file or in an interactive shell. Note that, instead of @ , you can use any of those prefixes: #@ , %@ , @@ , -@ , $@ .","title":"Metas"},{"location":"0.22/Language/15metas/#appendnoneonbreak","text":"Note Added in 0.20.0-beta If enabled, this meta forces a break statement to append None to the list returned by the loop .","title":"appendNoneOnBreak"},{"location":"0.22/Language/15metas/#appendnoneoncontinue","text":"Note Added in 0.20.0-beta If enabled, this meta forces a continue statement to append None to the list returned by the loop .","title":"appendNoneOnContinue"},{"location":"0.22/Language/15metas/#legacyabs","text":"The legacyAbs meta lets you use the old syntax (in the prototype-1 version) for absolute value, which is |...| . However, this meta disables the bitwise or operation . Example: @meta legacyAbs print(|-1|) # 1 var a = 12 print(|-a|) # 12","title":"legacyAbs"},{"location":"0.22/Language/15metas/#nbspbetweenfrenchguillemets","text":"The nbspBetweenFrenchGuillemets meta requires you, if you use the french string quotes ( \u00ab\u00bb ), to put a no-break space (or a narrow no-break space) after the \u00ab and before the \u00bb . Example: @meta nbspBetweenFrenchGuillemets print(\u00ab hello, world \u00bb) /* hello, world * note that the quotes aren\u2019t regular spaces */","title":"nbspBetweenFrenchGuillemets"},{"location":"0.22/Language/15metas/#setthetestvalueto","text":"Sets __the_test_value__ to the str value given in the meta value If no value is given, it sets it to None .","title":"setTheTestValueTo"},{"location":"0.22/Language/16dollar_print/","text":"Dollar-print syntax The dollar-print syntax is the following: $indentifier It checks if identifier exists, and if so, it prits it. Otherwise, it prints $identifier . If no identifier is given, it prints $ .","title":"Dollar-print syntax"},{"location":"0.22/Language/16dollar_print/#dollar-print-syntax","text":"The dollar-print syntax is the following: $indentifier It checks if identifier exists, and if so, it prits it. Otherwise, it prints $identifier . If no identifier is given, it prints $ .","title":"Dollar-print syntax"},{"location":"0.22/stdlib/01builtin-variables/","text":"List of built-in variables Useful ones __args__ Note Added in 0.16.0-beta List of the command line arguments (type string). Examples (assuming your Nougaro command is noug ): * noug -c \"print(__args__)\" -t d 78876876 -v tth prints [\"-c\", \"-t\", \"d\", \"78876876\", \"-v\", \"tth\"] * noug examples/args.noug -t d 78876876 -v tth prints [\"examples/args.noug\", \"-t\", \"d\", \"78876876\", \"-v\", \"tth\"] (check out the contents of args.noug ) * noug -c \"print(__args__)\" prints [\"-c\"] * entering the shell then entering print(__args__) prints [] Nougaro informations Note This section is duplicated in this file __noug_version__ : string of the Nougaro version (e.g. \"0.15.0-beta\".) You can use the noug_version lib to have better informations. __data_version__ : the Nougaro data version, an internal version keeping track of changes in the config file directory structure __version_id__ : an ID increased at least once per version __python_version__ : string of the Python version (e.g. \"3.10.5\") __noug_dir__ : string of the absolute path of the directory where shell.(py/exe) is located. May be used with file I/O read and write statements. OS informations __os_name__ : name of the Operating System (e.g. \"Windows\", \"Linux\", \"Darwin\" \u2013 for macOS \u2013, \"Java\" \u2013 for Jython \u2013, \u2026) __os_release__ : release of the OS (e.g. \"10\" for Windows 10, \"Vista\" for Windows Vista.) __os_version__ : version of the OS (e.g. \"10.0.19044\" for Windows 10 build 19044.) Examples print(\"You use Nougaro version \" + __noug_version__ + \", interpreted with Python \" + __python_version__) print(\"You use \" + __os_name__ + \" \" + __os_release__ + \" \" + __os_version__) On the Jean Dubois' old computer, under Windows 10 21H2, it returns: You use Nougaro version alpha 0.8.1, interpreted with Python 3.10.5 You use Windows 10 10.0.19044 And under his Linux: You use nougaro version beta 0.14, interpreted with Python 3.11.4 You use Linux 6.2.0-27-generic #28-Ubuntu SMP PREEMPT_DYNAMIC Wed Jul 12 22:39:51 UTC 2023 Note that this code is in examples.noug","title":"List of built-in variables"},{"location":"0.22/stdlib/01builtin-variables/#list-of-built-in-variables","text":"","title":"List of built-in variables"},{"location":"0.22/stdlib/01builtin-variables/#useful-ones","text":"","title":"Useful ones"},{"location":"0.22/stdlib/01builtin-variables/#__args__","text":"Note Added in 0.16.0-beta List of the command line arguments (type string). Examples (assuming your Nougaro command is noug ): * noug -c \"print(__args__)\" -t d 78876876 -v tth prints [\"-c\", \"-t\", \"d\", \"78876876\", \"-v\", \"tth\"] * noug examples/args.noug -t d 78876876 -v tth prints [\"examples/args.noug\", \"-t\", \"d\", \"78876876\", \"-v\", \"tth\"] (check out the contents of args.noug ) * noug -c \"print(__args__)\" prints [\"-c\"] * entering the shell then entering print(__args__) prints []","title":"__args__"},{"location":"0.22/stdlib/01builtin-variables/#nougaro-informations","text":"Note This section is duplicated in this file __noug_version__ : string of the Nougaro version (e.g. \"0.15.0-beta\".) You can use the noug_version lib to have better informations. __data_version__ : the Nougaro data version, an internal version keeping track of changes in the config file directory structure __version_id__ : an ID increased at least once per version __python_version__ : string of the Python version (e.g. \"3.10.5\") __noug_dir__ : string of the absolute path of the directory where shell.(py/exe) is located. May be used with file I/O read and write statements.","title":"Nougaro informations"},{"location":"0.22/stdlib/01builtin-variables/#os-informations","text":"__os_name__ : name of the Operating System (e.g. \"Windows\", \"Linux\", \"Darwin\" \u2013 for macOS \u2013, \"Java\" \u2013 for Jython \u2013, \u2026) __os_release__ : release of the OS (e.g. \"10\" for Windows 10, \"Vista\" for Windows Vista.) __os_version__ : version of the OS (e.g. \"10.0.19044\" for Windows 10 build 19044.)","title":"OS informations"},{"location":"0.22/stdlib/01builtin-variables/#examples","text":"print(\"You use Nougaro version \" + __noug_version__ + \", interpreted with Python \" + __python_version__) print(\"You use \" + __os_name__ + \" \" + __os_release__ + \" \" + __os_version__) On the Jean Dubois' old computer, under Windows 10 21H2, it returns: You use Nougaro version alpha 0.8.1, interpreted with Python 3.10.5 You use Windows 10 10.0.19044 And under his Linux: You use nougaro version beta 0.14, interpreted with Python 3.11.4 You use Linux 6.2.0-27-generic #28-Ubuntu SMP PREEMPT_DYNAMIC Wed Jul 12 22:39:51 UTC 2023 Note that this code is in examples.noug","title":"Examples"},{"location":"0.22/stdlib/02builtin-functions/","text":"List of built-in functions Note In this page, type of parameters are noted using the param: type syntax (type can eventually be Any ), and optional parameters are noted between <> and their default value are specified with = . Also, *args tells that this function can take any number of arguments. Input/Output print Syntax: print(str: str) . Prints str in console. Returns None. Example: print(\"hello, world!\") . print_ret Syntax: print_ret(str: str) . Prints str in console and returns it. Example: print_ret(\"hello, world!\") . print_in_red Syntax: print_in_red(str: str) . Prints str in red in console. Returns None. Example: print_in_red(\"Error: this error is RED\") . print_in_red_ret Syntax: print_in_red_ret(str: str) . Prints str in red in console and returns it. Example: print_in_red_ret(\"Error: this error is RED and returned\") print_in_green Syntax: print_in_green(str: str) . Prints str in green in console. Returns None. Example: print_in_green(\"Info: this info is GREEN\") . print_in_green_ret Syntax: print_in_green_ret(str: str) . Prints str in green in console and returns it. Example: print_in_green_ret(\"Info: this info is GREEN and returned\") input Syntax: input(<text_to_display: str = \"\">) . Inputs a str. If text_to_display is specified, it is printed as a prompt. input_int Syntax: input_int(<text_to_display: str = \"\">) . Inputs an int. If text_to_display is specified, it is printed as a prompt. input_num Syntax: input_num(<text_to_display: str = \"\">) . Inputs an int or a float. If text_to_display is specified, it is printed as a prompt. Types Note Python isinstance() returns True if value is an object of the given type. type Syntax: type(value: Any) Returns a str of the internal type of the value. It can be str , int , float , list , func , module , ... is_int Syntax: is_int(value: Any) Returns True if value is an integer , False if it is not. Corresponds to isinstance(value, int) . is_float Syntax: is_float(value: Any) Returns True if value is a float , False if it is not. Corresponds to isinstance(value, float) . is_num Syntax: is_num(value: Any) Returns True if value is a number , False if it is not. Corresponds to isinstance(value, float) or isinstance(value, int) . is_str Syntax: is_str(value: Any) Returns True if value is a string , False if it is not. Corresponds to isinstance(value, str) . is_list Syntax: is_list(value: Any) Returns True if value is a list , False if it is not. Corresponds to isinstance(value, list) . is_func Syntax: is_func(value: Any) Returns True if value is a function , False if it is not. Corresponds to isinstance(value, BaseFunction) where BaseFunction is function, method and builtin function. is_module Syntax: is_module(value: Any) Returns True if value is a module , False if it is not. Corresponds to isinstance(value, module) . Example: import math; is_module(math) will be True , but is_module(3.2) will be False . is_none Syntax: is_none(value: Any) Returns True if value is None , False if it is not. Corresponds to isinstance(value, NoneValue) or value is None . is_constructor Added in 0.20.0-beta Syntax: is_constructor(value: Any) Returns True if value is a constructor , False if it is not. Corresponds to isinstance(value, Constructor) . is_object Added in 0.20.0-beta Syntax: is_object(value: Any) Returns True if value is an object , False if it is not. Corresponds to isinstance(value, object) . Note: in Nougaro, everything is not an object! Type conversions str Syntax: str(value: Any) Converts value to string (may return an error). int Syntax: str(value: Any) Converts value to int (may return an error). float Syntax: str(value: Any) Converts value to float (may return an error). list Syntax: str(value: Any) Converts value to list (may return an error). String and lists operators upper Syntax: upper(value: str) Returns upper-cased string. Example: upper('nougaro') returns 'NOUGARO' . lower Syntax: lower(value: str) Returns lower-cased string. Example: lower('NOUGARO') returns 'nougaro' . split Syntax: split(value: str, <char: str = \" \">) Returns splitted string. For example, split('a b c') returns ['a', 'b', 'c'] ; split('a b c', 'b') returns ['a ', ' c'] . startswith Syntax: startswith(value: str, substring: str) Returns True if value starts with substring . Example: \"nougaro\" starts with \"noug\" , but \"canal du midi\" does not start with \"minimes\" . endswith Syntax: endswith(value: str, substring: str) Returns True if value ends with substring . Example: \"nougaro\" ends with \"garo\" , but \"canal du midi\" does not end with \"minimes\" . len Syntax: len(value: list | str) Returns the number of elements in a list (i.e. its length), or the number of chars in a str. reverse Syntax: reverse(value: list | str) Reverses list or string value by reference and returns the result. Example: reverse([1, 2, 3]) is [3, 2, 1] . append Syntax: append(list: list, value: Any) Appends value at the end of the list. Returns a list. If the list is a variable, edits the variable. pop Syntax: pop(list: list, <index: int = -1>) : Deletes value at given index. Returns the popped element. If the list is a variable, edits the variable. If index is not given, the last element of the list is popped. insert Syntax: insert(list: list, value: Any, <index: int = -1>) Inserts value at the given index in the list. replace Syntax: replace(list: list, index: int, value: Any) Replaces value at the given index in the list. extend Syntax: extend(list1: list, list2: list, <remove_duplicates: int = False>) Appends to list1 the elements of list2 . Returns list1 . If list1 is a variable, edits the variable. If remove_duplicates is True, removes the list2 elements already in list1 before extending. get Syntax: get(list: list, index: int) Returns the element of the list at the given index. max Syntax: max(list: list, <ignore_not_num: int = False>) Returns the maximum element of the list. Ignores elements that are not numbers if ignore_not_num is True , otherwise crashes if such element exists. min Syntax: min(list: list, <ignore_not_num: int = False>) Returns the minimum element of the list. Ignores elements that are not numbers if ignore_not_num is True , otherwise crashes if such element exists. sort Syntax: sort(value: list, <mode: str = \"timsort\">) Sorts list value according to mode mode . Available modes are: timsort (default), stalin , sleep , miracle and panic . timsort is Python\u2019s default algorithm stalin sends to gulag values that are not sorted (i.e. pop them from the list). Example: [1, 4, 3, 7, 6, 10, 2, 5, 23] will be sorted as [1, 4, 7, 10, 23] . sleep sort take only a list of positive integers. It starts as many threads as elements in the list, and each thread waits for as much seconds as the element. For instance, when the list [5, 2, 3, 0] is passed in sleepsort, it starts by launching 4 threads that wait for 5, 2, 3 and 0 seconds. When a thread finishes to wait, it append its element to the list. Use the mode sleep-verbose to see what\u2019s happening. miracle sort literally waits for a miracle. It checks if the list is sorted, and if it is not, it checks again. If a cosmic ray (or another miracle ) flips the right bits in your RAM so the list is sorted, miraclesort will return the sorted list. panic sort checks if the list is sorted. If so, it returns it. If the list is not sorted, this causes an illegal hardware instruction (Unix and GNU/Linux) or a segfault (Windows). Number operators round Syntax: round(number: int | float, <n_digits: int = 0>) Rounds number to the closest number with n_digits decimals. n_digits may be 0 or negative, in which case the returned type is int . Changed in 0.22.0-beta The round built-in function previously returned int only when n_digits was 0 (now it is the case when n_digits \u2a7d 0) Characters and Unicode Note There\u2019s more in the unicodedata module. ord Syntax: ord(c: str) Returns an integer representing the Unicode code point of that c . c is a string with only one character. Ex: ord('a') returns 97 and ord('\u20ac') returns 8364 . chr Syntax: chr(i: int) Returns the string representing the character whose Unicode code point is the integer i . For example, chr(97) returns the string 'a' , and chr(8364) returns the string '\u20ac' . License __gpl__ Syntax: __gpl__(<print_in_term: int = False>) If print_in_term is True , prints the General Public License 3.0 in the terminal. Otherwise, it opens the GPL in the default system program. Files __path_exists__ Syntax: path_exists(path: str) Returns True ( 1 ) if the path exists, False ( 0 ) otherwise. Technical exit Syntax: exit(<stop_code: int | str = 0>) Just quits the interpreter. clear Syntax: clear() Clears the screen. Returns None . void Syntax: void(*args) Does nothing. Returns None . run Syntax: run(file_name: str) Executes the code in the file file_name . example Syntax: example(<example_name: str | None = None>, <return_example_value: int = False>) Executes the code in the file examples/(example_name).noug . If example_name is None , executes the code in the file example.noug . If return_example_value is True , returns the list value from the example execution. system_call Warning This function may be dangerous, because any system command can be executed. Syntax: system_call(cmd: str) Calls cmd . Prints the result of the command and returnt the stop code as str . __python__ Warning This function may be dangerous, because any Python code can be executed. Syntax: __python__(source: str) Runs Python\u2019s eval(source) . __is_keyword__ Syntax: __is_keyword__(word: str) Check if word is a valid Nougaro keyword . __is_valid_token_type__ Syntax: __is_valid_token_type__(tok_type: str) Checks if tok_type is a valid Nougaro token type, such as 'EE' or 'BITWISENOT'. __test__ Syntax: __test__(<should_print_ok: int = False>, <should_i_return: int = False>) Executes the test file for the Nougaro interpreter. If should_print_ok is True , prints \u201cOK\u201d each times a test was succesful. If should_i_return is true, returns the value of the interpreted file. __py_type__ Syntax: __py_type__(value) Returns the string of Python\u2019s type(value) . For instance, __py_type__(__py_type__) is \"<class 'src.runtime.values.functions.builtin_function.BuiltInFunction'>\" __how_many_lines_of_code__ Syntax: __how_many_lines_of_code__(<print_details: Any = True>) Lets you know how many lines of code there are in Nougaro. If print_details is True, details how many lines of code they are in each file. Mathematical functions Please refer to Math module .","title":"List of built-in functions"},{"location":"0.22/stdlib/02builtin-functions/#list-of-built-in-functions","text":"Note In this page, type of parameters are noted using the param: type syntax (type can eventually be Any ), and optional parameters are noted between <> and their default value are specified with = . Also, *args tells that this function can take any number of arguments.","title":"List of built-in functions"},{"location":"0.22/stdlib/02builtin-functions/#inputoutput","text":"","title":"Input/Output"},{"location":"0.22/stdlib/02builtin-functions/#print","text":"Syntax: print(str: str) . Prints str in console. Returns None. Example: print(\"hello, world!\") .","title":"print"},{"location":"0.22/stdlib/02builtin-functions/#print_ret","text":"Syntax: print_ret(str: str) . Prints str in console and returns it. Example: print_ret(\"hello, world!\") .","title":"print_ret"},{"location":"0.22/stdlib/02builtin-functions/#print_in_red","text":"Syntax: print_in_red(str: str) . Prints str in red in console. Returns None. Example: print_in_red(\"Error: this error is RED\") .","title":"print_in_red"},{"location":"0.22/stdlib/02builtin-functions/#print_in_red_ret","text":"Syntax: print_in_red_ret(str: str) . Prints str in red in console and returns it. Example: print_in_red_ret(\"Error: this error is RED and returned\")","title":"print_in_red_ret"},{"location":"0.22/stdlib/02builtin-functions/#print_in_green","text":"Syntax: print_in_green(str: str) . Prints str in green in console. Returns None. Example: print_in_green(\"Info: this info is GREEN\") .","title":"print_in_green"},{"location":"0.22/stdlib/02builtin-functions/#print_in_green_ret","text":"Syntax: print_in_green_ret(str: str) . Prints str in green in console and returns it. Example: print_in_green_ret(\"Info: this info is GREEN and returned\")","title":"print_in_green_ret"},{"location":"0.22/stdlib/02builtin-functions/#input","text":"Syntax: input(<text_to_display: str = \"\">) . Inputs a str. If text_to_display is specified, it is printed as a prompt.","title":"input"},{"location":"0.22/stdlib/02builtin-functions/#input_int","text":"Syntax: input_int(<text_to_display: str = \"\">) . Inputs an int. If text_to_display is specified, it is printed as a prompt.","title":"input_int"},{"location":"0.22/stdlib/02builtin-functions/#input_num","text":"Syntax: input_num(<text_to_display: str = \"\">) . Inputs an int or a float. If text_to_display is specified, it is printed as a prompt.","title":"input_num"},{"location":"0.22/stdlib/02builtin-functions/#types","text":"Note Python isinstance() returns True if value is an object of the given type.","title":"Types"},{"location":"0.22/stdlib/02builtin-functions/#type","text":"Syntax: type(value: Any) Returns a str of the internal type of the value. It can be str , int , float , list , func , module , ...","title":"type"},{"location":"0.22/stdlib/02builtin-functions/#is_int","text":"Syntax: is_int(value: Any) Returns True if value is an integer , False if it is not. Corresponds to isinstance(value, int) .","title":"is_int"},{"location":"0.22/stdlib/02builtin-functions/#is_float","text":"Syntax: is_float(value: Any) Returns True if value is a float , False if it is not. Corresponds to isinstance(value, float) .","title":"is_float"},{"location":"0.22/stdlib/02builtin-functions/#is_num","text":"Syntax: is_num(value: Any) Returns True if value is a number , False if it is not. Corresponds to isinstance(value, float) or isinstance(value, int) .","title":"is_num"},{"location":"0.22/stdlib/02builtin-functions/#is_str","text":"Syntax: is_str(value: Any) Returns True if value is a string , False if it is not. Corresponds to isinstance(value, str) .","title":"is_str"},{"location":"0.22/stdlib/02builtin-functions/#is_list","text":"Syntax: is_list(value: Any) Returns True if value is a list , False if it is not. Corresponds to isinstance(value, list) .","title":"is_list"},{"location":"0.22/stdlib/02builtin-functions/#is_func","text":"Syntax: is_func(value: Any) Returns True if value is a function , False if it is not. Corresponds to isinstance(value, BaseFunction) where BaseFunction is function, method and builtin function.","title":"is_func"},{"location":"0.22/stdlib/02builtin-functions/#is_module","text":"Syntax: is_module(value: Any) Returns True if value is a module , False if it is not. Corresponds to isinstance(value, module) . Example: import math; is_module(math) will be True , but is_module(3.2) will be False .","title":"is_module"},{"location":"0.22/stdlib/02builtin-functions/#is_none","text":"Syntax: is_none(value: Any) Returns True if value is None , False if it is not. Corresponds to isinstance(value, NoneValue) or value is None .","title":"is_none"},{"location":"0.22/stdlib/02builtin-functions/#is_constructor","text":"Added in 0.20.0-beta Syntax: is_constructor(value: Any) Returns True if value is a constructor , False if it is not. Corresponds to isinstance(value, Constructor) .","title":"is_constructor"},{"location":"0.22/stdlib/02builtin-functions/#is_object","text":"Added in 0.20.0-beta Syntax: is_object(value: Any) Returns True if value is an object , False if it is not. Corresponds to isinstance(value, object) . Note: in Nougaro, everything is not an object!","title":"is_object"},{"location":"0.22/stdlib/02builtin-functions/#type-conversions","text":"","title":"Type conversions"},{"location":"0.22/stdlib/02builtin-functions/#str","text":"Syntax: str(value: Any) Converts value to string (may return an error).","title":"str"},{"location":"0.22/stdlib/02builtin-functions/#int","text":"Syntax: str(value: Any) Converts value to int (may return an error).","title":"int"},{"location":"0.22/stdlib/02builtin-functions/#float","text":"Syntax: str(value: Any) Converts value to float (may return an error).","title":"float"},{"location":"0.22/stdlib/02builtin-functions/#list","text":"Syntax: str(value: Any) Converts value to list (may return an error).","title":"list"},{"location":"0.22/stdlib/02builtin-functions/#string-and-lists-operators","text":"","title":"String and lists operators"},{"location":"0.22/stdlib/02builtin-functions/#upper","text":"Syntax: upper(value: str) Returns upper-cased string. Example: upper('nougaro') returns 'NOUGARO' .","title":"upper"},{"location":"0.22/stdlib/02builtin-functions/#lower","text":"Syntax: lower(value: str) Returns lower-cased string. Example: lower('NOUGARO') returns 'nougaro' .","title":"lower"},{"location":"0.22/stdlib/02builtin-functions/#split","text":"Syntax: split(value: str, <char: str = \" \">) Returns splitted string. For example, split('a b c') returns ['a', 'b', 'c'] ; split('a b c', 'b') returns ['a ', ' c'] .","title":"split"},{"location":"0.22/stdlib/02builtin-functions/#startswith","text":"Syntax: startswith(value: str, substring: str) Returns True if value starts with substring . Example: \"nougaro\" starts with \"noug\" , but \"canal du midi\" does not start with \"minimes\" .","title":"startswith"},{"location":"0.22/stdlib/02builtin-functions/#endswith","text":"Syntax: endswith(value: str, substring: str) Returns True if value ends with substring . Example: \"nougaro\" ends with \"garo\" , but \"canal du midi\" does not end with \"minimes\" .","title":"endswith"},{"location":"0.22/stdlib/02builtin-functions/#len","text":"Syntax: len(value: list | str) Returns the number of elements in a list (i.e. its length), or the number of chars in a str.","title":"len"},{"location":"0.22/stdlib/02builtin-functions/#reverse","text":"Syntax: reverse(value: list | str) Reverses list or string value by reference and returns the result. Example: reverse([1, 2, 3]) is [3, 2, 1] .","title":"reverse"},{"location":"0.22/stdlib/02builtin-functions/#append","text":"Syntax: append(list: list, value: Any) Appends value at the end of the list. Returns a list. If the list is a variable, edits the variable.","title":"append"},{"location":"0.22/stdlib/02builtin-functions/#pop","text":"Syntax: pop(list: list, <index: int = -1>) : Deletes value at given index. Returns the popped element. If the list is a variable, edits the variable. If index is not given, the last element of the list is popped.","title":"pop"},{"location":"0.22/stdlib/02builtin-functions/#insert","text":"Syntax: insert(list: list, value: Any, <index: int = -1>) Inserts value at the given index in the list.","title":"insert"},{"location":"0.22/stdlib/02builtin-functions/#replace","text":"Syntax: replace(list: list, index: int, value: Any) Replaces value at the given index in the list.","title":"replace"},{"location":"0.22/stdlib/02builtin-functions/#extend","text":"Syntax: extend(list1: list, list2: list, <remove_duplicates: int = False>) Appends to list1 the elements of list2 . Returns list1 . If list1 is a variable, edits the variable. If remove_duplicates is True, removes the list2 elements already in list1 before extending.","title":"extend"},{"location":"0.22/stdlib/02builtin-functions/#get","text":"Syntax: get(list: list, index: int) Returns the element of the list at the given index.","title":"get"},{"location":"0.22/stdlib/02builtin-functions/#max","text":"Syntax: max(list: list, <ignore_not_num: int = False>) Returns the maximum element of the list. Ignores elements that are not numbers if ignore_not_num is True , otherwise crashes if such element exists.","title":"max"},{"location":"0.22/stdlib/02builtin-functions/#min","text":"Syntax: min(list: list, <ignore_not_num: int = False>) Returns the minimum element of the list. Ignores elements that are not numbers if ignore_not_num is True , otherwise crashes if such element exists.","title":"min"},{"location":"0.22/stdlib/02builtin-functions/#sort","text":"Syntax: sort(value: list, <mode: str = \"timsort\">) Sorts list value according to mode mode . Available modes are: timsort (default), stalin , sleep , miracle and panic . timsort is Python\u2019s default algorithm stalin sends to gulag values that are not sorted (i.e. pop them from the list). Example: [1, 4, 3, 7, 6, 10, 2, 5, 23] will be sorted as [1, 4, 7, 10, 23] . sleep sort take only a list of positive integers. It starts as many threads as elements in the list, and each thread waits for as much seconds as the element. For instance, when the list [5, 2, 3, 0] is passed in sleepsort, it starts by launching 4 threads that wait for 5, 2, 3 and 0 seconds. When a thread finishes to wait, it append its element to the list. Use the mode sleep-verbose to see what\u2019s happening. miracle sort literally waits for a miracle. It checks if the list is sorted, and if it is not, it checks again. If a cosmic ray (or another miracle ) flips the right bits in your RAM so the list is sorted, miraclesort will return the sorted list. panic sort checks if the list is sorted. If so, it returns it. If the list is not sorted, this causes an illegal hardware instruction (Unix and GNU/Linux) or a segfault (Windows).","title":"sort"},{"location":"0.22/stdlib/02builtin-functions/#number-operators","text":"","title":"Number operators"},{"location":"0.22/stdlib/02builtin-functions/#round","text":"Syntax: round(number: int | float, <n_digits: int = 0>) Rounds number to the closest number with n_digits decimals. n_digits may be 0 or negative, in which case the returned type is int . Changed in 0.22.0-beta The round built-in function previously returned int only when n_digits was 0 (now it is the case when n_digits \u2a7d 0)","title":"round"},{"location":"0.22/stdlib/02builtin-functions/#characters-and-unicode","text":"Note There\u2019s more in the unicodedata module.","title":"Characters and Unicode"},{"location":"0.22/stdlib/02builtin-functions/#ord","text":"Syntax: ord(c: str) Returns an integer representing the Unicode code point of that c . c is a string with only one character. Ex: ord('a') returns 97 and ord('\u20ac') returns 8364 .","title":"ord"},{"location":"0.22/stdlib/02builtin-functions/#chr","text":"Syntax: chr(i: int) Returns the string representing the character whose Unicode code point is the integer i . For example, chr(97) returns the string 'a' , and chr(8364) returns the string '\u20ac' .","title":"chr"},{"location":"0.22/stdlib/02builtin-functions/#license","text":"","title":"License"},{"location":"0.22/stdlib/02builtin-functions/#__gpl__","text":"Syntax: __gpl__(<print_in_term: int = False>) If print_in_term is True , prints the General Public License 3.0 in the terminal. Otherwise, it opens the GPL in the default system program.","title":"__gpl__"},{"location":"0.22/stdlib/02builtin-functions/#files","text":"","title":"Files"},{"location":"0.22/stdlib/02builtin-functions/#__path_exists__","text":"Syntax: path_exists(path: str) Returns True ( 1 ) if the path exists, False ( 0 ) otherwise.","title":"__path_exists__"},{"location":"0.22/stdlib/02builtin-functions/#technical","text":"","title":"Technical"},{"location":"0.22/stdlib/02builtin-functions/#exit","text":"Syntax: exit(<stop_code: int | str = 0>) Just quits the interpreter.","title":"exit"},{"location":"0.22/stdlib/02builtin-functions/#clear","text":"Syntax: clear() Clears the screen. Returns None .","title":"clear"},{"location":"0.22/stdlib/02builtin-functions/#void","text":"Syntax: void(*args) Does nothing. Returns None .","title":"void"},{"location":"0.22/stdlib/02builtin-functions/#run","text":"Syntax: run(file_name: str) Executes the code in the file file_name .","title":"run"},{"location":"0.22/stdlib/02builtin-functions/#example","text":"Syntax: example(<example_name: str | None = None>, <return_example_value: int = False>) Executes the code in the file examples/(example_name).noug . If example_name is None , executes the code in the file example.noug . If return_example_value is True , returns the list value from the example execution.","title":"example"},{"location":"0.22/stdlib/02builtin-functions/#system_call","text":"Warning This function may be dangerous, because any system command can be executed. Syntax: system_call(cmd: str) Calls cmd . Prints the result of the command and returnt the stop code as str .","title":"system_call"},{"location":"0.22/stdlib/02builtin-functions/#__python__","text":"Warning This function may be dangerous, because any Python code can be executed. Syntax: __python__(source: str) Runs Python\u2019s eval(source) .","title":"__python__"},{"location":"0.22/stdlib/02builtin-functions/#__is_keyword__","text":"Syntax: __is_keyword__(word: str) Check if word is a valid Nougaro keyword .","title":"__is_keyword__"},{"location":"0.22/stdlib/02builtin-functions/#__is_valid_token_type__","text":"Syntax: __is_valid_token_type__(tok_type: str) Checks if tok_type is a valid Nougaro token type, such as 'EE' or 'BITWISENOT'.","title":"__is_valid_token_type__"},{"location":"0.22/stdlib/02builtin-functions/#__test__","text":"Syntax: __test__(<should_print_ok: int = False>, <should_i_return: int = False>) Executes the test file for the Nougaro interpreter. If should_print_ok is True , prints \u201cOK\u201d each times a test was succesful. If should_i_return is true, returns the value of the interpreted file.","title":"__test__"},{"location":"0.22/stdlib/02builtin-functions/#__py_type__","text":"Syntax: __py_type__(value) Returns the string of Python\u2019s type(value) . For instance, __py_type__(__py_type__) is \"<class 'src.runtime.values.functions.builtin_function.BuiltInFunction'>\"","title":"__py_type__"},{"location":"0.22/stdlib/02builtin-functions/#__how_many_lines_of_code__","text":"Syntax: __how_many_lines_of_code__(<print_details: Any = True>) Lets you know how many lines of code there are in Nougaro. If print_details is True, details how many lines of code they are in each file.","title":"__how_many_lines_of_code__"},{"location":"0.22/stdlib/02builtin-functions/#mathematical-functions","text":"Please refer to Math module .","title":"Mathematical functions"},{"location":"0.22/stdlib/modules/","text":"Modules Modules allow you to spend less time coding, and often implement things that would be usually undoable in Nougaro. You can import a module using the import keyword. Here is the list of available Modules in Nougaro: Debug Hello (just prints \u201cHello, world!\u201d when imported) Lorem Math Noug Version Random Statistics Time Unicodedata Webbrowser","title":"Modules"},{"location":"0.22/stdlib/modules/#modules","text":"Modules allow you to spend less time coding, and often implement things that would be usually undoable in Nougaro. You can import a module using the import keyword. Here is the list of available Modules in Nougaro: Debug Hello (just prints \u201cHello, world!\u201d when imported) Lorem Math Noug Version Random Statistics Time Unicodedata Webbrowser","title":"Modules"},{"location":"0.22/stdlib/modules/debug/","text":"Debug Source code Debug is a lib that contains some debugging tools. Constants debug.is_debug_enabled : 1 if DEBUG mode is enabled, else 0 debug.should_print_context : 1 if PRINT CONTEXT debug option is enabled, else 0 debug.should_print_time (new in 0.20.0-beta): 1 if PRINT TIME debug option is enabled, else 0 Functions debug.debug_mode_enable Syntax: debug.debug_mode_enable Enables DEBUG mode. debug.enable Alias for debug.debug_mode_enable debug.debug_mode_disable Syntax: debug.debug_mode_disable Disables DEBUG mode. debug.disable Alias for debug.debug_mode_disable debug.print_context Syntax: debug.print_context Enables PRINT CONTEXT debug option. debug.stop_print_context Syntax: debug.stop_print_context Disables PRINT CONTEXT debug option. debug.print_time Added in 0.20.0-beta Syntax: debug.print_time Enables PRINT TIME debug option. debug.stop_print_time Added in 0.20.0-beta Syntax: debug.stop_print_time Disables PRINT TIME debug option. debug.enable_all Changed in 0.20.0-beta Now also enables PRINT TIME debug option. Syntax: debug.enable_all Enables DEBUG mode with all its options debug.disable_all Changed in 0.20.0-beta Now also disables PRINT TIME debug option. Syntax: debug.disable_all Disables DEBUG mode and all its options.","title":"Debug"},{"location":"0.22/stdlib/modules/debug/#debug","text":"Source code Debug is a lib that contains some debugging tools.","title":"Debug"},{"location":"0.22/stdlib/modules/debug/#constants","text":"debug.is_debug_enabled : 1 if DEBUG mode is enabled, else 0 debug.should_print_context : 1 if PRINT CONTEXT debug option is enabled, else 0 debug.should_print_time (new in 0.20.0-beta): 1 if PRINT TIME debug option is enabled, else 0","title":"Constants"},{"location":"0.22/stdlib/modules/debug/#functions","text":"","title":"Functions"},{"location":"0.22/stdlib/modules/debug/#debugdebug_mode_enable","text":"Syntax: debug.debug_mode_enable Enables DEBUG mode.","title":"debug.debug_mode_enable"},{"location":"0.22/stdlib/modules/debug/#debugenable","text":"Alias for debug.debug_mode_enable","title":"debug.enable"},{"location":"0.22/stdlib/modules/debug/#debugdebug_mode_disable","text":"Syntax: debug.debug_mode_disable Disables DEBUG mode.","title":"debug.debug_mode_disable"},{"location":"0.22/stdlib/modules/debug/#debugdisable","text":"Alias for debug.debug_mode_disable","title":"debug.disable"},{"location":"0.22/stdlib/modules/debug/#debugprint_context","text":"Syntax: debug.print_context Enables PRINT CONTEXT debug option.","title":"debug.print_context"},{"location":"0.22/stdlib/modules/debug/#debugstop_print_context","text":"Syntax: debug.stop_print_context Disables PRINT CONTEXT debug option.","title":"debug.stop_print_context"},{"location":"0.22/stdlib/modules/debug/#debugprint_time","text":"Added in 0.20.0-beta Syntax: debug.print_time Enables PRINT TIME debug option.","title":"debug.print_time"},{"location":"0.22/stdlib/modules/debug/#debugstop_print_time","text":"Added in 0.20.0-beta Syntax: debug.stop_print_time Disables PRINT TIME debug option.","title":"debug.stop_print_time"},{"location":"0.22/stdlib/modules/debug/#debugenable_all","text":"Changed in 0.20.0-beta Now also enables PRINT TIME debug option. Syntax: debug.enable_all Enables DEBUG mode with all its options","title":"debug.enable_all"},{"location":"0.22/stdlib/modules/debug/#debugdisable_all","text":"Changed in 0.20.0-beta Now also disables PRINT TIME debug option. Syntax: debug.disable_all Disables DEBUG mode and all its options.","title":"debug.disable_all"},{"location":"0.22/stdlib/modules/lorem/","text":"Lorem Source code Lorem is a lib to generate Lorem Ipsum texts (dummy texts). Function lorem.ipsum Syntax: lorem.ipsum(paragraphs: int) Generate a random Lorem Ipsum text (dummy text) with as many paragraphs as specified in paragraphs .","title":"Lorem"},{"location":"0.22/stdlib/modules/lorem/#lorem","text":"Source code Lorem is a lib to generate Lorem Ipsum texts (dummy texts).","title":"Lorem"},{"location":"0.22/stdlib/modules/lorem/#function","text":"","title":"Function"},{"location":"0.22/stdlib/modules/lorem/#loremipsum","text":"Syntax: lorem.ipsum(paragraphs: int) Generate a random Lorem Ipsum text (dummy text) with as many paragraphs as specified in paragraphs .","title":"lorem.ipsum"},{"location":"0.22/stdlib/modules/math/","text":"Math Source code The math module can be imported with the statement import math . The math module is used to do math. To do statistics, use the statistics module. Constants math.pi : Pi . \\pi = 3.141592653589793 math.tau : Tau . \\tau = 6.283185307179586 math.sqrt_pi : square root of pi ( math.sqrt(math.pi) ). \\sqrt\\pi = 1.7724538509055159 math.sqrt_tau : square root of tau ( math.sqrt(math.tau) ). \\sqrt\\tau = 2.5066282746310002 math.e : Euler's number . e = 2.718281828459045 Functions math.sqrt Syntax: math.sqrt(n) Returns \\sqrt{n} (square root of n ), n \\in \\mathbb{R}_+ math.isqrt Syntax: math.isqrt(n) Returns \\left\\lfloor\\sqrt{n}\\right\\rfloor (integer square root of n ), n \\in \\mathbb{N} math.root Syntax: math.root(n, k) Returns the \\sqrt[k]{n} ( k -th root of n ), n \\in \\mathbb{R}_+, k \\in \\mathbb{R} math.iroot Syntax: math.iroot(n, k) Returns \\left\\lfloor\\sqrt[k]{n}\\right\\rfloor (integer k -th root of n ), n \\in \\mathbb{R}_+, k \\in \\mathbb{R} math.degrees Syntax: math.degrees(angle) Transforms a radian angle to a degree angle. \\verb|angle| \\in \\mathbb{R} math.radians Syntax: math.radians(angle) Transform a degree angle to a radian angle. \\verb|angle| \\in \\mathbb{R} math.sin Syntax: math.sin(angle) Returns sine of an angle in radians. \\verb|angle| \\in \\mathbb{R} math.cos Syntax: math.cos(angle) Returns cosine of an angle in radians. \\verb|angle| \\in \\mathbb{R} math.tan Syntax: math.tan(angle) Returns tangent of an angle in radians. \\verb|angle| \\in \\mathbb{R} math.asin Syntax: math.asin(sin) Returns arcsine of an sin (result in radians). \\verb|sin| \\in [-1, 1] math.acos Syntax: math.acos(cos) Returns arccosine of an cos (result in radians). \\verb|cos| \\in [-1, 1] math.atan Syntax: math.atan(tan) Returns arctangent of an tan (result in radians). \\verb|tan| \\in \\mathbb{R} math.abs Syntax: math.abs(n) Returns \\left|n\\right| (absolute value of n ), n \\in \\mathbb{R} math.log Syntax: math.log(n, <base>) Returns the natural logarithm ( base = e ) of n if no base is given, or the logarithm of n in the given base. n, base \\in \\mathbb{R} math.log2 Syntax: math.log2(n) Same as math.log(n, 2) . n \\in \\mathbb{R} math.factorial Added in 0.19.0-beta Syntax: math.factorial(n) Returns n! ( factorial of n ). n \\in \\mathbb{N}","title":"Math"},{"location":"0.22/stdlib/modules/math/#math","text":"Source code The math module can be imported with the statement import math . The math module is used to do math. To do statistics, use the statistics module.","title":"Math"},{"location":"0.22/stdlib/modules/math/#constants","text":"math.pi : Pi . \\pi = 3.141592653589793 math.tau : Tau . \\tau = 6.283185307179586 math.sqrt_pi : square root of pi ( math.sqrt(math.pi) ). \\sqrt\\pi = 1.7724538509055159 math.sqrt_tau : square root of tau ( math.sqrt(math.tau) ). \\sqrt\\tau = 2.5066282746310002 math.e : Euler's number . e = 2.718281828459045","title":"Constants"},{"location":"0.22/stdlib/modules/math/#functions","text":"","title":"Functions"},{"location":"0.22/stdlib/modules/math/#mathsqrt","text":"Syntax: math.sqrt(n) Returns \\sqrt{n} (square root of n ), n \\in \\mathbb{R}_+","title":"math.sqrt"},{"location":"0.22/stdlib/modules/math/#mathisqrt","text":"Syntax: math.isqrt(n) Returns \\left\\lfloor\\sqrt{n}\\right\\rfloor (integer square root of n ), n \\in \\mathbb{N}","title":"math.isqrt"},{"location":"0.22/stdlib/modules/math/#mathroot","text":"Syntax: math.root(n, k) Returns the \\sqrt[k]{n} ( k -th root of n ), n \\in \\mathbb{R}_+, k \\in \\mathbb{R}","title":"math.root"},{"location":"0.22/stdlib/modules/math/#mathiroot","text":"Syntax: math.iroot(n, k) Returns \\left\\lfloor\\sqrt[k]{n}\\right\\rfloor (integer k -th root of n ), n \\in \\mathbb{R}_+, k \\in \\mathbb{R}","title":"math.iroot"},{"location":"0.22/stdlib/modules/math/#mathdegrees","text":"Syntax: math.degrees(angle) Transforms a radian angle to a degree angle. \\verb|angle| \\in \\mathbb{R}","title":"math.degrees"},{"location":"0.22/stdlib/modules/math/#mathradians","text":"Syntax: math.radians(angle) Transform a degree angle to a radian angle. \\verb|angle| \\in \\mathbb{R}","title":"math.radians"},{"location":"0.22/stdlib/modules/math/#mathsin","text":"Syntax: math.sin(angle) Returns sine of an angle in radians. \\verb|angle| \\in \\mathbb{R}","title":"math.sin"},{"location":"0.22/stdlib/modules/math/#mathcos","text":"Syntax: math.cos(angle) Returns cosine of an angle in radians. \\verb|angle| \\in \\mathbb{R}","title":"math.cos"},{"location":"0.22/stdlib/modules/math/#mathtan","text":"Syntax: math.tan(angle) Returns tangent of an angle in radians. \\verb|angle| \\in \\mathbb{R}","title":"math.tan"},{"location":"0.22/stdlib/modules/math/#mathasin","text":"Syntax: math.asin(sin) Returns arcsine of an sin (result in radians). \\verb|sin| \\in [-1, 1]","title":"math.asin"},{"location":"0.22/stdlib/modules/math/#mathacos","text":"Syntax: math.acos(cos) Returns arccosine of an cos (result in radians). \\verb|cos| \\in [-1, 1]","title":"math.acos"},{"location":"0.22/stdlib/modules/math/#mathatan","text":"Syntax: math.atan(tan) Returns arctangent of an tan (result in radians). \\verb|tan| \\in \\mathbb{R}","title":"math.atan"},{"location":"0.22/stdlib/modules/math/#mathabs","text":"Syntax: math.abs(n) Returns \\left|n\\right| (absolute value of n ), n \\in \\mathbb{R}","title":"math.abs"},{"location":"0.22/stdlib/modules/math/#mathlog","text":"Syntax: math.log(n, <base>) Returns the natural logarithm ( base = e ) of n if no base is given, or the logarithm of n in the given base. n, base \\in \\mathbb{R}","title":"math.log"},{"location":"0.22/stdlib/modules/math/#mathlog2","text":"Syntax: math.log2(n) Same as math.log(n, 2) . n \\in \\mathbb{R}","title":"math.log2"},{"location":"0.22/stdlib/modules/math/#mathfactorial","text":"Added in 0.19.0-beta Syntax: math.factorial(n) Returns n! ( factorial of n ). n \\in \\mathbb{N}","title":"math.factorial"},{"location":"0.22/stdlib/modules/noug_version/","text":"Noug Version Source code The noug_version module can be imported with the statement import noug_version . The noug_version module is used to have better informations about the current Nougaro version. Note Nougaro uses semantic versionning . We recommend you to read the whole semver specification. Constants Examples are given considering the version 3.14.15-rc.92 noug_version.major : integer of the MAJOR version ( 3 ) noug_version.minor : integer of the MINOR version ( 14 ) noug_version.patch : integer of the PATCH version ( 15 ) noug_version.phase : string of the PHASE name ( \"rc\" ). Usually alpha , beta , rc , stable . noug_version.release_serial : integer of the MINOR INDEV version ( 92 ). It resets when the phase switches back to stable . When the version is under the form 3.14.15-stable or 0.16.0-beta , this number is 0 . noug_version.version_list : list under the form [major, minor, patch, phase, release_serial] (in our example: [3, 14, 15, \"rc\", 92] ) Changed in 0.19.0 and 0.20.0 noug_version.release_serial is the new name for noug_version.phase_minor in 0.19.0-beta. noug_version.phase_minor has been removed in 0.20.0-beta. Functions noug_version.clean_version_for_gh Added in 0.19.0-beta Syntax: noug_version.clean_version_for_gh() Generates a beautiful str for the GitHub issues or PRs.","title":"Noug Version"},{"location":"0.22/stdlib/modules/noug_version/#noug-version","text":"Source code The noug_version module can be imported with the statement import noug_version . The noug_version module is used to have better informations about the current Nougaro version. Note Nougaro uses semantic versionning . We recommend you to read the whole semver specification.","title":"Noug Version"},{"location":"0.22/stdlib/modules/noug_version/#constants","text":"Examples are given considering the version 3.14.15-rc.92 noug_version.major : integer of the MAJOR version ( 3 ) noug_version.minor : integer of the MINOR version ( 14 ) noug_version.patch : integer of the PATCH version ( 15 ) noug_version.phase : string of the PHASE name ( \"rc\" ). Usually alpha , beta , rc , stable . noug_version.release_serial : integer of the MINOR INDEV version ( 92 ). It resets when the phase switches back to stable . When the version is under the form 3.14.15-stable or 0.16.0-beta , this number is 0 . noug_version.version_list : list under the form [major, minor, patch, phase, release_serial] (in our example: [3, 14, 15, \"rc\", 92] ) Changed in 0.19.0 and 0.20.0 noug_version.release_serial is the new name for noug_version.phase_minor in 0.19.0-beta. noug_version.phase_minor has been removed in 0.20.0-beta.","title":"Constants"},{"location":"0.22/stdlib/modules/noug_version/#functions","text":"","title":"Functions"},{"location":"0.22/stdlib/modules/noug_version/#noug_versionclean_version_for_gh","text":"Added in 0.19.0-beta Syntax: noug_version.clean_version_for_gh() Generates a beautiful str for the GitHub issues or PRs.","title":"noug_version.clean_version_for_gh"},{"location":"0.22/stdlib/modules/random/","text":"Random Source code The random module can be imported with the statement import random . The random module is used to generate random numbers. Functions random.randint Syntax: random.randint(a: int, b: int) Generates a random integer between a and b . a and b must be integers . The condition a <= b MUST be verified. random.random Syntax: random.random Generates a random floating number between 0.0000000000000000 and 1.0000000000000000. random.choice Syntax: random.choice(list) Returns a random element of the list . random.shuffle Syntax: random.shuffle(list) Shuffles (by reference) and returns list . random.seed Syntax: random.seed(int) Sets the seed to generate numbers to int .","title":"Random"},{"location":"0.22/stdlib/modules/random/#random","text":"Source code The random module can be imported with the statement import random . The random module is used to generate random numbers.","title":"Random"},{"location":"0.22/stdlib/modules/random/#functions","text":"","title":"Functions"},{"location":"0.22/stdlib/modules/random/#randomrandint","text":"Syntax: random.randint(a: int, b: int) Generates a random integer between a and b . a and b must be integers . The condition a <= b MUST be verified.","title":"random.randint"},{"location":"0.22/stdlib/modules/random/#randomrandom","text":"Syntax: random.random Generates a random floating number between 0.0000000000000000 and 1.0000000000000000.","title":"random.random"},{"location":"0.22/stdlib/modules/random/#randomchoice","text":"Syntax: random.choice(list) Returns a random element of the list .","title":"random.choice"},{"location":"0.22/stdlib/modules/random/#randomshuffle","text":"Syntax: random.shuffle(list) Shuffles (by reference) and returns list .","title":"random.shuffle"},{"location":"0.22/stdlib/modules/random/#randomseed","text":"Syntax: random.seed(int) Sets the seed to generate numbers to int .","title":"random.seed"},{"location":"0.22/stdlib/modules/statistics/","text":"Statistics Source code The statistics module can be imported with the statement import statistics . The statistics module is used to do statistics. To do math, use the math module. Functions statistics.mean Syntax: statistics.mean(list) Calculates the mean of a list of numbers. statistics.geometric_mean Syntax: statistics.geometric_mean(list) Calculates the geometric mean of a list of positive numbers. statistics.harmonic_mean Syntax: statistics.harmonic_mean Calculates the harmonic mean of a list of positive numbers. statistics.median Syntax: statistics.median(list) Calculates the median of a list of numbers. statistics.quantiles Syntax: statistics.quantiles(list, n=4, method='exclusive') Cuts a list of numbers in n parts and returns a list of the values where the list was cut, using exclusive or inclusive method. n and method are optional. Disclamer from the Python source code Notes on methods for computing quantiles There is no one perfect way to compute quantiles. Here we offer two methods that serve common needs. Most other packages surveyed offered at least one or both of these two, making them \"standard\" in the sense of \"widely-adopted and reproducible\". They are also easy to explain, easy to compute manually, and have straight-forward interpretations that aren't surprising. The default method is known as \"R6\", \"PERCENTILE.EXC\", or \"expected value of rank order statistics\". The alternative method is known as \"R7\", \"PERCENTILE.INC\", or \"mode of rank order statistics\". For sample data where there is a positive probability for values beyond the range of the data, the R6 exclusive method is a reasonable choice. Consider a random sample of nine values from a population with a uniform distribution from 0.0 to 1.0. The distribution of the third ranked sample point is described by betavariate(alpha=3, beta=7) which has mode=0.250, median=0.286, and mean=0.300. Only the latter (which corresponds with R6) gives the desired cut point with 30% of the population falling below that value, making it comparable to a result from an inv_cdf() function. The R6 exclusive method is also idempotent. For describing population data where the end points are known to be included in the data, the R7 inclusive method is a reasonable choice. Instead of the mean, it uses the mode of the beta distribution for the interior points. Per Hyndman & Fan, \"One nice property is that the vertices of Q7(p) divide the range into n - 1 intervals, and exactly 100p% of the intervals lie to the left of Q7(p) and 100(1 - p)% of the intervals lie to the right of Q7(p).\" If needed, other methods could be added. However, for now, the position is that fewer options make for easier choices and that external packages can be used for anything more advanced. statistics.scope(list) Syntax: statistics.scope(list) Calculates the scope of a list of numbers: max(list) - min(list) . statistics.mode(list) Syntax: statistics.mode(list) Calculates the mode of a list of numbers, i.e. the most common value. statistics.multimode(value) Syntax: statistics.multimode(value) Calculates the modes of a list or a str, i.e. the most common values. It returns a list.","title":"Statistics"},{"location":"0.22/stdlib/modules/statistics/#statistics","text":"Source code The statistics module can be imported with the statement import statistics . The statistics module is used to do statistics. To do math, use the math module.","title":"Statistics"},{"location":"0.22/stdlib/modules/statistics/#functions","text":"","title":"Functions"},{"location":"0.22/stdlib/modules/statistics/#statisticsmean","text":"Syntax: statistics.mean(list) Calculates the mean of a list of numbers.","title":"statistics.mean"},{"location":"0.22/stdlib/modules/statistics/#statisticsgeometric_mean","text":"Syntax: statistics.geometric_mean(list) Calculates the geometric mean of a list of positive numbers.","title":"statistics.geometric_mean"},{"location":"0.22/stdlib/modules/statistics/#statisticsharmonic_mean","text":"Syntax: statistics.harmonic_mean Calculates the harmonic mean of a list of positive numbers.","title":"statistics.harmonic_mean"},{"location":"0.22/stdlib/modules/statistics/#statisticsmedian","text":"Syntax: statistics.median(list) Calculates the median of a list of numbers.","title":"statistics.median"},{"location":"0.22/stdlib/modules/statistics/#statisticsquantiles","text":"Syntax: statistics.quantiles(list, n=4, method='exclusive') Cuts a list of numbers in n parts and returns a list of the values where the list was cut, using exclusive or inclusive method. n and method are optional. Disclamer from the Python source code","title":"statistics.quantiles"},{"location":"0.22/stdlib/modules/statistics/#notes-on-methods-for-computing-quantiles","text":"There is no one perfect way to compute quantiles. Here we offer two methods that serve common needs. Most other packages surveyed offered at least one or both of these two, making them \"standard\" in the sense of \"widely-adopted and reproducible\". They are also easy to explain, easy to compute manually, and have straight-forward interpretations that aren't surprising. The default method is known as \"R6\", \"PERCENTILE.EXC\", or \"expected value of rank order statistics\". The alternative method is known as \"R7\", \"PERCENTILE.INC\", or \"mode of rank order statistics\". For sample data where there is a positive probability for values beyond the range of the data, the R6 exclusive method is a reasonable choice. Consider a random sample of nine values from a population with a uniform distribution from 0.0 to 1.0. The distribution of the third ranked sample point is described by betavariate(alpha=3, beta=7) which has mode=0.250, median=0.286, and mean=0.300. Only the latter (which corresponds with R6) gives the desired cut point with 30% of the population falling below that value, making it comparable to a result from an inv_cdf() function. The R6 exclusive method is also idempotent. For describing population data where the end points are known to be included in the data, the R7 inclusive method is a reasonable choice. Instead of the mean, it uses the mode of the beta distribution for the interior points. Per Hyndman & Fan, \"One nice property is that the vertices of Q7(p) divide the range into n - 1 intervals, and exactly 100p% of the intervals lie to the left of Q7(p) and 100(1 - p)% of the intervals lie to the right of Q7(p).\" If needed, other methods could be added. However, for now, the position is that fewer options make for easier choices and that external packages can be used for anything more advanced.","title":"Notes on methods for computing quantiles"},{"location":"0.22/stdlib/modules/statistics/#statisticsscopelist","text":"Syntax: statistics.scope(list) Calculates the scope of a list of numbers: max(list) - min(list) .","title":"statistics.scope(list)"},{"location":"0.22/stdlib/modules/statistics/#statisticsmodelist","text":"Syntax: statistics.mode(list) Calculates the mode of a list of numbers, i.e. the most common value.","title":"statistics.mode(list)"},{"location":"0.22/stdlib/modules/statistics/#statisticsmultimodevalue","text":"Syntax: statistics.multimode(value) Calculates the modes of a list or a str, i.e. the most common values. It returns a list.","title":"statistics.multimode(value)"},{"location":"0.22/stdlib/modules/time/","text":"Time Source code The time module can be imported with the statement import time . The time module is used to sleep for seconds or milliseconds, and to know current time, timezone and system\u2019s epoch. Constants time.timezone : the timezone (number of seconds to add to GMT) Functions time.sleep Syntax: time.sleep(seconds) Pauses the program for seconds ( int or float ) and do nothing. Returns None . time.sleep_milliseconds Syntax: time.sleep_milliseconds(milliseconds) Pauses the program for milliseconds ( integer ) and do nothing. Returns None . time.time Syntax: time.time() Returns the float value of the time in seconds since the Epoch (system-dependent, check your epoch with time.epoch() ). time.epoch Syntax: time.epoch() Returns the str value of the Epoch of your system.","title":"Time"},{"location":"0.22/stdlib/modules/time/#time","text":"Source code The time module can be imported with the statement import time . The time module is used to sleep for seconds or milliseconds, and to know current time, timezone and system\u2019s epoch.","title":"Time"},{"location":"0.22/stdlib/modules/time/#constants","text":"time.timezone : the timezone (number of seconds to add to GMT)","title":"Constants"},{"location":"0.22/stdlib/modules/time/#functions","text":"","title":"Functions"},{"location":"0.22/stdlib/modules/time/#timesleep","text":"Syntax: time.sleep(seconds) Pauses the program for seconds ( int or float ) and do nothing. Returns None .","title":"time.sleep"},{"location":"0.22/stdlib/modules/time/#timesleep_milliseconds","text":"Syntax: time.sleep_milliseconds(milliseconds) Pauses the program for milliseconds ( integer ) and do nothing. Returns None .","title":"time.sleep_milliseconds"},{"location":"0.22/stdlib/modules/time/#timetime","text":"Syntax: time.time() Returns the float value of the time in seconds since the Epoch (system-dependent, check your epoch with time.epoch() ).","title":"time.time"},{"location":"0.22/stdlib/modules/time/#timeepoch","text":"Syntax: time.epoch() Returns the str value of the Epoch of your system.","title":"time.epoch"},{"location":"0.22/stdlib/modules/unicodedata/","text":"Unicodedata Source code Credits This is massively copied from python documentation of unicodedata , under the Python Software Foundation License Version 2 . \u00a9 Copyright 2001-2023, Python Software Foundation. This text has not been edited. The unicodedata module can be imported with the statement import unicodedata . The unicodedata provides access to the Unicode database. Constants unicodedata.unicodedata_version : the version of the Unicode database used in this module. Depends on Python version! Functions unicodedata.lookup Syntax: unicodedata.lookup(name) Look up character by name. If a character with the given name is found, return the corresponding character. If not found, NotDefinedError is raised. unicodedata.name Syntax: unicodedata.name(chr, <default>) Returns the name assigned to the character chr as a string. If no name is defined, default is returned, or, if not given, RunTimeError is raised. unicodedata.category Syntax: unicodedata.category(chr) Returns the general category assigned to the character chr as string. unicodedata.bidirectional Syntax: unicodedata.bidirectional(chr) Returns the bidirectional class assigned to the character chr as string. If no such value is defined, an empty string is returned. unicodedata.combining Syntax: unicodedata.combining(chr) Returns the canonical combining class assigned to the character chr as integer. Returns 0 if no combining class is defined. unicodedata.east_asian_width Syntax: unicodedata.east_asian_width(chr) Returns the east asian width assigned to the character chr as string. unicodedata.mirrored Syntax: unicodedata.mirrored(chr) Returns the mirrored property assigned to the character chr as integer. Returns 1 if the character has been identified as a \u201cmirrored\u201d character in bidirectional text, 0 otherwise. unicodedata.decomposition Syntax: unicodedata.decomposition(chr) Returns the character decomposition mapping assigned to the character chr as string. An empty string is returned in case no such mapping is defined. unicodedata.normalize Syntax: unicodedata.normalize(form, unistr) Returns the normal form form for the Unicode string unistr . Valid values for form are \u2018NFC\u2019, \u2018NFKC\u2019, \u2018NFD\u2019, and \u2018NFKD\u2019. The Unicode standard defines various normalization forms of a Unicode string, based on the definition of canonical equivalence and compatibility equivalence. In Unicode, several characters can be expressed in various way. For example, the character U+00C7 (LATIN CAPITAL LETTER C WITH CEDILLA) can also be expressed as the sequence U+0043 (LATIN CAPITAL LETTER C) U+0327 (COMBINING CEDILLA). For each character, there are two normal forms: normal form C and normal form D. Normal form D (NFD) is also known as canonical decomposition, and translates each character into its decomposed form. Normal form C (NFC) first applies a canonical decomposition, then composes pre-combined characters again. In addition to these two forms, there are two additional normal forms based on compatibility equivalence. In Unicode, certain characters are supported which normally would be unified with other characters. For example, U+2160 (ROMAN NUMERAL ONE) is really the same thing as U+0049 (LATIN CAPITAL LETTER I). However, it is supported in Unicode for compatibility with existing character sets (e.g. gb2312). The normal form KD (NFKD) will apply the compatibility decomposition, i.e. replace all compatibility characters with their equivalents. The normal form KC (NFKC) first applies the compatibility decomposition, followed by the canonical composition. Even if two unicode strings are normalized and look the same to a human reader, if one has combining characters and the other doesn\u2019t, they may not compare equal. unicodedata.is_normalized Syntax: unicodedata.is_normalized(form, unistr) Return whether the Unicode string unistr is in the normal form form . Valid values for form are \u2018NFC\u2019, \u2018NFKC\u2019, \u2018NFD\u2019, and \u2018NFKD\u2019.","title":"Unicodedata"},{"location":"0.22/stdlib/modules/unicodedata/#unicodedata","text":"Source code Credits This is massively copied from python documentation of unicodedata , under the Python Software Foundation License Version 2 . \u00a9 Copyright 2001-2023, Python Software Foundation. This text has not been edited. The unicodedata module can be imported with the statement import unicodedata . The unicodedata provides access to the Unicode database.","title":"Unicodedata"},{"location":"0.22/stdlib/modules/unicodedata/#constants","text":"unicodedata.unicodedata_version : the version of the Unicode database used in this module. Depends on Python version!","title":"Constants"},{"location":"0.22/stdlib/modules/unicodedata/#functions","text":"","title":"Functions"},{"location":"0.22/stdlib/modules/unicodedata/#unicodedatalookup","text":"Syntax: unicodedata.lookup(name) Look up character by name. If a character with the given name is found, return the corresponding character. If not found, NotDefinedError is raised.","title":"unicodedata.lookup"},{"location":"0.22/stdlib/modules/unicodedata/#unicodedataname","text":"Syntax: unicodedata.name(chr, <default>) Returns the name assigned to the character chr as a string. If no name is defined, default is returned, or, if not given, RunTimeError is raised.","title":"unicodedata.name"},{"location":"0.22/stdlib/modules/unicodedata/#unicodedatacategory","text":"Syntax: unicodedata.category(chr) Returns the general category assigned to the character chr as string.","title":"unicodedata.category"},{"location":"0.22/stdlib/modules/unicodedata/#unicodedatabidirectional","text":"Syntax: unicodedata.bidirectional(chr) Returns the bidirectional class assigned to the character chr as string. If no such value is defined, an empty string is returned.","title":"unicodedata.bidirectional"},{"location":"0.22/stdlib/modules/unicodedata/#unicodedatacombining","text":"Syntax: unicodedata.combining(chr) Returns the canonical combining class assigned to the character chr as integer. Returns 0 if no combining class is defined.","title":"unicodedata.combining"},{"location":"0.22/stdlib/modules/unicodedata/#unicodedataeast_asian_width","text":"Syntax: unicodedata.east_asian_width(chr) Returns the east asian width assigned to the character chr as string.","title":"unicodedata.east_asian_width"},{"location":"0.22/stdlib/modules/unicodedata/#unicodedatamirrored","text":"Syntax: unicodedata.mirrored(chr) Returns the mirrored property assigned to the character chr as integer. Returns 1 if the character has been identified as a \u201cmirrored\u201d character in bidirectional text, 0 otherwise.","title":"unicodedata.mirrored"},{"location":"0.22/stdlib/modules/unicodedata/#unicodedatadecomposition","text":"Syntax: unicodedata.decomposition(chr) Returns the character decomposition mapping assigned to the character chr as string. An empty string is returned in case no such mapping is defined.","title":"unicodedata.decomposition"},{"location":"0.22/stdlib/modules/unicodedata/#unicodedatanormalize","text":"Syntax: unicodedata.normalize(form, unistr) Returns the normal form form for the Unicode string unistr . Valid values for form are \u2018NFC\u2019, \u2018NFKC\u2019, \u2018NFD\u2019, and \u2018NFKD\u2019. The Unicode standard defines various normalization forms of a Unicode string, based on the definition of canonical equivalence and compatibility equivalence. In Unicode, several characters can be expressed in various way. For example, the character U+00C7 (LATIN CAPITAL LETTER C WITH CEDILLA) can also be expressed as the sequence U+0043 (LATIN CAPITAL LETTER C) U+0327 (COMBINING CEDILLA). For each character, there are two normal forms: normal form C and normal form D. Normal form D (NFD) is also known as canonical decomposition, and translates each character into its decomposed form. Normal form C (NFC) first applies a canonical decomposition, then composes pre-combined characters again. In addition to these two forms, there are two additional normal forms based on compatibility equivalence. In Unicode, certain characters are supported which normally would be unified with other characters. For example, U+2160 (ROMAN NUMERAL ONE) is really the same thing as U+0049 (LATIN CAPITAL LETTER I). However, it is supported in Unicode for compatibility with existing character sets (e.g. gb2312). The normal form KD (NFKD) will apply the compatibility decomposition, i.e. replace all compatibility characters with their equivalents. The normal form KC (NFKC) first applies the compatibility decomposition, followed by the canonical composition. Even if two unicode strings are normalized and look the same to a human reader, if one has combining characters and the other doesn\u2019t, they may not compare equal.","title":"unicodedata.normalize"},{"location":"0.22/stdlib/modules/unicodedata/#unicodedatais_normalized","text":"Syntax: unicodedata.is_normalized(form, unistr) Return whether the Unicode string unistr is in the normal form form . Valid values for form are \u2018NFC\u2019, \u2018NFKC\u2019, \u2018NFD\u2019, and \u2018NFKD\u2019.","title":"unicodedata.is_normalized"},{"location":"0.22/stdlib/modules/webbrowser/","text":"Webbrowser Source code Added in 0.19.0-beta The webbrowser module can be imported with the statement import webbrowser . Convenient web-browser controller. The webbrowser module allows you to open pages in the browser. Functions webbrowser.open Syntax: webbrowser.open(url, <new=0>, <autoraise=True>) Displays url using the default browser. If new is 0, the url is opened in the same browser window if possible. If new is 1, a new browser window is opened if possible. If new is 2, a new tab is opened if possible. If autoraise is True, the window is raised if possible (note that under many window managers this will occur regardless of the setting of this variable).","title":"Webbrowser"},{"location":"0.22/stdlib/modules/webbrowser/#webbrowser","text":"Source code Added in 0.19.0-beta The webbrowser module can be imported with the statement import webbrowser . Convenient web-browser controller. The webbrowser module allows you to open pages in the browser.","title":"Webbrowser"},{"location":"0.22/stdlib/modules/webbrowser/#functions","text":"","title":"Functions"},{"location":"0.22/stdlib/modules/webbrowser/#webbrowseropen","text":"Syntax: webbrowser.open(url, <new=0>, <autoraise=True>) Displays url using the default browser. If new is 0, the url is opened in the same browser window if possible. If new is 1, a new browser window is opened if possible. If new is 2, a new tab is opened if possible. If autoraise is True, the window is raised if possible (note that under many window managers this will occur regardless of the setting of this variable).","title":"webbrowser.open"},{"location":"0.23/","text":"Nougaro 0.23.0-beta documentation This is the official documentation for Nougaro version 0.23.0-beta. Hello, world! Language reference: syntax, statements, \u2026 Basic syntax Number literals String literals Identifiers and keywords Operators Values Variables Tests ( if statement, assert ) Loops Functions Attributes Classes Read and write in files Import and export Metas Dollar-print Standard library reference: builtins, modules, \u2026 Built-in variables Built-in functions Modules Expanding Nougaro (for Python developers) Write libraries for Nougaro Internals","title":"Nougaro 0.23.0-beta documentation"},{"location":"0.23/#nougaro-0230-beta-documentation","text":"This is the official documentation for Nougaro version 0.23.0-beta. Hello, world! Language reference: syntax, statements, \u2026 Basic syntax Number literals String literals Identifiers and keywords Operators Values Variables Tests ( if statement, assert ) Loops Functions Attributes Classes Read and write in files Import and export Metas Dollar-print Standard library reference: builtins, modules, \u2026 Built-in variables Built-in functions Modules Expanding Nougaro (for Python developers) Write libraries for Nougaro Internals","title":"Nougaro 0.23.0-beta documentation"},{"location":"0.23/hello_world/","text":"Hello, world! This is the \u201cHello, world!\u201d program in Nougaro. print(\"Hello, world!\") Alternatively: import hello If you want to use functionnal programming: def main() print(\"Hello, world!\") end main() If you want to use object-oriented programming: class Main def print_hello_world() print(\"Hello, world!\") end end Main().print_hello_world()","title":"Hello, world!"},{"location":"0.23/hello_world/#hello-world","text":"This is the \u201cHello, world!\u201d program in Nougaro. print(\"Hello, world!\") Alternatively: import hello If you want to use functionnal programming: def main() print(\"Hello, world!\") end main() If you want to use object-oriented programming: class Main def print_hello_world() print(\"Hello, world!\") end end Main().print_hello_world()","title":"Hello, world!"},{"location":"0.23/internals/","text":"Internals Features that had to be documented but that are mainly used for debugging purposes. Context variables __actual_context__ is the name of the function where the code is executed. May be <program> . __exec_from__ is the name of the parent of the function where the code is executed. If __actual_context__ is <program> , __exec_from__ is (shell) . If the code is inside a function foo that is directly in <program> , __exec_from__ is foo from <program> . If the code is inside a function bar executed from our foo (that is in <program> ), __exec_from__ is bar from foo . Base value __base_value__ is the base value (python class Value ). It is the parent class of all the other values. It is the only value to crash on == and != operators . Nougaro informations Note This section is duplicated in this file __noug_version__ : string of the Nougaro version (e.g. \"0.15.0-beta\".) You can use the noug_version lib to have better informations. __data_version__ : the Nougaro data version, an internal version keeping track of changes in the config file directory structure __version_id__ : an ID increased at least once per version __python_version__ : string of the Python version (e.g. \"3.10.5\") __noug_dir__ : string of the absolute path of the directory where shell.(py/exe/bin) is located. May be used with file I/O read and write statements. Symbol table __symbol_table__ : string of the internal \u201cp-formated\u201d symbols dictionnary.","title":"Internals"},{"location":"0.23/internals/#internals","text":"Features that had to be documented but that are mainly used for debugging purposes.","title":"Internals"},{"location":"0.23/internals/#context-variables","text":"__actual_context__ is the name of the function where the code is executed. May be <program> . __exec_from__ is the name of the parent of the function where the code is executed. If __actual_context__ is <program> , __exec_from__ is (shell) . If the code is inside a function foo that is directly in <program> , __exec_from__ is foo from <program> . If the code is inside a function bar executed from our foo (that is in <program> ), __exec_from__ is bar from foo .","title":"Context variables"},{"location":"0.23/internals/#base-value","text":"__base_value__ is the base value (python class Value ). It is the parent class of all the other values. It is the only value to crash on == and != operators .","title":"Base value"},{"location":"0.23/internals/#nougaro-informations","text":"Note This section is duplicated in this file __noug_version__ : string of the Nougaro version (e.g. \"0.15.0-beta\".) You can use the noug_version lib to have better informations. __data_version__ : the Nougaro data version, an internal version keeping track of changes in the config file directory structure __version_id__ : an ID increased at least once per version __python_version__ : string of the Python version (e.g. \"3.10.5\") __noug_dir__ : string of the absolute path of the directory where shell.(py/exe/bin) is located. May be used with file I/O read and write statements.","title":"Nougaro informations"},{"location":"0.23/internals/#symbol-table","text":"__symbol_table__ : string of the internal \u201cp-formated\u201d symbols dictionnary.","title":"Symbol table"},{"location":"0.23/Expanding/Write-libs/","text":"You are a Nougaro developer, and you want to write an amazing library to implement python amazing things in Nougaro? You're at the right place!! You have to options: either writting it in Nougaro (with limited resources), either writting it in Python (with unlimited resources). Write libs in Nougaro Requirements You need to know how to code in Nougaro. Start coding The file should be named nameofthelib.noug and be located in the lib_ folder in the Nougaro repository. Simply write all your code. If you want something to be accessible when imported, use one of those syntaxes : export identifier (as identifier) export (any expression) as identifier You can find examples of built-in modules written in Nougaro in the lib_ folder. Write libs in Python Warning Everything changed in 0.16.0-beta and in 0.19.0-beta Requirements You need to know how to code in Python. Don't worry, that's easy ;) Start coding The file should be named nameofthelib_.py (the \u201c_\u201d is VERY important!!) The file will be placed in the lib_ folder in the Nougaro repository. Paste this generic code in your file: # -*- coding:utf-8 -*- \"\"\" YourModuleName module YourModuleName is a module that do [...] and [...] and also [...]. \"\"\" # IMPORTS # nougaro modules imports from lib_.lib_to_make_libs import * # useful stuff to make libs. # built-in python imports # here put the useful python imports your module will need ;) __LIB_VERSION__ = 4 Note Lib versions depending on Nougaro versions: prior to 0.20.0: 1 0.20.0: 2 0.21.0: 3 0.22.0-0.23.0: 4 Lib with constants If your lib contains constants, you can add them to the code, outside any class. Use py2noug function imported from lib_to_make_libs to convert Python values to Nougaro values. Python types that can be converted into Nougaro values are: str , int , float , bool (which is converted to 0 or 1), list , tuple (converted into list), dict (converted into a list of lists, each sub-list is [key, value] ), None . Other types will return generic value Value , which you can't make anything with... Example: AMAZING_CONSTANT = py2noug(3, *default_pos()) # will be Number(3), type 'int' ANOTHER_AMAZING_CONSTANT = py2noug(\"Hello world :)\", *default_pos()) # will be String(\"Hello world :)\"), type 'str' ( py2noug and default_pos are imported from lib_to_make_libs ) Lib with functions If you want functions in your lib, paste this code in your file (replace the generic names/texts with appropriate things): class YourModuleName(ModuleFunction): \"\"\" YourModuleName Module \"\"\" functions: dict[str, builtin_function_dict] = {} def __init__(self, function_name: str): super().__init__(\"your_module_name\", function_name, \"https://link_to_report_bugs.com (not required)\", functions=self.functions) def copy(self): \"\"\"Return a copy of self\"\"\" copy = YourModuleName(self.name) return self.set_context_and_pos_to_a_copy(copy) def is_eq(self, other: Value): return isinstance(other, YourModuleName) and self.name == other.name Changed in 0.20.0-beta Prior to 0.20.0, the method is_eq was named get_comparison_eq and had this syntax: def get_comparison_eq(self, other: Value): if isinstance(other, YourModuleName): return Number(self.name == other.name, self.pos_start, other.pos_end).set_context(self.context), None return Number(False, self.pos_start, other.pos_end).set_context(self.context), None Then, to add a function, add a method in this class following this syntax: def execute_function_name(self, context: Context): \"\"\" Docstring (optional) \"\"\" assert context.symbol_table is not None ... functions[\"function_name\"] = { \"function\": execute_function_name, \"param_names\": [\"parameter_1\", \"parameter_2\"], \"optional_params\": [\"optional_parameter_1\"], \"should_respect_args_number\": True, # The two following values are used internally. # They are not documented, don\u2019t set them to True except if you know what you\u2019re doing. \"run_noug_dir\": False, \"noug_dir\": False } Changed in 0.22.0-beta Prior to 0.22.0-beta, the key \"run_noug_dir\" was called \"run_noug_dir_work_dir\" . keys param_names and optional_params should be of type list[str] . should_respect_args_number is a bool. It is True when the number of given arguments should match with the number of parameters, and False if not. You can then add code in your function. Get arguments To get the arguments given by the user in your functions, use context.symbol_table.getf(\"identifier\") Replace the identifier by the one you given to the parameter. If your parameter is optional and that the user didn\u2019t specified it, the default value is a Python None (not a Nougaro NoneValue ). Danger Please don\u2019t use .get symbol table method, it does NOT work in modules (even if it looks like) and should NOT be used. (The short explanation why is that this method looks for the name also in parent symbol table, so if an optional param is not given but the user defined a variable with that name, it will be taken as the value for that param, which is not what we want. We don\u2019t care about parent symbol table, so we just look in the current symbol table which only contains the parameters. The corresponding issue is #10 .) Values Important You often have to switch between Nougaro and Python values! To convert python to Nougaro values, use py2noug function. To convert Nougaro to python values, use noug2py . Both functions are imported from lib_to_make_libs . You reed a position with py2noug : you can simply put self.pos_start and self.pos_end or the position of any value you want. What to return? Values and errors. If you don't need to return anything, simply use return RTResult().success(NoneValue(*default_pos(), False)) . Return errors Oops! It crashed! How to say it to the user under a good shape? Simply use this syntax: return RTResult().failure(NameOfTheError( self.pos_start, self.pos_end, \"error message.\", context )) If the user gave you a value with an incorrect type, use: return RTResult().failure(RTTypeErrorF( bad_argument.pos_start, bad_argument.pos_end, \"first/second/third\u2026\", \"name of the module.name of the function\", \"type that should be found\", bad_argument, context )) Replace \"first/second/third\u2026\" by the actual index of the argument. If it is the first argument, put \"first\" , et c\u00e6tera. The error will print, for instance, second argument of builtin function 'name of the function' should be 'type that should be found', not 'type of (bad_argument)'. You can replace self by any Nougaro value, such as your arguments. For example, in the lib math : if value.value < 0: # we check if the value is greater than (or equal to) 0 return RTResult().failure(RTArithmeticError( value.pos_start, value.pos_end, \"first argument of the built-in function 'math.sqrt' must be greater than (or equal to) 0.\", exec_context, \"lib_.math_.Math.execute_math_sqrt\" )) All the errors available in a Module: RunTimeError : basic run-time error RTIndexError : IndexError RTArithmeticError : ArithmeticError RTNotDefinedError : NotDefinedError RTTypeErrorF : TypeError (you give a Number but you need a String) RTFileNotFoundError : FileNotFoundError RTAssertionError : AssertionError (not useful in libs...) RTAttributeError : AttributeError RTOverflowError : OverflowError RTRecursionError : RecursionError (new in 0.20.0) PythonError : PythonError: an error due to Python. Don\u2019t put a str error message: pass directly the Python Exception. Return values To return a Nougaro value, use return RTResult().success(value) To return a Python value, use return RTResult().success(py2noug(value, self.pos_start, self.pos_end)) WHAT_TO_IMPORT : DO NOT forget that one!! When you have finished coding your amazing lib, create the WHAT_TO_IMPORT dict. It tells to the Nougaro Interpreter what should be imported and with which name. Follow this syntax: WHAT_TO_IMPORT = { \"name_of_a_constant\": IDENTIFIER, \"name_of_a_function\": YourModuleName('function_name'), } The function name is what you specified as the key of the functions dictionary. Custom errors To use a custom error in your code, simply copy-paste this code: class YourErrorName(RunTimeError): \"\"\"YourErrorName is an error that can be triggered ONLY via functions in this module.\"\"\" def __init__(self, pos_start: Position, pos_end: Position, details: str, context: Context, origin_file: str = \"lib_.(nameofthelib)_\"): super().__init__(pos_start, pos_end, details, context, rt_error=False, error_name=\"YourErrorName\", origin_file=origin_file) Then, call it like any other errors (like this ) Note: origin_file is used for debugging. To trigger it, you can run: nougaro> import debug;debug.enable() DEBUG mode is now ENABLED. [<module debug>, None] nougaro> (anything that throws an error) Example: nougaro> import debug;debug.enable() DEBUG mode is now ENABLED. [<module debug>, None] nougaro> thisisnotdefined [identifier:\"thisisnotdefined\", end of file] list:[(var_access:[identifier:\"thisisnotdefined\"], False)] (from src.runtime.interpreter.Interpreter.visit_VarAccessNode (is NOT lib and close match in symbol table)) Traceback (most recent call last): In file <stdin>, line 1, in <program>: thisisnotdefined ^^^^^^^^^^^^^^^^ NotDefinedError: name 'thisisnotdefined' is not defined. Did you mean 'is_none'? nougaro> this is a syntax error [identifier:\"this\", identifier:\"is\", identifier:\"a\", identifier:\"syntax\", identifier:\"error\", end of file] (from src.parser.parser.Parser.statements) In file <stdin>, line 1: this is a syntax error ^^ InvalidSyntaxError: unexpected token: identifier:\"is\". nougaro> Here, origin_file is src.runtime.interpreter.Interpreter.visit_VarAccessNode and src.parser.parser.Parser.parse . Example: RTStatisticsError in built-in lib statistics class RTStatisticsError(RunTimeError): \"\"\"StatisticsError is an error that can be triggered ONLY via functions in this module.\"\"\" def __init__(self, pos_start: Position, pos_end: Position, details: str, context: Context, origin_file: str = \"lib_.statistics_\"): super().__init__(pos_start, pos_end, details, context, rt_error=False, error_name=\"StatisticsError\", origin_file=origin_file) Examples You can read builtin files stored in lib_ folder to make you a good idea of what a nice-coded lib is ;) Here you go! If you think that your lib is absolutely awesome, you can open a PR to submit your idea. The best ideas will be implemented into vanilla Nougaro! If you think that this document is incomplete, that it didn\u2019t help you, or just to find some help, open an issue .","title":"Write libs"},{"location":"0.23/Expanding/Write-libs/#write-libs-in-nougaro","text":"","title":"Write libs in Nougaro"},{"location":"0.23/Expanding/Write-libs/#requirements","text":"You need to know how to code in Nougaro.","title":"Requirements"},{"location":"0.23/Expanding/Write-libs/#start-coding","text":"The file should be named nameofthelib.noug and be located in the lib_ folder in the Nougaro repository. Simply write all your code. If you want something to be accessible when imported, use one of those syntaxes : export identifier (as identifier) export (any expression) as identifier You can find examples of built-in modules written in Nougaro in the lib_ folder.","title":"Start coding"},{"location":"0.23/Expanding/Write-libs/#write-libs-in-python","text":"Warning Everything changed in 0.16.0-beta and in 0.19.0-beta","title":"Write libs in Python"},{"location":"0.23/Expanding/Write-libs/#requirements_1","text":"You need to know how to code in Python. Don't worry, that's easy ;)","title":"Requirements"},{"location":"0.23/Expanding/Write-libs/#start-coding_1","text":"The file should be named nameofthelib_.py (the \u201c_\u201d is VERY important!!) The file will be placed in the lib_ folder in the Nougaro repository. Paste this generic code in your file: # -*- coding:utf-8 -*- \"\"\" YourModuleName module YourModuleName is a module that do [...] and [...] and also [...]. \"\"\" # IMPORTS # nougaro modules imports from lib_.lib_to_make_libs import * # useful stuff to make libs. # built-in python imports # here put the useful python imports your module will need ;) __LIB_VERSION__ = 4 Note Lib versions depending on Nougaro versions: prior to 0.20.0: 1 0.20.0: 2 0.21.0: 3 0.22.0-0.23.0: 4","title":"Start coding"},{"location":"0.23/Expanding/Write-libs/#lib-with-constants","text":"If your lib contains constants, you can add them to the code, outside any class. Use py2noug function imported from lib_to_make_libs to convert Python values to Nougaro values. Python types that can be converted into Nougaro values are: str , int , float , bool (which is converted to 0 or 1), list , tuple (converted into list), dict (converted into a list of lists, each sub-list is [key, value] ), None . Other types will return generic value Value , which you can't make anything with... Example: AMAZING_CONSTANT = py2noug(3, *default_pos()) # will be Number(3), type 'int' ANOTHER_AMAZING_CONSTANT = py2noug(\"Hello world :)\", *default_pos()) # will be String(\"Hello world :)\"), type 'str' ( py2noug and default_pos are imported from lib_to_make_libs )","title":"Lib with constants"},{"location":"0.23/Expanding/Write-libs/#lib-with-functions","text":"If you want functions in your lib, paste this code in your file (replace the generic names/texts with appropriate things): class YourModuleName(ModuleFunction): \"\"\" YourModuleName Module \"\"\" functions: dict[str, builtin_function_dict] = {} def __init__(self, function_name: str): super().__init__(\"your_module_name\", function_name, \"https://link_to_report_bugs.com (not required)\", functions=self.functions) def copy(self): \"\"\"Return a copy of self\"\"\" copy = YourModuleName(self.name) return self.set_context_and_pos_to_a_copy(copy) def is_eq(self, other: Value): return isinstance(other, YourModuleName) and self.name == other.name Changed in 0.20.0-beta Prior to 0.20.0, the method is_eq was named get_comparison_eq and had this syntax: def get_comparison_eq(self, other: Value): if isinstance(other, YourModuleName): return Number(self.name == other.name, self.pos_start, other.pos_end).set_context(self.context), None return Number(False, self.pos_start, other.pos_end).set_context(self.context), None Then, to add a function, add a method in this class following this syntax: def execute_function_name(self, context: Context): \"\"\" Docstring (optional) \"\"\" assert context.symbol_table is not None ... functions[\"function_name\"] = { \"function\": execute_function_name, \"param_names\": [\"parameter_1\", \"parameter_2\"], \"optional_params\": [\"optional_parameter_1\"], \"should_respect_args_number\": True, # The two following values are used internally. # They are not documented, don\u2019t set them to True except if you know what you\u2019re doing. \"run_noug_dir\": False, \"noug_dir\": False } Changed in 0.22.0-beta Prior to 0.22.0-beta, the key \"run_noug_dir\" was called \"run_noug_dir_work_dir\" . keys param_names and optional_params should be of type list[str] . should_respect_args_number is a bool. It is True when the number of given arguments should match with the number of parameters, and False if not. You can then add code in your function.","title":"Lib with functions"},{"location":"0.23/Expanding/Write-libs/#get-arguments","text":"To get the arguments given by the user in your functions, use context.symbol_table.getf(\"identifier\") Replace the identifier by the one you given to the parameter. If your parameter is optional and that the user didn\u2019t specified it, the default value is a Python None (not a Nougaro NoneValue ). Danger Please don\u2019t use .get symbol table method, it does NOT work in modules (even if it looks like) and should NOT be used. (The short explanation why is that this method looks for the name also in parent symbol table, so if an optional param is not given but the user defined a variable with that name, it will be taken as the value for that param, which is not what we want. We don\u2019t care about parent symbol table, so we just look in the current symbol table which only contains the parameters. The corresponding issue is #10 .)","title":"Get arguments"},{"location":"0.23/Expanding/Write-libs/#values","text":"Important You often have to switch between Nougaro and Python values! To convert python to Nougaro values, use py2noug function. To convert Nougaro to python values, use noug2py . Both functions are imported from lib_to_make_libs . You reed a position with py2noug : you can simply put self.pos_start and self.pos_end or the position of any value you want.","title":"Values"},{"location":"0.23/Expanding/Write-libs/#what-to-return-values-and-errors","text":"If you don't need to return anything, simply use return RTResult().success(NoneValue(*default_pos(), False)) .","title":"What to return? Values and errors."},{"location":"0.23/Expanding/Write-libs/#return-errors","text":"Oops! It crashed! How to say it to the user under a good shape? Simply use this syntax: return RTResult().failure(NameOfTheError( self.pos_start, self.pos_end, \"error message.\", context )) If the user gave you a value with an incorrect type, use: return RTResult().failure(RTTypeErrorF( bad_argument.pos_start, bad_argument.pos_end, \"first/second/third\u2026\", \"name of the module.name of the function\", \"type that should be found\", bad_argument, context )) Replace \"first/second/third\u2026\" by the actual index of the argument. If it is the first argument, put \"first\" , et c\u00e6tera. The error will print, for instance, second argument of builtin function 'name of the function' should be 'type that should be found', not 'type of (bad_argument)'. You can replace self by any Nougaro value, such as your arguments. For example, in the lib math : if value.value < 0: # we check if the value is greater than (or equal to) 0 return RTResult().failure(RTArithmeticError( value.pos_start, value.pos_end, \"first argument of the built-in function 'math.sqrt' must be greater than (or equal to) 0.\", exec_context, \"lib_.math_.Math.execute_math_sqrt\" )) All the errors available in a Module: RunTimeError : basic run-time error RTIndexError : IndexError RTArithmeticError : ArithmeticError RTNotDefinedError : NotDefinedError RTTypeErrorF : TypeError (you give a Number but you need a String) RTFileNotFoundError : FileNotFoundError RTAssertionError : AssertionError (not useful in libs...) RTAttributeError : AttributeError RTOverflowError : OverflowError RTRecursionError : RecursionError (new in 0.20.0) PythonError : PythonError: an error due to Python. Don\u2019t put a str error message: pass directly the Python Exception.","title":"Return errors"},{"location":"0.23/Expanding/Write-libs/#return-values","text":"To return a Nougaro value, use return RTResult().success(value) To return a Python value, use return RTResult().success(py2noug(value, self.pos_start, self.pos_end))","title":"Return values"},{"location":"0.23/Expanding/Write-libs/#what_to_import-do-not-forget-that-one","text":"When you have finished coding your amazing lib, create the WHAT_TO_IMPORT dict. It tells to the Nougaro Interpreter what should be imported and with which name. Follow this syntax: WHAT_TO_IMPORT = { \"name_of_a_constant\": IDENTIFIER, \"name_of_a_function\": YourModuleName('function_name'), } The function name is what you specified as the key of the functions dictionary.","title":"WHAT_TO_IMPORT : DO NOT forget that one!!"},{"location":"0.23/Expanding/Write-libs/#custom-errors","text":"To use a custom error in your code, simply copy-paste this code: class YourErrorName(RunTimeError): \"\"\"YourErrorName is an error that can be triggered ONLY via functions in this module.\"\"\" def __init__(self, pos_start: Position, pos_end: Position, details: str, context: Context, origin_file: str = \"lib_.(nameofthelib)_\"): super().__init__(pos_start, pos_end, details, context, rt_error=False, error_name=\"YourErrorName\", origin_file=origin_file) Then, call it like any other errors (like this ) Note: origin_file is used for debugging. To trigger it, you can run: nougaro> import debug;debug.enable() DEBUG mode is now ENABLED. [<module debug>, None] nougaro> (anything that throws an error) Example: nougaro> import debug;debug.enable() DEBUG mode is now ENABLED. [<module debug>, None] nougaro> thisisnotdefined [identifier:\"thisisnotdefined\", end of file] list:[(var_access:[identifier:\"thisisnotdefined\"], False)] (from src.runtime.interpreter.Interpreter.visit_VarAccessNode (is NOT lib and close match in symbol table)) Traceback (most recent call last): In file <stdin>, line 1, in <program>: thisisnotdefined ^^^^^^^^^^^^^^^^ NotDefinedError: name 'thisisnotdefined' is not defined. Did you mean 'is_none'? nougaro> this is a syntax error [identifier:\"this\", identifier:\"is\", identifier:\"a\", identifier:\"syntax\", identifier:\"error\", end of file] (from src.parser.parser.Parser.statements) In file <stdin>, line 1: this is a syntax error ^^ InvalidSyntaxError: unexpected token: identifier:\"is\". nougaro> Here, origin_file is src.runtime.interpreter.Interpreter.visit_VarAccessNode and src.parser.parser.Parser.parse .","title":"Custom errors"},{"location":"0.23/Expanding/Write-libs/#example-rtstatisticserror-in-built-in-lib-statistics","text":"class RTStatisticsError(RunTimeError): \"\"\"StatisticsError is an error that can be triggered ONLY via functions in this module.\"\"\" def __init__(self, pos_start: Position, pos_end: Position, details: str, context: Context, origin_file: str = \"lib_.statistics_\"): super().__init__(pos_start, pos_end, details, context, rt_error=False, error_name=\"StatisticsError\", origin_file=origin_file)","title":"Example: RTStatisticsError in built-in lib statistics"},{"location":"0.23/Expanding/Write-libs/#examples","text":"You can read builtin files stored in lib_ folder to make you a good idea of what a nice-coded lib is ;)","title":"Examples"},{"location":"0.23/Expanding/Write-libs/#here-you-go","text":"If you think that your lib is absolutely awesome, you can open a PR to submit your idea. The best ideas will be implemented into vanilla Nougaro! If you think that this document is incomplete, that it didn\u2019t help you, or just to find some help, open an issue .","title":"Here you go!"},{"location":"0.23/Language/01syntax/","text":"Very basic syntax This document covers the basic syntax of Nougaro. Comments There are two types of comments in Nougaro: single-line comments and multi-line comments. Single-line comments Single-line comments start with # and end with a new line. They can start at the beginning of a line or after some code. Example: # this is a single-line comment foo(bar) # this calls the function foo with the argument bar Multi-line comments Multi-line comments start with /* and end with */ . They can start and stop at any point in the code. Example: /* this is a multi line comment */ print(\"hello\") /* this is also a multi line comment*/ Multi-line comments can also be only on one line: print(\"hello\") /* this is a multi-line comment that is only on one line */ Multi-line comments are simply ignored, which mean you can do things such as: print( /* this is a comment */ \"hello\" /* this is another comment */) print(/* this is actually a comment*/ \"hello\") Multi-line comments can be nested: /* comment /* comment-inside comment*/ /* /* comment-ception */ */ comment */ NOUGAROIGNORE comments Added in 0.22.0-beta These comments start and end with ..NOUGAROIGNORE or .. NOUGAROIGNORE , where . is any character among #@/%!$; . There should be nothing else on the NOUGAROIGNORE line. Example: file examples/fizzbuzz.cpp.c.py.noug (polyglott file using C/C++ comments, Python docstrings and Nougaro NOUGAROIGNORE comments). Lines Line are separated by a newline or a semicolon ( ; ). a b is equivalent to a ; b . Line joining If you don\u2019t have enough space on your line, you can join two \u201creal lines\u201d to form a Nougaro line, using a backspace. Example: var fruits = [\\ \"banana\", \\ \"apple\", \\ \"raspberry\", \\ \"pineapple\" \\ ] Blank lines Blank lines are ignored. Indentation Indentation is optional, as (mostly) every statement ends with end . Whitespaces Whitespaces are ignored everywhere (except in string literals and to differentiate things such as foobar and foo bar , or += and + = ).","title":"Very basic syntax"},{"location":"0.23/Language/01syntax/#very-basic-syntax","text":"This document covers the basic syntax of Nougaro.","title":"Very basic syntax"},{"location":"0.23/Language/01syntax/#comments","text":"There are two types of comments in Nougaro: single-line comments and multi-line comments.","title":"Comments"},{"location":"0.23/Language/01syntax/#single-line-comments","text":"Single-line comments start with # and end with a new line. They can start at the beginning of a line or after some code. Example: # this is a single-line comment foo(bar) # this calls the function foo with the argument bar","title":"Single-line comments"},{"location":"0.23/Language/01syntax/#multi-line-comments","text":"Multi-line comments start with /* and end with */ . They can start and stop at any point in the code. Example: /* this is a multi line comment */ print(\"hello\") /* this is also a multi line comment*/ Multi-line comments can also be only on one line: print(\"hello\") /* this is a multi-line comment that is only on one line */ Multi-line comments are simply ignored, which mean you can do things such as: print( /* this is a comment */ \"hello\" /* this is another comment */) print(/* this is actually a comment*/ \"hello\") Multi-line comments can be nested: /* comment /* comment-inside comment*/ /* /* comment-ception */ */ comment */","title":"Multi-line comments"},{"location":"0.23/Language/01syntax/#nougaroignore-comments","text":"Added in 0.22.0-beta These comments start and end with ..NOUGAROIGNORE or .. NOUGAROIGNORE , where . is any character among #@/%!$; . There should be nothing else on the NOUGAROIGNORE line. Example: file examples/fizzbuzz.cpp.c.py.noug (polyglott file using C/C++ comments, Python docstrings and Nougaro NOUGAROIGNORE comments).","title":"NOUGAROIGNORE comments"},{"location":"0.23/Language/01syntax/#lines","text":"Line are separated by a newline or a semicolon ( ; ). a b is equivalent to a ; b .","title":"Lines"},{"location":"0.23/Language/01syntax/#line-joining","text":"If you don\u2019t have enough space on your line, you can join two \u201creal lines\u201d to form a Nougaro line, using a backspace. Example: var fruits = [\\ \"banana\", \\ \"apple\", \\ \"raspberry\", \\ \"pineapple\" \\ ]","title":"Line joining"},{"location":"0.23/Language/01syntax/#blank-lines","text":"Blank lines are ignored.","title":"Blank lines"},{"location":"0.23/Language/01syntax/#indentation","text":"Indentation is optional, as (mostly) every statement ends with end .","title":"Indentation"},{"location":"0.23/Language/01syntax/#whitespaces","text":"Whitespaces are ignored everywhere (except in string literals and to differentiate things such as foobar and foo bar , or += and + = ).","title":"Whitespaces"},{"location":"0.23/Language/02number_literals/","text":"Number literals Here\u2019s all the different ways to write a number in Nougaro: 123 12.3 123e2 12.3e2 123e-2 123e+2 12.3e-2 12.3e+2 Note You can put + or - in front of the number to specify its sign. Example: -123 . Other bases: 0b01110 (base 2, binary) 0o17403 (base 8, octal) 0x4EF1A (base 16, hexadecimal) 0b10e30 0o70e30 Note 0xA0e30 will be interpreted as the hexadecimal number A0E30 ( 3*16^1 + 15*16^2 + 10*16^4 ) and not as 0xA0 * 10^30 _ in numbers Note You can put as much underscores ( _ ) as you want in a number literal, as long as the underscore are not at the beginning or at the end of the literal, or around the dot in floating-point numbers (ex: 10_694_254 is the same as 10694254 , 10_ is not valid, 12._3 is not valid and 12_._3 isn\u2019t either.)","title":"Number literals"},{"location":"0.23/Language/02number_literals/#number-literals","text":"Here\u2019s all the different ways to write a number in Nougaro: 123 12.3 123e2 12.3e2 123e-2 123e+2 12.3e-2 12.3e+2 Note You can put + or - in front of the number to specify its sign. Example: -123 . Other bases: 0b01110 (base 2, binary) 0o17403 (base 8, octal) 0x4EF1A (base 16, hexadecimal) 0b10e30 0o70e30 Note 0xA0e30 will be interpreted as the hexadecimal number A0E30 ( 3*16^1 + 15*16^2 + 10*16^4 ) and not as 0xA0 * 10^30","title":"Number literals"},{"location":"0.23/Language/02number_literals/#_-in-numbers","text":"Note You can put as much underscores ( _ ) as you want in a number literal, as long as the underscore are not at the beginning or at the end of the literal, or around the dot in floating-point numbers (ex: 10_694_254 is the same as 10694254 , 10_ is not valid, 12._3 is not valid and 12_._3 isn\u2019t either.)","title":"_ in numbers"},{"location":"0.23/Language/03string_literals/","text":"String literals String literals are delimited by \"\" , '' or \u00ab\u00bb . Examples: \"hello\" 'hello' \u00abhello\u00bb Escape characters: \\' : ' \\\" : \" \\\u00bb : \u00bb \\n : backline \\t : tab \\\\ : backslash \\xAA : unicode character number AA (hex) \\uAAAA : unicode character number AAAA (hex) \\UAAAAAAAA : unicode character number AAAAAAAA (hex) \\N{NAME} : unicode character with name NAME. Returns SyntaxError if it doesn\u2019t exist. Note The backslash isn\u2019t left if the next character is not recognised (example: \"\\/\" is the same as \"/\" , and not \"\\\\/\" ) Examples: 'I\\'m a string literal' \"He said: \\\"'I'm a string literal'\\\"\" \"\\\\ backslashes, \\t tabs and \\n backlines\" \u00abThis string has a \\N{NO BREAK SPACE}\u00bb \"\\N{Latin Small Letter C with Cedilla}: \\xe7\" \"\\N{Greek Small Letter Eta with Dasia and Oxia and Ypogegrammeni}: \\u1F95\" \"This is Person Shrugging (\ud83e\udd37): \\U0001f937\" Note You can use the meta nbspBetweenFrenchGuillemets to be forced to use a no-break-space or a narrow-no-break-space after \u00ab and before \u00bb . These NBSP are not counted in the string and this does not affect the other string delimiters.","title":"String literals"},{"location":"0.23/Language/03string_literals/#string-literals","text":"String literals are delimited by \"\" , '' or \u00ab\u00bb . Examples: \"hello\" 'hello' \u00abhello\u00bb Escape characters: \\' : ' \\\" : \" \\\u00bb : \u00bb \\n : backline \\t : tab \\\\ : backslash \\xAA : unicode character number AA (hex) \\uAAAA : unicode character number AAAA (hex) \\UAAAAAAAA : unicode character number AAAAAAAA (hex) \\N{NAME} : unicode character with name NAME. Returns SyntaxError if it doesn\u2019t exist. Note The backslash isn\u2019t left if the next character is not recognised (example: \"\\/\" is the same as \"/\" , and not \"\\\\/\" ) Examples: 'I\\'m a string literal' \"He said: \\\"'I'm a string literal'\\\"\" \"\\\\ backslashes, \\t tabs and \\n backlines\" \u00abThis string has a \\N{NO BREAK SPACE}\u00bb \"\\N{Latin Small Letter C with Cedilla}: \\xe7\" \"\\N{Greek Small Letter Eta with Dasia and Oxia and Ypogegrammeni}: \\u1F95\" \"This is Person Shrugging (\ud83e\udd37): \\U0001f937\" Note You can use the meta nbspBetweenFrenchGuillemets to be forced to use a no-break-space or a narrow-no-break-space after \u00ab and before \u00bb . These NBSP are not counted in the string and this does not affect the other string delimiters.","title":"String literals"},{"location":"0.23/Language/04identifiers_and_keywords/","text":"Identifiers and keywords Identifiers (variable names) can be composed of the 26 characters of the ASCII alphabet ( a to z \u202fthen A to Z ), in lower and upper case, the underscore _ and digits ( 0 to 9 ). Note An identifier can not start with a digit. Keywords The following identifiers are reserved and can not be used as variable names: and as assert break class continue def del do elif else end export for if import in loop not or read return step then to var while write xor","title":"Identifiers and keywords"},{"location":"0.23/Language/04identifiers_and_keywords/#identifiers-and-keywords","text":"Identifiers (variable names) can be composed of the 26 characters of the ASCII alphabet ( a to z \u202fthen A to Z ), in lower and upper case, the underscore _ and digits ( 0 to 9 ). Note An identifier can not start with a digit.","title":"Identifiers and keywords"},{"location":"0.23/Language/04identifiers_and_keywords/#keywords","text":"The following identifiers are reserved and can not be used as variable names: and as assert break class continue def del do elif else end export for if import in loop not or read return step then to var while write xor","title":"Keywords"},{"location":"0.23/Language/05operators/","text":"Operators Mathematical operators Here all the mathematical operators in Nougaro (ordered by priority): Nougaro Python Comments ^ ** power * * multiplication % % modulo / / division // // floor division + + addition - - substraction & & bitwise and | | bitwise or ^^ ^ bitwise xor ~ ~ bitwise not It respects operation priority and you can use parenthesis. Examples 3 * 4 returns 12 4 / 2 returns 2 1 + 1 returns 2 3 - 4 returns -1 10 % 7 returns 3 10 % 3 returns 1 10 // 7 returns 1 10 // 3 returns 3 5 ^ 2 returns 25 62 & 35 returns 34 ~1 returns -2 and ~-2 returns 1 5 + 5 * 3 + 2 returns 22 (5 + 5) * (3 + 2) returns 50 Test operators They are exactly same as Python ones: Nougaro Python Comments == == equals to != != different than < < less than <= <= less than or equals > > greater than >= >= greater than or equals in in check if a value is in another Note the in keyword can check if: int , float , str , list , DefaultValue or NoneValue is in a str any value is in a list Added in 0.22.0-beta DefaultValue is new in 0.22.0-beta. Logical operators There is one logical operator that isn't here in Python. There is a list: Nougaro Python Comments and and boolean 'and' (binary operator) or or boolean 'or' (binary operator) xor ^ boolean 'exclusive or' (binary operator) not not boolean 'not' (inverter) (unary operator)","title":"Operators"},{"location":"0.23/Language/05operators/#operators","text":"","title":"Operators"},{"location":"0.23/Language/05operators/#mathematical-operators","text":"Here all the mathematical operators in Nougaro (ordered by priority): Nougaro Python Comments ^ ** power * * multiplication % % modulo / / division // // floor division + + addition - - substraction & & bitwise and | | bitwise or ^^ ^ bitwise xor ~ ~ bitwise not It respects operation priority and you can use parenthesis.","title":"Mathematical operators"},{"location":"0.23/Language/05operators/#examples","text":"3 * 4 returns 12 4 / 2 returns 2 1 + 1 returns 2 3 - 4 returns -1 10 % 7 returns 3 10 % 3 returns 1 10 // 7 returns 1 10 // 3 returns 3 5 ^ 2 returns 25 62 & 35 returns 34 ~1 returns -2 and ~-2 returns 1 5 + 5 * 3 + 2 returns 22 (5 + 5) * (3 + 2) returns 50","title":"Examples"},{"location":"0.23/Language/05operators/#test-operators","text":"They are exactly same as Python ones: Nougaro Python Comments == == equals to != != different than < < less than <= <= less than or equals > > greater than >= >= greater than or equals in in check if a value is in another Note the in keyword can check if: int , float , str , list , DefaultValue or NoneValue is in a str any value is in a list Added in 0.22.0-beta DefaultValue is new in 0.22.0-beta.","title":"Test operators"},{"location":"0.23/Language/05operators/#logical-operators","text":"There is one logical operator that isn't here in Python. There is a list: Nougaro Python Comments and and boolean 'and' (binary operator) or or boolean 'or' (binary operator) xor ^ boolean 'exclusive or' (binary operator) not not boolean 'not' (inverter) (unary operator)","title":"Logical operators"},{"location":"0.23/Language/06values/","text":"Values Here is the list of the value types in Nougaro: int ( integers ). Internal type: int float ( floats ). Internal type: float str ( strings ). Internal type: str list ( lists ). Internal type: list NoneType ( None ). Internal type: NoneValue function . Internal type: func or method . module . Internal type: module constructor . Internal type: constructor object . Internal type: depends on the class\u2019 name, and it is <class> if the class has no name. Note Internal value types are base value (type: BaseValue ) and default value (type: DefaultValue ) Added in 0.22.0-beta DefaultValue is new in 0.22.0-beta. Changed in 0.22.0-beta Before 0.22.0-beta, a distinction was made between func (user-defined function or function in a module written in Nougaro) and built-in func (built-in function or function in a module written in Python). Numbers Numbers represents real-life numbers. The two types of numbers are int and float . To declare a number, you can use a number literal . Operations that can be used between two numbers are: addition, substraction, multiplication, power. If the second number is non-zero, division, modulo and floor division can be used. All these operations follow the mathematical logic (except for 0^0, that returns 1). Multiplication can be used between a integer (type int ) and a string or a list . For example, 3*\"str\" returns \"strstrstr\" , and 2*[1, 2] returns [1, 2, 1, 2] . In boolean context, a number is true if it is non-zero. Strings The type of a string is str . To declare a string, you can use a string literal The only operation that can be used between strings is addition, which concatenates the string with the other. For example, \"hello, \" + \"world!\" returns \"hello, world!\" . Multiplication can be used between a string and an integer (type int ). For example, \"str\"*3 returns \"strstrstr\" . In boolean context, a string is true if it contains at least one character. Lists Lists are a succession of values. To declare a list, you can use brackets ( [] ), and put every value separated by a comma ( , ) inside. They may be 0 values. To create a list with elements from another list (and other elements), you can use this syntax: [1, 2, *list_, 5] (which is [1, 2, 3, 4, 5] if list_ is [3, 4] ). The only operation that can be used between two lists is multiplication, which extends the first list with the content of the second list. This can also be achieved using extend(list1, list2) Addition can be used between a list and any other value to add an element to the list. Substraction can be used between a list and an integer (type int ) to pop (i.e. delete) an element by index. This supports negative numbers. The returned value is the list after the pop. This can be achieved with pop(list, index) , although this returns the popped value. Multiplication can be used between a list and an integer (type int ). For example, [1, 2]*2 returns [1, 2, 1, 2] . Division can be used between a list and an integer (type int ) to get an element by index. This supports negative numbers. This can be achieved using list(index) or get(list, index) . In boolean context, a list is true if it is not empty None None is a value to denote the absence of other values. It is accessible trought the None built-in variable. No operation can be used on None . In boolean context, None is false. Modules A module is a value containing various useful functions and constants. A list of modules can be found here . Importing modules is detailed here . The procedure to create your own module is detailed here . No operation can be used on modules. In boolean context, a module is true. Changed in 0.22.0-beta Prior to 0.22.0-beta, a module was false in boolean context.","title":"Values"},{"location":"0.23/Language/06values/#values","text":"Here is the list of the value types in Nougaro: int ( integers ). Internal type: int float ( floats ). Internal type: float str ( strings ). Internal type: str list ( lists ). Internal type: list NoneType ( None ). Internal type: NoneValue function . Internal type: func or method . module . Internal type: module constructor . Internal type: constructor object . Internal type: depends on the class\u2019 name, and it is <class> if the class has no name. Note Internal value types are base value (type: BaseValue ) and default value (type: DefaultValue ) Added in 0.22.0-beta DefaultValue is new in 0.22.0-beta. Changed in 0.22.0-beta Before 0.22.0-beta, a distinction was made between func (user-defined function or function in a module written in Nougaro) and built-in func (built-in function or function in a module written in Python).","title":"Values"},{"location":"0.23/Language/06values/#numbers","text":"Numbers represents real-life numbers. The two types of numbers are int and float . To declare a number, you can use a number literal . Operations that can be used between two numbers are: addition, substraction, multiplication, power. If the second number is non-zero, division, modulo and floor division can be used. All these operations follow the mathematical logic (except for 0^0, that returns 1). Multiplication can be used between a integer (type int ) and a string or a list . For example, 3*\"str\" returns \"strstrstr\" , and 2*[1, 2] returns [1, 2, 1, 2] . In boolean context, a number is true if it is non-zero.","title":"Numbers"},{"location":"0.23/Language/06values/#strings","text":"The type of a string is str . To declare a string, you can use a string literal The only operation that can be used between strings is addition, which concatenates the string with the other. For example, \"hello, \" + \"world!\" returns \"hello, world!\" . Multiplication can be used between a string and an integer (type int ). For example, \"str\"*3 returns \"strstrstr\" . In boolean context, a string is true if it contains at least one character.","title":"Strings"},{"location":"0.23/Language/06values/#lists","text":"Lists are a succession of values. To declare a list, you can use brackets ( [] ), and put every value separated by a comma ( , ) inside. They may be 0 values. To create a list with elements from another list (and other elements), you can use this syntax: [1, 2, *list_, 5] (which is [1, 2, 3, 4, 5] if list_ is [3, 4] ). The only operation that can be used between two lists is multiplication, which extends the first list with the content of the second list. This can also be achieved using extend(list1, list2) Addition can be used between a list and any other value to add an element to the list. Substraction can be used between a list and an integer (type int ) to pop (i.e. delete) an element by index. This supports negative numbers. The returned value is the list after the pop. This can be achieved with pop(list, index) , although this returns the popped value. Multiplication can be used between a list and an integer (type int ). For example, [1, 2]*2 returns [1, 2, 1, 2] . Division can be used between a list and an integer (type int ) to get an element by index. This supports negative numbers. This can be achieved using list(index) or get(list, index) . In boolean context, a list is true if it is not empty","title":"Lists"},{"location":"0.23/Language/06values/#none","text":"None is a value to denote the absence of other values. It is accessible trought the None built-in variable. No operation can be used on None . In boolean context, None is false.","title":"None"},{"location":"0.23/Language/06values/#modules","text":"A module is a value containing various useful functions and constants. A list of modules can be found here . Importing modules is detailed here . The procedure to create your own module is detailed here . No operation can be used on modules. In boolean context, a module is true. Changed in 0.22.0-beta Prior to 0.22.0-beta, a module was false in boolean context.","title":"Modules"},{"location":"0.23/Language/07variables/","text":"Variables Definition Use the syntax var identifier = value (see identifiers and values ) to assign the value value to the variable named identifier . The expression var identifier = value returns value . To assign the same value to multiple variables, you can use var variable1 = var variable2 = var variable3 = value . If you want to assign multiple values to multiple variables, you can use var variable1, variable2 = value1, value2 . This can be used to swap variables: var a, b = b, a . Except for keywords , there are no prohibited variable name. Edition You can edit variables by multiple ways: var a = value ; var a += value : same as var a = a + value ; var a ++ : same as var a += 1 ; var a -= value : same as var a = a - value ; var a -- : same as var a -= 1 ; var a *= value : same as var a = a * value ; var a /= value : same as var a = a / value ; var a ^= value : same as var a = a ^ value ; var a //= value : same as var a = a // value ; var a %= value : same as var a = a % value ; var a ||= value : same as var a = a or value ; var a &&= value : same as var a = a and value ; var a ^^^= value : same as var a = a xor value ; var a |= value : same as var a = a | value ; var a &= value : same as var a = a & value ; var a ^^= value : same as var a = a ^^ value ; var a === value : same as var a = a == value ; var a <== value : same as var a = a <= value ; var a <<= value : same as var a = a < value ; var a >== value : same as var a = a >= value ; var a >>= value : same as var a = a > value . Info For details about these operators, see this page . Note You can also edit multiple variables at the same time: var a, b += 1, 2 : same as var a += 1 ; var b += 2 var a, b ++ : same as var a, b += 1, 1 var a, b //= b, a : same as var c = a ; var a //= b ; var b //= c ; del c Access To access to a variable, you can: give the identifier: foo (returns the value of foo ) use the special syntax: foo ? bar ? a ? b (returns the value of foo if it is defined, otherwise the value of bar ... You can put as much ? identifier as you want.) Then, you can put an expression at the end, such as 2 . In this case, the value returned will be 2 if none of the given identifiers is defined. Deletion If you don't need a variable anymore, you can delete it with the del keyword: del identifier . Examples var foo = var bar = 12 while foo != bar - 1 then var bar -= 1 (see while loop ) Example for deletion Create a variable a , the delete it: nougaro> var a = 1 1 nougaro> del a But be careful! It can return errors: nougaro> var a = 1 1 nougaro> del a nougaro> del a Traceback (more recent call last): In file <stdin>, line 1, in <program>: del a ^ NotDefinedError: a is not defined.","title":"Variables"},{"location":"0.23/Language/07variables/#variables","text":"","title":"Variables"},{"location":"0.23/Language/07variables/#definition","text":"Use the syntax var identifier = value (see identifiers and values ) to assign the value value to the variable named identifier . The expression var identifier = value returns value . To assign the same value to multiple variables, you can use var variable1 = var variable2 = var variable3 = value . If you want to assign multiple values to multiple variables, you can use var variable1, variable2 = value1, value2 . This can be used to swap variables: var a, b = b, a . Except for keywords , there are no prohibited variable name.","title":"Definition"},{"location":"0.23/Language/07variables/#edition","text":"You can edit variables by multiple ways: var a = value ; var a += value : same as var a = a + value ; var a ++ : same as var a += 1 ; var a -= value : same as var a = a - value ; var a -- : same as var a -= 1 ; var a *= value : same as var a = a * value ; var a /= value : same as var a = a / value ; var a ^= value : same as var a = a ^ value ; var a //= value : same as var a = a // value ; var a %= value : same as var a = a % value ; var a ||= value : same as var a = a or value ; var a &&= value : same as var a = a and value ; var a ^^^= value : same as var a = a xor value ; var a |= value : same as var a = a | value ; var a &= value : same as var a = a & value ; var a ^^= value : same as var a = a ^^ value ; var a === value : same as var a = a == value ; var a <== value : same as var a = a <= value ; var a <<= value : same as var a = a < value ; var a >== value : same as var a = a >= value ; var a >>= value : same as var a = a > value . Info For details about these operators, see this page . Note You can also edit multiple variables at the same time: var a, b += 1, 2 : same as var a += 1 ; var b += 2 var a, b ++ : same as var a, b += 1, 1 var a, b //= b, a : same as var c = a ; var a //= b ; var b //= c ; del c","title":"Edition"},{"location":"0.23/Language/07variables/#access","text":"To access to a variable, you can: give the identifier: foo (returns the value of foo ) use the special syntax: foo ? bar ? a ? b (returns the value of foo if it is defined, otherwise the value of bar ... You can put as much ? identifier as you want.) Then, you can put an expression at the end, such as 2 . In this case, the value returned will be 2 if none of the given identifiers is defined.","title":"Access"},{"location":"0.23/Language/07variables/#deletion","text":"If you don't need a variable anymore, you can delete it with the del keyword: del identifier .","title":"Deletion"},{"location":"0.23/Language/07variables/#examples","text":"var foo = var bar = 12 while foo != bar - 1 then var bar -= 1 (see while loop )","title":"Examples"},{"location":"0.23/Language/07variables/#example-for-deletion","text":"Create a variable a , the delete it: nougaro> var a = 1 1 nougaro> del a But be careful! It can return errors: nougaro> var a = 1 1 nougaro> del a nougaro> del a Traceback (more recent call last): In file <stdin>, line 1, in <program>: del a ^ NotDefinedError: a is not defined.","title":"Example for deletion"},{"location":"0.23/Language/08tests/","text":"Test statements List There is the list of test keywords in Nougaro : Nougaro Python if if then : elif elif else else assert assert Syntax if <cond> then <expr> if <cond> then <expr> else <expr> if <cond> then <expr> elif <cond> then <expr> if <cond> then <expr> elif <cond> then <expr> else <expr> if <cond> then <expr> elif <cond> then <expr> elif <cond> then <expr> if <cond> then <expr> elif <cond> then <expr> elif <cond> then <expr> else <expr> etc. Multi-line : if <cond> then <some code here> end if <cond> then <some code here> else <some other code> end if <cond> then <some code here> else <some other code> end etc. Behaviour The condition is checked. If it is true, the expression in the if branch is executed. Otherwise, Nougaro checks for an elif branch. If it exists, it re-checks the condition, etc. If none of the conditions is true and that there is an else branch, the expression in the else branch is executed. If there is no else branch, nothing is executed. Logicals constants Nougaro Python Comments True True equals to 1 False False equals to 0 Conditions Conditions can be any value , which will be interpreted in its boolean context. Conditions can also use test operators . For instance, a == b checks if a is equal to b , where a < b checks if a is strictly less than b .\u202fYou can chain multiple operators: a == b <= c != d checks if a is equal to b and if b is less than or equal to c and if c is different from d . Multiple conditions can be combined with boolean/logical operators . Here is the truth table of the logical operators: and a b a and b 0 0 0 0 1 0 1 0 0 1 1 1 or a b a or b 0 0 0 0 1 1 1 0 1 1 1 1 xor a b a xor b 0 0 0 0 1 1 1 0 1 1 1 0 not a not a 0 1 1 0 There is no priority amongst boolean operators, so for instance a and b or c xor d gives ((a and b) or c) xor d . After interpretation, a condition is always 0 or 1 ( False or True ). Examples if foo == bar then var foo = 12 if bar != foo then var foo = 12 else var bar = 13 * if foo > bar and 12 <= variable then var bar = variable elif foo < bar xor foo > variable then var foo = 3 end if foo > bar and 12 <= variable then var bar = variable elif foo < bar xor foo > variable then var foo = 3 else var foo = 12 end Assertions The assert keyword can be used to quickly check for a condition, and crash if the condition is not met. Its syntax is the following: assert (condition) assert (condition), \"error message.\" If (condition) is true, nothing happens and the program continues. However, if it is false, the program crashes with AssertionError with the error message specified in the code (or without any error message if no error message is specified.)","title":"Test statements"},{"location":"0.23/Language/08tests/#test-statements","text":"","title":"Test statements"},{"location":"0.23/Language/08tests/#list","text":"There is the list of test keywords in Nougaro : Nougaro Python if if then : elif elif else else assert assert","title":"List"},{"location":"0.23/Language/08tests/#syntax","text":"if <cond> then <expr> if <cond> then <expr> else <expr> if <cond> then <expr> elif <cond> then <expr> if <cond> then <expr> elif <cond> then <expr> else <expr> if <cond> then <expr> elif <cond> then <expr> elif <cond> then <expr> if <cond> then <expr> elif <cond> then <expr> elif <cond> then <expr> else <expr> etc. Multi-line : if <cond> then <some code here> end if <cond> then <some code here> else <some other code> end if <cond> then <some code here> else <some other code> end etc.","title":"Syntax"},{"location":"0.23/Language/08tests/#behaviour","text":"The condition is checked. If it is true, the expression in the if branch is executed. Otherwise, Nougaro checks for an elif branch. If it exists, it re-checks the condition, etc. If none of the conditions is true and that there is an else branch, the expression in the else branch is executed. If there is no else branch, nothing is executed.","title":"Behaviour"},{"location":"0.23/Language/08tests/#logicals-constants","text":"Nougaro Python Comments True True equals to 1 False False equals to 0","title":"Logicals constants"},{"location":"0.23/Language/08tests/#conditions","text":"Conditions can be any value , which will be interpreted in its boolean context. Conditions can also use test operators . For instance, a == b checks if a is equal to b , where a < b checks if a is strictly less than b .\u202fYou can chain multiple operators: a == b <= c != d checks if a is equal to b and if b is less than or equal to c and if c is different from d . Multiple conditions can be combined with boolean/logical operators . Here is the truth table of the logical operators:","title":"Conditions"},{"location":"0.23/Language/08tests/#and","text":"a b a and b 0 0 0 0 1 0 1 0 0 1 1 1","title":"and"},{"location":"0.23/Language/08tests/#or","text":"a b a or b 0 0 0 0 1 1 1 0 1 1 1 1","title":"or"},{"location":"0.23/Language/08tests/#xor","text":"a b a xor b 0 0 0 0 1 1 1 0 1 1 1 0","title":"xor"},{"location":"0.23/Language/08tests/#not","text":"a not a 0 1 1 0 There is no priority amongst boolean operators, so for instance a and b or c xor d gives ((a and b) or c) xor d . After interpretation, a condition is always 0 or 1 ( False or True ).","title":"not"},{"location":"0.23/Language/08tests/#examples","text":"if foo == bar then var foo = 12 if bar != foo then var foo = 12 else var bar = 13 * if foo > bar and 12 <= variable then var bar = variable elif foo < bar xor foo > variable then var foo = 3 end if foo > bar and 12 <= variable then var bar = variable elif foo < bar xor foo > variable then var foo = 3 else var foo = 12 end","title":"Examples"},{"location":"0.23/Language/08tests/#assertions","text":"The assert keyword can be used to quickly check for a condition, and crash if the condition is not met. Its syntax is the following: assert (condition) assert (condition), \"error message.\" If (condition) is true, nothing happens and the program continues. However, if it is false, the program crashes with AssertionError with the error message specified in the code (or without any error message if no error message is specified.)","title":"Assertions"},{"location":"0.23/Language/09loops/","text":"Loops Loops are made to execute the same piece of code multiple times in a row. Here is a list of available loops in Nougaro: Nougaro Python C/C++ for for for while while while do ... then loop while (nothing) do ... while for The for loop can have two usages: browse every element in a list (or a str ), or iterate a certain number of times. for each To browse every element in a list (or a str ), use the following syntax: # One line for identifier in list then ... # Multiple lines for identifier in list then ... ... end For each element of the list, the variable identifier will be set to the corresponding element, and this variable can be used inside the loop. for i = ... to ... # One line for identifier = start_value to end_value then ... for identifier = start_value to end_value step step_value then ... # Multiple lines for identifier = start_value to end_value then ... ... end for identifier = start_value to end_value step step_value then ... ... end start_value , end_value and step_value are integers . If step_value is not specified, the default value is 0. This loop starts by setting the variable identifier to start_value , then executes the loop. It then adds step_value to identifier . If the value of identifier is greater than or equal to end_value , the loops stops without executing. Otherwise, it runs until this condition is reached. Note In for loops, the start value can be less than the end value. In that case, don\u2019t forget to give a negative step! while The while loop is used to repeat a piece of code as long as a condition is met. It has the following syntax: # One line while condition then ... # Multiple lines while condition then ... ... end do The do loop is used to execute a piece of code a first time, then repeat it as long as a condition is met. It has the following syntax: # One line do ... then loop while condition # Multiple lines do ... ... then loop while condition Labels Added in 0.20.0-beta Labels were added in 0.20.0-beta. You can label a loop using for:label , while:label or do:label . Labels are identifiers . You can use labels with break and continue . break , continue Changed in 0.20.0-beta Prior to 0.20.0-beta, break and continue did append None to the return list. To re-enable this behaviour, you can enable appendNoneOnBreak or appendNoneOnContinue metas . Added in 0.20.0-beta Labels were added in 0.20.0-beta. The break statement completely stops the loop. If there is a returned list, the value is not added to this list. You can use break and return ... to return a specific value. The continue statement omit the code after it, and execute another time the loop like if the last time was ended. continue and break work normally at the first execution of a do body. continue:label will continue the loop that has this label. If you\u2019re in an :inner loop inside a :label loop, the :inner loop will break and the :label loop will continue. break:label will break the loop that has this label. If you\u2019re in an :inner loop inside a :label loop, the :inner AND the :label loop will break.","title":"Loops"},{"location":"0.23/Language/09loops/#loops","text":"Loops are made to execute the same piece of code multiple times in a row. Here is a list of available loops in Nougaro: Nougaro Python C/C++ for for for while while while do ... then loop while (nothing) do ... while","title":"Loops"},{"location":"0.23/Language/09loops/#for","text":"The for loop can have two usages: browse every element in a list (or a str ), or iterate a certain number of times.","title":"for"},{"location":"0.23/Language/09loops/#for-each","text":"To browse every element in a list (or a str ), use the following syntax: # One line for identifier in list then ... # Multiple lines for identifier in list then ... ... end For each element of the list, the variable identifier will be set to the corresponding element, and this variable can be used inside the loop.","title":"for each"},{"location":"0.23/Language/09loops/#for-i-to","text":"# One line for identifier = start_value to end_value then ... for identifier = start_value to end_value step step_value then ... # Multiple lines for identifier = start_value to end_value then ... ... end for identifier = start_value to end_value step step_value then ... ... end start_value , end_value and step_value are integers . If step_value is not specified, the default value is 0. This loop starts by setting the variable identifier to start_value , then executes the loop. It then adds step_value to identifier . If the value of identifier is greater than or equal to end_value , the loops stops without executing. Otherwise, it runs until this condition is reached. Note In for loops, the start value can be less than the end value. In that case, don\u2019t forget to give a negative step!","title":"for i = ... to ..."},{"location":"0.23/Language/09loops/#while","text":"The while loop is used to repeat a piece of code as long as a condition is met. It has the following syntax: # One line while condition then ... # Multiple lines while condition then ... ... end","title":"while"},{"location":"0.23/Language/09loops/#do","text":"The do loop is used to execute a piece of code a first time, then repeat it as long as a condition is met. It has the following syntax: # One line do ... then loop while condition # Multiple lines do ... ... then loop while condition","title":"do"},{"location":"0.23/Language/09loops/#labels","text":"Added in 0.20.0-beta Labels were added in 0.20.0-beta. You can label a loop using for:label , while:label or do:label . Labels are identifiers . You can use labels with break and continue .","title":"Labels"},{"location":"0.23/Language/09loops/#break-continue","text":"Changed in 0.20.0-beta Prior to 0.20.0-beta, break and continue did append None to the return list. To re-enable this behaviour, you can enable appendNoneOnBreak or appendNoneOnContinue metas . Added in 0.20.0-beta Labels were added in 0.20.0-beta. The break statement completely stops the loop. If there is a returned list, the value is not added to this list. You can use break and return ... to return a specific value. The continue statement omit the code after it, and execute another time the loop like if the last time was ended. continue and break work normally at the first execution of a do body. continue:label will continue the loop that has this label. If you\u2019re in an :inner loop inside a :label loop, the :inner loop will break and the :label loop will continue. break:label will break the loop that has this label. If you\u2019re in an :inner loop inside a :label loop, the :inner AND the :label loop will break.","title":"break, continue"},{"location":"0.23/Language/10functions/","text":"Functions Internal type: func . No operation can be used on functions. Functions are true in boolean context. Changed in 0.22.0-beta Prior to 0.22.0-beta, functions were false in boolean context. Definition To define a function, use the def keyword and an arrow: def name(param1, param2) -> <some code here> . You can omit the name, but in this case you have to call directly the function or to store it in a variable: (def (param1) -> <some code here>)(<arg1>) ; var somefunc = def (param1) -> <some code here> You can define multi-line functions: def name(param1, param2, param3) <some code here> end Note The arguments given and the variables created inside the function are deleted at the end of the function execution. Similarly, the variables created outside the function and before its definition are accessible inside the function, but modifications are not saved. Info There can be 0 parameters. Optional parameters Note Added in 0.22.0-beta To define optional parameters, use this syntax: def name(param1, param2, param3)(optional_param1=default_value, optional_param2=default_value) <some code here> end return statement In the code executed by your function, there can be the return statement. It stops the function. If a value is placed after the statement, the function will return this value when called. In the other cases, it will return None . Call Call a function using this syntax: func(arg1, arg2) You can store arguments in a list and use *list . E.g. func(*list_) , func(*[1, 2, 3]) . Optional arguments Note Added in 0.22.0-beta You can omit optional arguments, which will set them to their default value. In this case: def name(param1, param2, param3)(optional_param1=default_value, optional_param2=default_value) , if you want to keep optional_param1 to its default value but not optional_param2 , you can use: name(argument1, argument2, argument3, <default>, optional_argument2) (keep < and > around <default> ) Examples def foo(a, b) -> a*b - b def bar(a, b) -> (a-1)*b var c = 2 var d = 5 if foo(c, d) == bar(c, d) then var e = True else var e = False (In this case, e = 1) def foo(a, b) if a == 2 then return a + b else return b end end def foo(a, b)(should_return_none = False) if a == 2 then return a + b else if should_return_none then return return b end end foo(1, 5) # 5 foo(2, 5) # 7 foo(1, 5, <default>) # 5 foo(2, 5, <default>) # 7 foo(1, 5, True) # None foo(2, 5, True) # 7","title":"Functions"},{"location":"0.23/Language/10functions/#functions","text":"Internal type: func . No operation can be used on functions. Functions are true in boolean context. Changed in 0.22.0-beta Prior to 0.22.0-beta, functions were false in boolean context.","title":"Functions"},{"location":"0.23/Language/10functions/#definition","text":"To define a function, use the def keyword and an arrow: def name(param1, param2) -> <some code here> . You can omit the name, but in this case you have to call directly the function or to store it in a variable: (def (param1) -> <some code here>)(<arg1>) ; var somefunc = def (param1) -> <some code here> You can define multi-line functions: def name(param1, param2, param3) <some code here> end Note The arguments given and the variables created inside the function are deleted at the end of the function execution. Similarly, the variables created outside the function and before its definition are accessible inside the function, but modifications are not saved. Info There can be 0 parameters.","title":"Definition"},{"location":"0.23/Language/10functions/#optional-parameters","text":"Note Added in 0.22.0-beta To define optional parameters, use this syntax: def name(param1, param2, param3)(optional_param1=default_value, optional_param2=default_value) <some code here> end","title":"Optional parameters"},{"location":"0.23/Language/10functions/#return-statement","text":"In the code executed by your function, there can be the return statement. It stops the function. If a value is placed after the statement, the function will return this value when called. In the other cases, it will return None .","title":"return statement"},{"location":"0.23/Language/10functions/#call","text":"Call a function using this syntax: func(arg1, arg2) You can store arguments in a list and use *list . E.g. func(*list_) , func(*[1, 2, 3]) .","title":"Call"},{"location":"0.23/Language/10functions/#optional-arguments","text":"Note Added in 0.22.0-beta You can omit optional arguments, which will set them to their default value. In this case: def name(param1, param2, param3)(optional_param1=default_value, optional_param2=default_value) , if you want to keep optional_param1 to its default value but not optional_param2 , you can use: name(argument1, argument2, argument3, <default>, optional_argument2) (keep < and > around <default> )","title":"Optional arguments"},{"location":"0.23/Language/10functions/#examples","text":"def foo(a, b) -> a*b - b def bar(a, b) -> (a-1)*b var c = 2 var d = 5 if foo(c, d) == bar(c, d) then var e = True else var e = False (In this case, e = 1) def foo(a, b) if a == 2 then return a + b else return b end end def foo(a, b)(should_return_none = False) if a == 2 then return a + b else if should_return_none then return return b end end foo(1, 5) # 5 foo(2, 5) # 7 foo(1, 5, <default>) # 5 foo(2, 5, <default>) # 7 foo(1, 5, True) # None foo(2, 5, True) # 7","title":"Examples"},{"location":"0.23/Language/11attributes/","text":"Attributes Values in Nougaro can have attributes, i.e. subvalues that have a name. They can be set using the classical variable definition syntax: var variable.attribute = value They can be accessed using the dot-syntax: variable.attribute Note You can even access any name defined in the context of the value. For instance, variable.print references the print built-in function. Pro tip The next time you have a bug, document it. If it is documented, it is therefore not a bug.","title":"Attributes"},{"location":"0.23/Language/11attributes/#attributes","text":"Values in Nougaro can have attributes, i.e. subvalues that have a name. They can be set using the classical variable definition syntax: var variable.attribute = value They can be accessed using the dot-syntax: variable.attribute Note You can even access any name defined in the context of the value. For instance, variable.print references the print built-in function. Pro tip The next time you have a bug, document it. If it is documented, it is therefore not a bug.","title":"Attributes"},{"location":"0.23/Language/12classes/","text":"Classes and objects Note Added in 0.15-beta Nougaro is an object-oriented programming language, which means you can create objects using classes . Class definition To define a class, use this syntax: class Name ... end To create attributes , just use the basic var id = value syntax: class Name var a = 3 var b = 1 end To create methods , just use the basic def syntax . Access to object\u2019s attributes with this : class Name var a = 3 var b = 1 def increment_b(by) var this.b += 1 end def get_a() return this.a end end Methods are attributes themselves. Methods Internal type: method . No operation can be used on methods. Methods are true in boolean context. Changed in 0.22.0-beta Prior to 0.22.0-beta, methods were false in boolean context. Constructor value Internal type: constructor . No operation can be used on constructors. Constructors are false in boolean context. Inheritance To inherit from another class, use the class Name(Iherit) syntax: class ChildOfName(Name) var c = 3 def set_c(new_value) var this.c = new_value end def a_plus_b_plus_c() return this.get_a() + this.b + this.c end end Object Classes can be instanced into objects by calling them. Example: var instance = Name() instance.increment_b(10) assert instance.b == 11 Internal type: Name (depends on the class\u2019 name). No operation can be used on objects. Objects are false in boolean context. Example See the stack.noug example located in ./examples/ in the main Nougaro repository.","title":"Classes and objects"},{"location":"0.23/Language/12classes/#classes-and-objects","text":"Note Added in 0.15-beta Nougaro is an object-oriented programming language, which means you can create objects using classes .","title":"Classes and objects"},{"location":"0.23/Language/12classes/#class-definition","text":"To define a class, use this syntax: class Name ... end To create attributes , just use the basic var id = value syntax: class Name var a = 3 var b = 1 end To create methods , just use the basic def syntax . Access to object\u2019s attributes with this : class Name var a = 3 var b = 1 def increment_b(by) var this.b += 1 end def get_a() return this.a end end Methods are attributes themselves.","title":"Class definition"},{"location":"0.23/Language/12classes/#methods","text":"Internal type: method . No operation can be used on methods. Methods are true in boolean context. Changed in 0.22.0-beta Prior to 0.22.0-beta, methods were false in boolean context.","title":"Methods"},{"location":"0.23/Language/12classes/#constructor-value","text":"Internal type: constructor . No operation can be used on constructors. Constructors are false in boolean context.","title":"Constructor value"},{"location":"0.23/Language/12classes/#inheritance","text":"To inherit from another class, use the class Name(Iherit) syntax: class ChildOfName(Name) var c = 3 def set_c(new_value) var this.c = new_value end def a_plus_b_plus_c() return this.get_a() + this.b + this.c end end","title":"Inheritance"},{"location":"0.23/Language/12classes/#object","text":"Classes can be instanced into objects by calling them. Example: var instance = Name() instance.increment_b(10) assert instance.b == 11 Internal type: Name (depends on the class\u2019 name). No operation can be used on objects. Objects are false in boolean context.","title":"Object"},{"location":"0.23/Language/12classes/#example","text":"See the stack.noug example located in ./examples/ in the main Nougaro repository.","title":"Example"},{"location":"0.23/Language/13read_and_write_files/","text":"Read and write in files Read To read a file, use read \"path/to/file.ext\" or read \"path/to/file\" line_number . You can assign this value to a variable by using read \"file\" >> identifier line_number or var identifier = read \"file\" line_number . line_number is an integer and is optional. You can use \"<stdin>\" as file name to get a line of input from the user. It is exactly like the input built-in function . The read expression returns the content of the file (or of the line). Write To write in a file, use write \"sometext\" >> \"path/to/file.ext\" line_number . line_number is an integer and is optional. To overwrite the content when you write, replace >> by !>> . You can use \"<stdout>\" as file name to print a text in the console. It is exactly like the print built-in function . If you overwrite the contents of <stdout> , the console is cleared (exactly like the clear built-in function .) The write expression returns the text that was wrote in the file.","title":"Read and write in files"},{"location":"0.23/Language/13read_and_write_files/#read-and-write-in-files","text":"","title":"Read and write in files"},{"location":"0.23/Language/13read_and_write_files/#read","text":"To read a file, use read \"path/to/file.ext\" or read \"path/to/file\" line_number . You can assign this value to a variable by using read \"file\" >> identifier line_number or var identifier = read \"file\" line_number . line_number is an integer and is optional. You can use \"<stdin>\" as file name to get a line of input from the user. It is exactly like the input built-in function . The read expression returns the content of the file (or of the line).","title":"Read"},{"location":"0.23/Language/13read_and_write_files/#write","text":"To write in a file, use write \"sometext\" >> \"path/to/file.ext\" line_number . line_number is an integer and is optional. To overwrite the content when you write, replace >> by !>> . You can use \"<stdout>\" as file name to print a text in the console. It is exactly like the print built-in function . If you overwrite the contents of <stdout> , the console is cleared (exactly like the clear built-in function .) The write expression returns the text that was wrote in the file.","title":"Write"},{"location":"0.23/Language/14import/","text":"Import and export import and export are two keywords related to modules /libraries. Import The import keyword is used to import a module in the current code. It follows the syntax import name or import name as alias . It checks for name in Nougaro stardard library and in the current directory for a file named name.noug . dir.subdir.name looks for ./dir/subdir/name.noug . Note: the \u201ccurrent directory\u201d is the directory of the file that were executed. For instance, if the file foo.noug (in the directory project ) imported dir.bar , and that dir/bar.noug has import name , name is checked in the project directory. The \u201ccurrent directory\u201d is the working directory ( pwd ) if you launched an interactive session (shell). The import keyword created a module value with, as attributes, all the values exported by the module. Export The export keyword is used to export a value in a module, that will become an attribute of the module\u2019s value when imported. It follows the syntax export name or export expression as name . More in this page .","title":"Import and export"},{"location":"0.23/Language/14import/#import-and-export","text":"import and export are two keywords related to modules /libraries.","title":"Import and export"},{"location":"0.23/Language/14import/#import","text":"The import keyword is used to import a module in the current code. It follows the syntax import name or import name as alias . It checks for name in Nougaro stardard library and in the current directory for a file named name.noug . dir.subdir.name looks for ./dir/subdir/name.noug . Note: the \u201ccurrent directory\u201d is the directory of the file that were executed. For instance, if the file foo.noug (in the directory project ) imported dir.bar , and that dir/bar.noug has import name , name is checked in the project directory. The \u201ccurrent directory\u201d is the working directory ( pwd ) if you launched an interactive session (shell). The import keyword created a module value with, as attributes, all the values exported by the module.","title":"Import"},{"location":"0.23/Language/14import/#export","text":"The export keyword is used to export a value in a module, that will become an attribute of the module\u2019s value when imported. It follows the syntax export name or export expression as name . More in this page .","title":"Export"},{"location":"0.23/Language/15metas/","text":"Metas Note Added in 0.19.0-beta Metas are a way to use other (or old) functionnalities in Nougaro. They\u2019re used by adding @meta metaName or @meta metaName value at the beginning of a file or in an interactive shell. Note that, instead of @ , you can use any of those prefixes: #@ , %@ , @@ , -@ , $@ . appendNoneOnBreak Note Added in 0.20.0-beta If enabled, this meta forces a break statement to append None to the list returned by the loop . appendNoneOnContinue Note Added in 0.20.0-beta If enabled, this meta forces a continue statement to append None to the list returned by the loop . legacyAbs The legacyAbs meta lets you use the old syntax (in the prototype-1 version) for absolute value, which is |...| . However, this meta disables the bitwise or operation . Example: @meta legacyAbs print(|-1|) # 1 var a = 12 print(|-a|) # 12 nbspBetweenFrenchGuillemets The nbspBetweenFrenchGuillemets meta requires you, if you use the french string quotes ( \u00ab\u00bb ), to put a no-break space (or a narrow no-break space) after the \u00ab and before the \u00bb . Example: @meta nbspBetweenFrenchGuillemets print(\u00ab hello, world \u00bb) /* hello, world * note that the quotes aren\u2019t regular spaces */ setTheTestValueTo Sets __the_test_value__ to the str value given in the meta value If no value is given, it sets it to None .","title":"Metas"},{"location":"0.23/Language/15metas/#metas","text":"Note Added in 0.19.0-beta Metas are a way to use other (or old) functionnalities in Nougaro. They\u2019re used by adding @meta metaName or @meta metaName value at the beginning of a file or in an interactive shell. Note that, instead of @ , you can use any of those prefixes: #@ , %@ , @@ , -@ , $@ .","title":"Metas"},{"location":"0.23/Language/15metas/#appendnoneonbreak","text":"Note Added in 0.20.0-beta If enabled, this meta forces a break statement to append None to the list returned by the loop .","title":"appendNoneOnBreak"},{"location":"0.23/Language/15metas/#appendnoneoncontinue","text":"Note Added in 0.20.0-beta If enabled, this meta forces a continue statement to append None to the list returned by the loop .","title":"appendNoneOnContinue"},{"location":"0.23/Language/15metas/#legacyabs","text":"The legacyAbs meta lets you use the old syntax (in the prototype-1 version) for absolute value, which is |...| . However, this meta disables the bitwise or operation . Example: @meta legacyAbs print(|-1|) # 1 var a = 12 print(|-a|) # 12","title":"legacyAbs"},{"location":"0.23/Language/15metas/#nbspbetweenfrenchguillemets","text":"The nbspBetweenFrenchGuillemets meta requires you, if you use the french string quotes ( \u00ab\u00bb ), to put a no-break space (or a narrow no-break space) after the \u00ab and before the \u00bb . Example: @meta nbspBetweenFrenchGuillemets print(\u00ab hello, world \u00bb) /* hello, world * note that the quotes aren\u2019t regular spaces */","title":"nbspBetweenFrenchGuillemets"},{"location":"0.23/Language/15metas/#setthetestvalueto","text":"Sets __the_test_value__ to the str value given in the meta value If no value is given, it sets it to None .","title":"setTheTestValueTo"},{"location":"0.23/Language/16dollar_print/","text":"Dollar-print syntax The dollar-print syntax is the following: $indentifier It checks if identifier exists, and if so, it prits it. Otherwise, it prints $identifier . If no identifier is given, it prints $ .","title":"Dollar-print syntax"},{"location":"0.23/Language/16dollar_print/#dollar-print-syntax","text":"The dollar-print syntax is the following: $indentifier It checks if identifier exists, and if so, it prits it. Otherwise, it prints $identifier . If no identifier is given, it prints $ .","title":"Dollar-print syntax"},{"location":"0.23/stdlib/01builtin-variables/","text":"List of built-in variables Useful ones __args__ Note Added in 0.16.0-beta List of the command line arguments (type string). Examples (assuming your Nougaro command is noug ): noug -c \"print(__args__)\" -t d 78876876 -v tth prints [\"-c\", \"-t\", \"d\", \"78876876\", \"-v\", \"tth\"] noug examples/args.noug -t d 78876876 -v tth prints [\"examples/args.noug\", \"-t\", \"d\", \"78876876\", \"-v\", \"tth\"] (check out the contents of args.noug ) noug -c \"print(__args__)\" prints [\"-c\"] entering the shell then entering print(__args__) prints [] Nougaro informations Note This section is duplicated in this file __noug_version__ : string of the Nougaro version (e.g. \"0.15.0-beta\".) You can use the noug_version lib to have better informations. __data_version__ : the Nougaro data version, an internal version keeping track of changes in the config file directory structure __version_id__ : an ID increased at least once per version __python_version__ : string of the Python version (e.g. \"3.10.5\") __noug_dir__ : string of the absolute path of the directory where shell.(py/exe) is located. May be used with file I/O read and write statements. OS informations __os_name__ : name of the Operating System (e.g. \"Windows\", \"Linux\", \"Darwin\" \u2013 for macOS \u2013, \"Java\" \u2013 for Jython \u2013, \u2026) __os_release__ : release of the OS (e.g. \"10\" for Windows 10, \"Vista\" for Windows Vista.) __os_version__ : version of the OS (e.g. \"10.0.19044\" for Windows 10 build 19044.) Examples print(\"You use Nougaro version \" + __noug_version__ + \", interpreted with Python \" + __python_version__) print(\"You use \" + __os_name__ + \" \" + __os_release__ + \" \" + __os_version__) On the Jean Dubois' old computer, under Windows 10 21H2, it returns: You use Nougaro version alpha 0.8.1, interpreted with Python 3.10.5 You use Windows 10 10.0.19044 And under his Linux: You use nougaro version beta 0.14, interpreted with Python 3.11.4 You use Linux 6.2.0-27-generic #28-Ubuntu SMP PREEMPT_DYNAMIC Wed Jul 12 22:39:51 UTC 2023 Note that this code is in example.noug","title":"List of built-in variables"},{"location":"0.23/stdlib/01builtin-variables/#list-of-built-in-variables","text":"","title":"List of built-in variables"},{"location":"0.23/stdlib/01builtin-variables/#useful-ones","text":"","title":"Useful ones"},{"location":"0.23/stdlib/01builtin-variables/#__args__","text":"Note Added in 0.16.0-beta List of the command line arguments (type string). Examples (assuming your Nougaro command is noug ): noug -c \"print(__args__)\" -t d 78876876 -v tth prints [\"-c\", \"-t\", \"d\", \"78876876\", \"-v\", \"tth\"] noug examples/args.noug -t d 78876876 -v tth prints [\"examples/args.noug\", \"-t\", \"d\", \"78876876\", \"-v\", \"tth\"] (check out the contents of args.noug ) noug -c \"print(__args__)\" prints [\"-c\"] entering the shell then entering print(__args__) prints []","title":"__args__"},{"location":"0.23/stdlib/01builtin-variables/#nougaro-informations","text":"Note This section is duplicated in this file __noug_version__ : string of the Nougaro version (e.g. \"0.15.0-beta\".) You can use the noug_version lib to have better informations. __data_version__ : the Nougaro data version, an internal version keeping track of changes in the config file directory structure __version_id__ : an ID increased at least once per version __python_version__ : string of the Python version (e.g. \"3.10.5\") __noug_dir__ : string of the absolute path of the directory where shell.(py/exe) is located. May be used with file I/O read and write statements.","title":"Nougaro informations"},{"location":"0.23/stdlib/01builtin-variables/#os-informations","text":"__os_name__ : name of the Operating System (e.g. \"Windows\", \"Linux\", \"Darwin\" \u2013 for macOS \u2013, \"Java\" \u2013 for Jython \u2013, \u2026) __os_release__ : release of the OS (e.g. \"10\" for Windows 10, \"Vista\" for Windows Vista.) __os_version__ : version of the OS (e.g. \"10.0.19044\" for Windows 10 build 19044.)","title":"OS informations"},{"location":"0.23/stdlib/01builtin-variables/#examples","text":"print(\"You use Nougaro version \" + __noug_version__ + \", interpreted with Python \" + __python_version__) print(\"You use \" + __os_name__ + \" \" + __os_release__ + \" \" + __os_version__) On the Jean Dubois' old computer, under Windows 10 21H2, it returns: You use Nougaro version alpha 0.8.1, interpreted with Python 3.10.5 You use Windows 10 10.0.19044 And under his Linux: You use nougaro version beta 0.14, interpreted with Python 3.11.4 You use Linux 6.2.0-27-generic #28-Ubuntu SMP PREEMPT_DYNAMIC Wed Jul 12 22:39:51 UTC 2023 Note that this code is in example.noug","title":"Examples"},{"location":"0.23/stdlib/02builtin-functions/","text":"List of built-in functions Note In this page, type of parameters are noted using the param: type syntax (type can eventually be Any ), and optional parameters are noted between <> and their default value are specified with = . Also, *args tells that this function can take any number of arguments. Input/Output print Syntax: print(str: str) . Prints str in console. Returns None. Example: print(\"hello, world!\") . print_ret Syntax: print_ret(str: str) . Prints str in console and returns it. Example: print_ret(\"hello, world!\") . print_in_red Syntax: print_in_red(str: str) . Prints str in red in console. Returns None. Example: print_in_red(\"Error: this error is RED\") . print_in_red_ret Syntax: print_in_red_ret(str: str) . Prints str in red in console and returns it. Example: print_in_red_ret(\"Error: this error is RED and returned\") print_in_green Syntax: print_in_green(str: str) . Prints str in green in console. Returns None. Example: print_in_green(\"Info: this info is GREEN\") . print_in_green_ret Syntax: print_in_green_ret(str: str) . Prints str in green in console and returns it. Example: print_in_green_ret(\"Info: this info is GREEN and returned\") input Syntax: input(<text_to_display: str = \"\">) . Inputs a str. If text_to_display is specified, it is printed as a prompt. input_int Syntax: input_int(<text_to_display: str = \"\">) . Inputs an int. If text_to_display is specified, it is printed as a prompt. input_num Syntax: input_num(<text_to_display: str = \"\">) . Inputs an int or a float. If text_to_display is specified, it is printed as a prompt. Types Note Python isinstance() returns True if value is an object of the given type. type Syntax: type(value: Any) Returns a str of the internal type of the value. It can be str , int , float , list , func , module , ... is_int Syntax: is_int(value: Any) Returns True if value is an integer , False if it is not. Corresponds to isinstance(value, int) . is_float Syntax: is_float(value: Any) Returns True if value is a float , False if it is not. Corresponds to isinstance(value, float) . is_num Syntax: is_num(value: Any) Returns True if value is a number , False if it is not. Corresponds to isinstance(value, float) or isinstance(value, int) . is_str Syntax: is_str(value: Any) Returns True if value is a string , False if it is not. Corresponds to isinstance(value, str) . is_list Syntax: is_list(value: Any) Returns True if value is a list , False if it is not. Corresponds to isinstance(value, list) . is_func Syntax: is_func(value: Any) Returns True if value is a function , False if it is not. Corresponds to isinstance(value, BaseFunction) where BaseFunction is function, method and builtin function. is_module Syntax: is_module(value: Any) Returns True if value is a module , False if it is not. Corresponds to isinstance(value, module) . Example: import math; is_module(math) will be True , but is_module(3.2) will be False . is_none Syntax: is_none(value: Any) Returns True if value is None , False if it is not. Corresponds to isinstance(value, NoneValue) or value is None . is_constructor Added in 0.20.0-beta Syntax: is_constructor(value: Any) Returns True if value is a constructor , False if it is not. Corresponds to isinstance(value, Constructor) . is_object Added in 0.20.0-beta Syntax: is_object(value: Any) Returns True if value is an object , False if it is not. Corresponds to isinstance(value, object) . Note: in Nougaro, everything is not an object! Type conversions str Syntax: str(value: Any) Converts value to string (may return an error). int Syntax: str(value: Any) Converts value to int (may return an error). float Syntax: str(value: Any) Converts value to float (may return an error). list Syntax: str(value: Any) Converts value to list (may return an error). String and lists operators upper Syntax: upper(value: str) Returns upper-cased string. Example: upper('nougaro') returns 'NOUGARO' . lower Syntax: lower(value: str) Returns lower-cased string. Example: lower('NOUGARO') returns 'nougaro' . split Syntax: split(value: str, <char: str = \" \">) Returns splitted string. For example, split('a b c') returns ['a', 'b', 'c'] ; split('a b c', 'b') returns ['a ', ' c'] . startswith Syntax: startswith(value: str, substring: str) Returns True if value starts with substring . Example: \"nougaro\" starts with \"noug\" , but \"canal du midi\" does not start with \"minimes\" . endswith Syntax: endswith(value: str, substring: str) Returns True if value ends with substring . Example: \"nougaro\" ends with \"garo\" , but \"canal du midi\" does not end with \"minimes\" . len Syntax: len(value: list | str) Returns the number of elements in a list (i.e. its length), or the number of chars in a str. reverse Syntax: reverse(value: list | str) Reverses list or string value by reference and returns the result. Example: reverse([1, 2, 3]) is [3, 2, 1] . append Syntax: append(list: list, value: Any) Appends value at the end of the list. Returns a list. If the list is a variable, edits the variable. pop Syntax: pop(list: list, <index: int = -1>) : Deletes value at given index. Returns the popped element. If the list is a variable, edits the variable. If index is not given, the last element of the list is popped. insert Syntax: insert(list: list, value: Any, <index: int = -1>) Inserts value at the given index in the list. replace Syntax: replace(list: list, index: int, value: Any) Replaces value at the given index in the list. extend Syntax: extend(list1: list, list2: list, <remove_duplicates: int = False>) Appends to list1 the elements of list2 . Returns list1 . If list1 is a variable, edits the variable. If remove_duplicates is True, removes the list2 elements already in list1 before extending. get Syntax: get(list: list, index: int) Returns the element of the list at the given index. max Syntax: max(list: list, <ignore_not_num: int = False>) Returns the maximum element of the list. Ignores elements that are not numbers if ignore_not_num is True , otherwise crashes if such element exists. min Syntax: min(list: list, <ignore_not_num: int = False>) Returns the minimum element of the list. Ignores elements that are not numbers if ignore_not_num is True , otherwise crashes if such element exists. sort Syntax: sort(value: list, <mode: str = \"timsort\">) Sorts list value according to mode mode . Available modes are: timsort (default), stalin , sleep , miracle and panic . timsort is Python\u2019s default algorithm stalin sends to gulag values that are not sorted (i.e. pop them from the list). Example: [1, 4, 3, 7, 6, 10, 2, 5, 23] will be sorted as [1, 4, 7, 10, 23] . sleep sort take only a list of positive integers. It starts as many threads as elements in the list, and each thread waits for as much seconds as the element. For instance, when the list [5, 2, 3, 0] is passed in sleepsort, it starts by launching 4 threads that wait for 5, 2, 3 and 0 seconds. When a thread finishes to wait, it append its element to the list. Use the mode sleep-verbose to see what\u2019s happening. miracle sort literally waits for a miracle. It checks if the list is sorted, and if it is not, it checks again. If a cosmic ray (or another miracle ) flips the right bits in your RAM so the list is sorted, miraclesort will return the sorted list. panic sort checks if the list is sorted. If so, it returns it. If the list is not sorted, this causes an illegal hardware instruction (Unix and GNU/Linux) or a segfault (Windows). Number operators round Syntax: round(number: int | float, <n_digits: int = 0>) Rounds number to the closest number with n_digits decimals. n_digits may be 0 or negative, in which case the returned type is int . Changed in 0.22.0-beta The round built-in function previously returned int only when n_digits was 0 (now it is the case when n_digits \u2a7d 0) Characters and Unicode Note There\u2019s more in the unicodedata module. ord Syntax: ord(c: str) Returns an integer representing the Unicode code point of that c . c is a string with only one character. Ex: ord('a') returns 97 and ord('\u20ac') returns 8364 . chr Syntax: chr(i: int) Returns the string representing the character whose Unicode code point is the integer i . For example, chr(97) returns the string 'a' , and chr(8364) returns the string '\u20ac' . License __gpl__ Syntax: __gpl__(<print_in_term: int = False>) If print_in_term is True , prints the General Public License 3.0 in the terminal. Otherwise, it opens the GPL in the default system program. Files __path_exists__ Syntax: path_exists(path: str) Returns True ( 1 ) if the path exists, False ( 0 ) otherwise. Technical exit Syntax: exit(<stop_code: int | str = 0>) Just quits the interpreter. clear Syntax: clear() Clears the screen. Returns None . void Syntax: void(*args) Does nothing. Returns None . run Syntax: run(file_name: str) Executes the code in the file file_name . example Syntax: example(<example_name: str | None = None>, <return_example_value: int = False>) Executes the code in the file examples/(example_name).noug . If example_name is None , executes the code in the file example.noug . If return_example_value is True , returns the list value from the example execution. system_call Warning This function may be dangerous, because any system command can be executed. Syntax: system_call(cmd: str) Calls cmd . Prints the result of the command and returnt the stop code as str . __python__ Warning This function may be dangerous, because any Python code can be executed. Syntax: __python__(source: str) Runs Python\u2019s eval(source) . __is_keyword__ Syntax: __is_keyword__(word: str) Check if word is a valid Nougaro keyword . __is_valid_token_type__ Syntax: __is_valid_token_type__(tok_type: str) Checks if tok_type is a valid Nougaro token type, such as 'EE' or 'BITWISENOT'. __test__ Syntax: __test__(<should_print_ok: int = False>, <should_i_return: int = False>) Executes the test file for the Nougaro interpreter. If should_print_ok is True , prints \u201cOK\u201d each times a test was succesful. If should_i_return is true, returns the value of the interpreted file. __py_type__ Syntax: __py_type__(value) Returns the string of Python\u2019s type(value) . For instance, __py_type__(__py_type__) is \"<class 'src.runtime.values.functions.builtin_function.BuiltInFunction'>\" __how_many_lines_of_code__ Syntax: __how_many_lines_of_code__(<print_details: Any = True>) Lets you know how many lines of code there are in Nougaro. If print_details is True, details how many lines of code they are in each file. Mathematical functions Please refer to Math module .","title":"List of built-in functions"},{"location":"0.23/stdlib/02builtin-functions/#list-of-built-in-functions","text":"Note In this page, type of parameters are noted using the param: type syntax (type can eventually be Any ), and optional parameters are noted between <> and their default value are specified with = . Also, *args tells that this function can take any number of arguments.","title":"List of built-in functions"},{"location":"0.23/stdlib/02builtin-functions/#inputoutput","text":"","title":"Input/Output"},{"location":"0.23/stdlib/02builtin-functions/#print","text":"Syntax: print(str: str) . Prints str in console. Returns None. Example: print(\"hello, world!\") .","title":"print"},{"location":"0.23/stdlib/02builtin-functions/#print_ret","text":"Syntax: print_ret(str: str) . Prints str in console and returns it. Example: print_ret(\"hello, world!\") .","title":"print_ret"},{"location":"0.23/stdlib/02builtin-functions/#print_in_red","text":"Syntax: print_in_red(str: str) . Prints str in red in console. Returns None. Example: print_in_red(\"Error: this error is RED\") .","title":"print_in_red"},{"location":"0.23/stdlib/02builtin-functions/#print_in_red_ret","text":"Syntax: print_in_red_ret(str: str) . Prints str in red in console and returns it. Example: print_in_red_ret(\"Error: this error is RED and returned\")","title":"print_in_red_ret"},{"location":"0.23/stdlib/02builtin-functions/#print_in_green","text":"Syntax: print_in_green(str: str) . Prints str in green in console. Returns None. Example: print_in_green(\"Info: this info is GREEN\") .","title":"print_in_green"},{"location":"0.23/stdlib/02builtin-functions/#print_in_green_ret","text":"Syntax: print_in_green_ret(str: str) . Prints str in green in console and returns it. Example: print_in_green_ret(\"Info: this info is GREEN and returned\")","title":"print_in_green_ret"},{"location":"0.23/stdlib/02builtin-functions/#input","text":"Syntax: input(<text_to_display: str = \"\">) . Inputs a str. If text_to_display is specified, it is printed as a prompt.","title":"input"},{"location":"0.23/stdlib/02builtin-functions/#input_int","text":"Syntax: input_int(<text_to_display: str = \"\">) . Inputs an int. If text_to_display is specified, it is printed as a prompt.","title":"input_int"},{"location":"0.23/stdlib/02builtin-functions/#input_num","text":"Syntax: input_num(<text_to_display: str = \"\">) . Inputs an int or a float. If text_to_display is specified, it is printed as a prompt.","title":"input_num"},{"location":"0.23/stdlib/02builtin-functions/#types","text":"Note Python isinstance() returns True if value is an object of the given type.","title":"Types"},{"location":"0.23/stdlib/02builtin-functions/#type","text":"Syntax: type(value: Any) Returns a str of the internal type of the value. It can be str , int , float , list , func , module , ...","title":"type"},{"location":"0.23/stdlib/02builtin-functions/#is_int","text":"Syntax: is_int(value: Any) Returns True if value is an integer , False if it is not. Corresponds to isinstance(value, int) .","title":"is_int"},{"location":"0.23/stdlib/02builtin-functions/#is_float","text":"Syntax: is_float(value: Any) Returns True if value is a float , False if it is not. Corresponds to isinstance(value, float) .","title":"is_float"},{"location":"0.23/stdlib/02builtin-functions/#is_num","text":"Syntax: is_num(value: Any) Returns True if value is a number , False if it is not. Corresponds to isinstance(value, float) or isinstance(value, int) .","title":"is_num"},{"location":"0.23/stdlib/02builtin-functions/#is_str","text":"Syntax: is_str(value: Any) Returns True if value is a string , False if it is not. Corresponds to isinstance(value, str) .","title":"is_str"},{"location":"0.23/stdlib/02builtin-functions/#is_list","text":"Syntax: is_list(value: Any) Returns True if value is a list , False if it is not. Corresponds to isinstance(value, list) .","title":"is_list"},{"location":"0.23/stdlib/02builtin-functions/#is_func","text":"Syntax: is_func(value: Any) Returns True if value is a function , False if it is not. Corresponds to isinstance(value, BaseFunction) where BaseFunction is function, method and builtin function.","title":"is_func"},{"location":"0.23/stdlib/02builtin-functions/#is_module","text":"Syntax: is_module(value: Any) Returns True if value is a module , False if it is not. Corresponds to isinstance(value, module) . Example: import math; is_module(math) will be True , but is_module(3.2) will be False .","title":"is_module"},{"location":"0.23/stdlib/02builtin-functions/#is_none","text":"Syntax: is_none(value: Any) Returns True if value is None , False if it is not. Corresponds to isinstance(value, NoneValue) or value is None .","title":"is_none"},{"location":"0.23/stdlib/02builtin-functions/#is_constructor","text":"Added in 0.20.0-beta Syntax: is_constructor(value: Any) Returns True if value is a constructor , False if it is not. Corresponds to isinstance(value, Constructor) .","title":"is_constructor"},{"location":"0.23/stdlib/02builtin-functions/#is_object","text":"Added in 0.20.0-beta Syntax: is_object(value: Any) Returns True if value is an object , False if it is not. Corresponds to isinstance(value, object) . Note: in Nougaro, everything is not an object!","title":"is_object"},{"location":"0.23/stdlib/02builtin-functions/#type-conversions","text":"","title":"Type conversions"},{"location":"0.23/stdlib/02builtin-functions/#str","text":"Syntax: str(value: Any) Converts value to string (may return an error).","title":"str"},{"location":"0.23/stdlib/02builtin-functions/#int","text":"Syntax: str(value: Any) Converts value to int (may return an error).","title":"int"},{"location":"0.23/stdlib/02builtin-functions/#float","text":"Syntax: str(value: Any) Converts value to float (may return an error).","title":"float"},{"location":"0.23/stdlib/02builtin-functions/#list","text":"Syntax: str(value: Any) Converts value to list (may return an error).","title":"list"},{"location":"0.23/stdlib/02builtin-functions/#string-and-lists-operators","text":"","title":"String and lists operators"},{"location":"0.23/stdlib/02builtin-functions/#upper","text":"Syntax: upper(value: str) Returns upper-cased string. Example: upper('nougaro') returns 'NOUGARO' .","title":"upper"},{"location":"0.23/stdlib/02builtin-functions/#lower","text":"Syntax: lower(value: str) Returns lower-cased string. Example: lower('NOUGARO') returns 'nougaro' .","title":"lower"},{"location":"0.23/stdlib/02builtin-functions/#split","text":"Syntax: split(value: str, <char: str = \" \">) Returns splitted string. For example, split('a b c') returns ['a', 'b', 'c'] ; split('a b c', 'b') returns ['a ', ' c'] .","title":"split"},{"location":"0.23/stdlib/02builtin-functions/#startswith","text":"Syntax: startswith(value: str, substring: str) Returns True if value starts with substring . Example: \"nougaro\" starts with \"noug\" , but \"canal du midi\" does not start with \"minimes\" .","title":"startswith"},{"location":"0.23/stdlib/02builtin-functions/#endswith","text":"Syntax: endswith(value: str, substring: str) Returns True if value ends with substring . Example: \"nougaro\" ends with \"garo\" , but \"canal du midi\" does not end with \"minimes\" .","title":"endswith"},{"location":"0.23/stdlib/02builtin-functions/#len","text":"Syntax: len(value: list | str) Returns the number of elements in a list (i.e. its length), or the number of chars in a str.","title":"len"},{"location":"0.23/stdlib/02builtin-functions/#reverse","text":"Syntax: reverse(value: list | str) Reverses list or string value by reference and returns the result. Example: reverse([1, 2, 3]) is [3, 2, 1] .","title":"reverse"},{"location":"0.23/stdlib/02builtin-functions/#append","text":"Syntax: append(list: list, value: Any) Appends value at the end of the list. Returns a list. If the list is a variable, edits the variable.","title":"append"},{"location":"0.23/stdlib/02builtin-functions/#pop","text":"Syntax: pop(list: list, <index: int = -1>) : Deletes value at given index. Returns the popped element. If the list is a variable, edits the variable. If index is not given, the last element of the list is popped.","title":"pop"},{"location":"0.23/stdlib/02builtin-functions/#insert","text":"Syntax: insert(list: list, value: Any, <index: int = -1>) Inserts value at the given index in the list.","title":"insert"},{"location":"0.23/stdlib/02builtin-functions/#replace","text":"Syntax: replace(list: list, index: int, value: Any) Replaces value at the given index in the list.","title":"replace"},{"location":"0.23/stdlib/02builtin-functions/#extend","text":"Syntax: extend(list1: list, list2: list, <remove_duplicates: int = False>) Appends to list1 the elements of list2 . Returns list1 . If list1 is a variable, edits the variable. If remove_duplicates is True, removes the list2 elements already in list1 before extending.","title":"extend"},{"location":"0.23/stdlib/02builtin-functions/#get","text":"Syntax: get(list: list, index: int) Returns the element of the list at the given index.","title":"get"},{"location":"0.23/stdlib/02builtin-functions/#max","text":"Syntax: max(list: list, <ignore_not_num: int = False>) Returns the maximum element of the list. Ignores elements that are not numbers if ignore_not_num is True , otherwise crashes if such element exists.","title":"max"},{"location":"0.23/stdlib/02builtin-functions/#min","text":"Syntax: min(list: list, <ignore_not_num: int = False>) Returns the minimum element of the list. Ignores elements that are not numbers if ignore_not_num is True , otherwise crashes if such element exists.","title":"min"},{"location":"0.23/stdlib/02builtin-functions/#sort","text":"Syntax: sort(value: list, <mode: str = \"timsort\">) Sorts list value according to mode mode . Available modes are: timsort (default), stalin , sleep , miracle and panic . timsort is Python\u2019s default algorithm stalin sends to gulag values that are not sorted (i.e. pop them from the list). Example: [1, 4, 3, 7, 6, 10, 2, 5, 23] will be sorted as [1, 4, 7, 10, 23] . sleep sort take only a list of positive integers. It starts as many threads as elements in the list, and each thread waits for as much seconds as the element. For instance, when the list [5, 2, 3, 0] is passed in sleepsort, it starts by launching 4 threads that wait for 5, 2, 3 and 0 seconds. When a thread finishes to wait, it append its element to the list. Use the mode sleep-verbose to see what\u2019s happening. miracle sort literally waits for a miracle. It checks if the list is sorted, and if it is not, it checks again. If a cosmic ray (or another miracle ) flips the right bits in your RAM so the list is sorted, miraclesort will return the sorted list. panic sort checks if the list is sorted. If so, it returns it. If the list is not sorted, this causes an illegal hardware instruction (Unix and GNU/Linux) or a segfault (Windows).","title":"sort"},{"location":"0.23/stdlib/02builtin-functions/#number-operators","text":"","title":"Number operators"},{"location":"0.23/stdlib/02builtin-functions/#round","text":"Syntax: round(number: int | float, <n_digits: int = 0>) Rounds number to the closest number with n_digits decimals. n_digits may be 0 or negative, in which case the returned type is int . Changed in 0.22.0-beta The round built-in function previously returned int only when n_digits was 0 (now it is the case when n_digits \u2a7d 0)","title":"round"},{"location":"0.23/stdlib/02builtin-functions/#characters-and-unicode","text":"Note There\u2019s more in the unicodedata module.","title":"Characters and Unicode"},{"location":"0.23/stdlib/02builtin-functions/#ord","text":"Syntax: ord(c: str) Returns an integer representing the Unicode code point of that c . c is a string with only one character. Ex: ord('a') returns 97 and ord('\u20ac') returns 8364 .","title":"ord"},{"location":"0.23/stdlib/02builtin-functions/#chr","text":"Syntax: chr(i: int) Returns the string representing the character whose Unicode code point is the integer i . For example, chr(97) returns the string 'a' , and chr(8364) returns the string '\u20ac' .","title":"chr"},{"location":"0.23/stdlib/02builtin-functions/#license","text":"","title":"License"},{"location":"0.23/stdlib/02builtin-functions/#__gpl__","text":"Syntax: __gpl__(<print_in_term: int = False>) If print_in_term is True , prints the General Public License 3.0 in the terminal. Otherwise, it opens the GPL in the default system program.","title":"__gpl__"},{"location":"0.23/stdlib/02builtin-functions/#files","text":"","title":"Files"},{"location":"0.23/stdlib/02builtin-functions/#__path_exists__","text":"Syntax: path_exists(path: str) Returns True ( 1 ) if the path exists, False ( 0 ) otherwise.","title":"__path_exists__"},{"location":"0.23/stdlib/02builtin-functions/#technical","text":"","title":"Technical"},{"location":"0.23/stdlib/02builtin-functions/#exit","text":"Syntax: exit(<stop_code: int | str = 0>) Just quits the interpreter.","title":"exit"},{"location":"0.23/stdlib/02builtin-functions/#clear","text":"Syntax: clear() Clears the screen. Returns None .","title":"clear"},{"location":"0.23/stdlib/02builtin-functions/#void","text":"Syntax: void(*args) Does nothing. Returns None .","title":"void"},{"location":"0.23/stdlib/02builtin-functions/#run","text":"Syntax: run(file_name: str) Executes the code in the file file_name .","title":"run"},{"location":"0.23/stdlib/02builtin-functions/#example","text":"Syntax: example(<example_name: str | None = None>, <return_example_value: int = False>) Executes the code in the file examples/(example_name).noug . If example_name is None , executes the code in the file example.noug . If return_example_value is True , returns the list value from the example execution.","title":"example"},{"location":"0.23/stdlib/02builtin-functions/#system_call","text":"Warning This function may be dangerous, because any system command can be executed. Syntax: system_call(cmd: str) Calls cmd . Prints the result of the command and returnt the stop code as str .","title":"system_call"},{"location":"0.23/stdlib/02builtin-functions/#__python__","text":"Warning This function may be dangerous, because any Python code can be executed. Syntax: __python__(source: str) Runs Python\u2019s eval(source) .","title":"__python__"},{"location":"0.23/stdlib/02builtin-functions/#__is_keyword__","text":"Syntax: __is_keyword__(word: str) Check if word is a valid Nougaro keyword .","title":"__is_keyword__"},{"location":"0.23/stdlib/02builtin-functions/#__is_valid_token_type__","text":"Syntax: __is_valid_token_type__(tok_type: str) Checks if tok_type is a valid Nougaro token type, such as 'EE' or 'BITWISENOT'.","title":"__is_valid_token_type__"},{"location":"0.23/stdlib/02builtin-functions/#__test__","text":"Syntax: __test__(<should_print_ok: int = False>, <should_i_return: int = False>) Executes the test file for the Nougaro interpreter. If should_print_ok is True , prints \u201cOK\u201d each times a test was succesful. If should_i_return is true, returns the value of the interpreted file.","title":"__test__"},{"location":"0.23/stdlib/02builtin-functions/#__py_type__","text":"Syntax: __py_type__(value) Returns the string of Python\u2019s type(value) . For instance, __py_type__(__py_type__) is \"<class 'src.runtime.values.functions.builtin_function.BuiltInFunction'>\"","title":"__py_type__"},{"location":"0.23/stdlib/02builtin-functions/#__how_many_lines_of_code__","text":"Syntax: __how_many_lines_of_code__(<print_details: Any = True>) Lets you know how many lines of code there are in Nougaro. If print_details is True, details how many lines of code they are in each file.","title":"__how_many_lines_of_code__"},{"location":"0.23/stdlib/02builtin-functions/#mathematical-functions","text":"Please refer to Math module .","title":"Mathematical functions"},{"location":"0.23/stdlib/modules/","text":"Modules Modules allow you to spend less time coding, and often implement things that would be usually undoable in Nougaro. You can import a module using the import keyword. Here is the list of available Modules in Nougaro: Debug Hello (just prints \u201cHello, world!\u201d when imported) Lorem Math Noug Version Random Statistics Time Unicodedata Webbrowser","title":"Modules"},{"location":"0.23/stdlib/modules/#modules","text":"Modules allow you to spend less time coding, and often implement things that would be usually undoable in Nougaro. You can import a module using the import keyword. Here is the list of available Modules in Nougaro: Debug Hello (just prints \u201cHello, world!\u201d when imported) Lorem Math Noug Version Random Statistics Time Unicodedata Webbrowser","title":"Modules"},{"location":"0.23/stdlib/modules/debug/","text":"Debug Source code Debug is a lib that contains some debugging tools. Constants debug.is_debug_enabled : 1 if DEBUG mode is enabled, else 0 debug.should_print_context : 1 if PRINT CONTEXT debug option is enabled, else 0 debug.should_print_time (new in 0.20.0-beta): 1 if PRINT TIME debug option is enabled, else 0 Functions debug.debug_mode_enable Syntax: debug.debug_mode_enable Enables DEBUG mode. debug.enable Alias for debug.debug_mode_enable debug.debug_mode_disable Syntax: debug.debug_mode_disable Disables DEBUG mode. debug.disable Alias for debug.debug_mode_disable debug.print_context Syntax: debug.print_context Enables PRINT CONTEXT debug option. debug.stop_print_context Syntax: debug.stop_print_context Disables PRINT CONTEXT debug option. debug.print_time Added in 0.20.0-beta Syntax: debug.print_time Enables PRINT TIME debug option. debug.stop_print_time Added in 0.20.0-beta Syntax: debug.stop_print_time Disables PRINT TIME debug option. debug.enable_all Changed in 0.20.0-beta Now also enables PRINT TIME debug option. Syntax: debug.enable_all Enables DEBUG mode with all its options debug.disable_all Changed in 0.20.0-beta Now also disables PRINT TIME debug option. Syntax: debug.disable_all Disables DEBUG mode and all its options.","title":"Debug"},{"location":"0.23/stdlib/modules/debug/#debug","text":"Source code Debug is a lib that contains some debugging tools.","title":"Debug"},{"location":"0.23/stdlib/modules/debug/#constants","text":"debug.is_debug_enabled : 1 if DEBUG mode is enabled, else 0 debug.should_print_context : 1 if PRINT CONTEXT debug option is enabled, else 0 debug.should_print_time (new in 0.20.0-beta): 1 if PRINT TIME debug option is enabled, else 0","title":"Constants"},{"location":"0.23/stdlib/modules/debug/#functions","text":"","title":"Functions"},{"location":"0.23/stdlib/modules/debug/#debugdebug_mode_enable","text":"Syntax: debug.debug_mode_enable Enables DEBUG mode.","title":"debug.debug_mode_enable"},{"location":"0.23/stdlib/modules/debug/#debugenable","text":"Alias for debug.debug_mode_enable","title":"debug.enable"},{"location":"0.23/stdlib/modules/debug/#debugdebug_mode_disable","text":"Syntax: debug.debug_mode_disable Disables DEBUG mode.","title":"debug.debug_mode_disable"},{"location":"0.23/stdlib/modules/debug/#debugdisable","text":"Alias for debug.debug_mode_disable","title":"debug.disable"},{"location":"0.23/stdlib/modules/debug/#debugprint_context","text":"Syntax: debug.print_context Enables PRINT CONTEXT debug option.","title":"debug.print_context"},{"location":"0.23/stdlib/modules/debug/#debugstop_print_context","text":"Syntax: debug.stop_print_context Disables PRINT CONTEXT debug option.","title":"debug.stop_print_context"},{"location":"0.23/stdlib/modules/debug/#debugprint_time","text":"Added in 0.20.0-beta Syntax: debug.print_time Enables PRINT TIME debug option.","title":"debug.print_time"},{"location":"0.23/stdlib/modules/debug/#debugstop_print_time","text":"Added in 0.20.0-beta Syntax: debug.stop_print_time Disables PRINT TIME debug option.","title":"debug.stop_print_time"},{"location":"0.23/stdlib/modules/debug/#debugenable_all","text":"Changed in 0.20.0-beta Now also enables PRINT TIME debug option. Syntax: debug.enable_all Enables DEBUG mode with all its options","title":"debug.enable_all"},{"location":"0.23/stdlib/modules/debug/#debugdisable_all","text":"Changed in 0.20.0-beta Now also disables PRINT TIME debug option. Syntax: debug.disable_all Disables DEBUG mode and all its options.","title":"debug.disable_all"},{"location":"0.23/stdlib/modules/lorem/","text":"Lorem Source code Lorem is a lib to generate Lorem Ipsum texts (dummy texts). Function lorem.ipsum Syntax: lorem.ipsum(paragraphs: int) Generate a random Lorem Ipsum text (dummy text) with as many paragraphs as specified in paragraphs .","title":"Lorem"},{"location":"0.23/stdlib/modules/lorem/#lorem","text":"Source code Lorem is a lib to generate Lorem Ipsum texts (dummy texts).","title":"Lorem"},{"location":"0.23/stdlib/modules/lorem/#function","text":"","title":"Function"},{"location":"0.23/stdlib/modules/lorem/#loremipsum","text":"Syntax: lorem.ipsum(paragraphs: int) Generate a random Lorem Ipsum text (dummy text) with as many paragraphs as specified in paragraphs .","title":"lorem.ipsum"},{"location":"0.23/stdlib/modules/math/","text":"Math Source code The math module can be imported with the statement import math . The math module is used to do math. To do statistics, use the statistics module. Constants math.pi : Pi . \\pi = 3.141592653589793 math.tau : Tau . \\tau = 6.283185307179586 math.sqrt_pi : square root of pi ( math.sqrt(math.pi) ). \\sqrt\\pi = 1.7724538509055159 math.sqrt_tau : square root of tau ( math.sqrt(math.tau) ). \\sqrt\\tau = 2.5066282746310002 math.e : Euler's number . e = 2.718281828459045 Functions math.sqrt Syntax: math.sqrt(n) Returns \\sqrt{n} (square root of n ), n \\in \\mathbb{R}_+ math.isqrt Syntax: math.isqrt(n) Returns \\left\\lfloor\\sqrt{n}\\right\\rfloor (integer square root of n ), n \\in \\mathbb{N} math.root Syntax: math.root(n, k) Returns the \\sqrt[k]{n} ( k -th root of n ), n \\in \\mathbb{R}_+, k \\in \\mathbb{R} math.iroot Syntax: math.iroot(n, k) Returns \\left\\lfloor\\sqrt[k]{n}\\right\\rfloor (integer k -th root of n ), n \\in \\mathbb{R}_+, k \\in \\mathbb{R} math.degrees Syntax: math.degrees(angle) Transforms a radian angle to a degree angle. \\verb|angle| \\in \\mathbb{R} math.radians Syntax: math.radians(angle) Transform a degree angle to a radian angle. \\verb|angle| \\in \\mathbb{R} math.sin Syntax: math.sin(angle) Returns sine of an angle in radians. \\verb|angle| \\in \\mathbb{R} math.cos Syntax: math.cos(angle) Returns cosine of an angle in radians. \\verb|angle| \\in \\mathbb{R} math.tan Syntax: math.tan(angle) Returns tangent of an angle in radians. \\verb|angle| \\in \\mathbb{R} math.asin Syntax: math.asin(sin) Returns arcsine of an sin (result in radians). \\verb|sin| \\in [-1, 1] math.acos Syntax: math.acos(cos) Returns arccosine of an cos (result in radians). \\verb|cos| \\in [-1, 1] math.atan Syntax: math.atan(tan) Returns arctangent of an tan (result in radians). \\verb|tan| \\in \\mathbb{R} math.abs Syntax: math.abs(n) Returns \\left|n\\right| (absolute value of n ), n \\in \\mathbb{R} math.log Syntax: math.log(n, <base>) Returns the natural logarithm ( base = e ) of n if no base is given, or the logarithm of n in the given base. n, base \\in \\mathbb{R} math.log2 Syntax: math.log2(n) Same as math.log(n, 2) . n \\in \\mathbb{R} math.factorial Added in 0.19.0-beta Syntax: math.factorial(n) Returns n! ( factorial of n ). n \\in \\mathbb{N}","title":"Math"},{"location":"0.23/stdlib/modules/math/#math","text":"Source code The math module can be imported with the statement import math . The math module is used to do math. To do statistics, use the statistics module.","title":"Math"},{"location":"0.23/stdlib/modules/math/#constants","text":"math.pi : Pi . \\pi = 3.141592653589793 math.tau : Tau . \\tau = 6.283185307179586 math.sqrt_pi : square root of pi ( math.sqrt(math.pi) ). \\sqrt\\pi = 1.7724538509055159 math.sqrt_tau : square root of tau ( math.sqrt(math.tau) ). \\sqrt\\tau = 2.5066282746310002 math.e : Euler's number . e = 2.718281828459045","title":"Constants"},{"location":"0.23/stdlib/modules/math/#functions","text":"","title":"Functions"},{"location":"0.23/stdlib/modules/math/#mathsqrt","text":"Syntax: math.sqrt(n) Returns \\sqrt{n} (square root of n ), n \\in \\mathbb{R}_+","title":"math.sqrt"},{"location":"0.23/stdlib/modules/math/#mathisqrt","text":"Syntax: math.isqrt(n) Returns \\left\\lfloor\\sqrt{n}\\right\\rfloor (integer square root of n ), n \\in \\mathbb{N}","title":"math.isqrt"},{"location":"0.23/stdlib/modules/math/#mathroot","text":"Syntax: math.root(n, k) Returns the \\sqrt[k]{n} ( k -th root of n ), n \\in \\mathbb{R}_+, k \\in \\mathbb{R}","title":"math.root"},{"location":"0.23/stdlib/modules/math/#mathiroot","text":"Syntax: math.iroot(n, k) Returns \\left\\lfloor\\sqrt[k]{n}\\right\\rfloor (integer k -th root of n ), n \\in \\mathbb{R}_+, k \\in \\mathbb{R}","title":"math.iroot"},{"location":"0.23/stdlib/modules/math/#mathdegrees","text":"Syntax: math.degrees(angle) Transforms a radian angle to a degree angle. \\verb|angle| \\in \\mathbb{R}","title":"math.degrees"},{"location":"0.23/stdlib/modules/math/#mathradians","text":"Syntax: math.radians(angle) Transform a degree angle to a radian angle. \\verb|angle| \\in \\mathbb{R}","title":"math.radians"},{"location":"0.23/stdlib/modules/math/#mathsin","text":"Syntax: math.sin(angle) Returns sine of an angle in radians. \\verb|angle| \\in \\mathbb{R}","title":"math.sin"},{"location":"0.23/stdlib/modules/math/#mathcos","text":"Syntax: math.cos(angle) Returns cosine of an angle in radians. \\verb|angle| \\in \\mathbb{R}","title":"math.cos"},{"location":"0.23/stdlib/modules/math/#mathtan","text":"Syntax: math.tan(angle) Returns tangent of an angle in radians. \\verb|angle| \\in \\mathbb{R}","title":"math.tan"},{"location":"0.23/stdlib/modules/math/#mathasin","text":"Syntax: math.asin(sin) Returns arcsine of an sin (result in radians). \\verb|sin| \\in [-1, 1]","title":"math.asin"},{"location":"0.23/stdlib/modules/math/#mathacos","text":"Syntax: math.acos(cos) Returns arccosine of an cos (result in radians). \\verb|cos| \\in [-1, 1]","title":"math.acos"},{"location":"0.23/stdlib/modules/math/#mathatan","text":"Syntax: math.atan(tan) Returns arctangent of an tan (result in radians). \\verb|tan| \\in \\mathbb{R}","title":"math.atan"},{"location":"0.23/stdlib/modules/math/#mathabs","text":"Syntax: math.abs(n) Returns \\left|n\\right| (absolute value of n ), n \\in \\mathbb{R}","title":"math.abs"},{"location":"0.23/stdlib/modules/math/#mathlog","text":"Syntax: math.log(n, <base>) Returns the natural logarithm ( base = e ) of n if no base is given, or the logarithm of n in the given base. n, base \\in \\mathbb{R}","title":"math.log"},{"location":"0.23/stdlib/modules/math/#mathlog2","text":"Syntax: math.log2(n) Same as math.log(n, 2) . n \\in \\mathbb{R}","title":"math.log2"},{"location":"0.23/stdlib/modules/math/#mathfactorial","text":"Added in 0.19.0-beta Syntax: math.factorial(n) Returns n! ( factorial of n ). n \\in \\mathbb{N}","title":"math.factorial"},{"location":"0.23/stdlib/modules/noug_version/","text":"Noug Version Source code The noug_version module can be imported with the statement import noug_version . The noug_version module is used to have better informations about the current Nougaro version. Note Nougaro uses semantic versionning . We recommend you to read the whole semver specification. Constants Examples are given considering the version 3.14.15-rc.92 noug_version.major : integer of the MAJOR version ( 3 ) noug_version.minor : integer of the MINOR version ( 14 ) noug_version.patch : integer of the PATCH version ( 15 ) noug_version.phase : string of the PHASE name ( \"rc\" ). Usually alpha , beta , rc , stable . noug_version.release_serial : integer of the MINOR INDEV version ( 92 ). It resets when the phase switches back to stable . When the version is under the form 3.14.15-stable or 0.16.0-beta , this number is 0 . noug_version.version_list : list under the form [major, minor, patch, phase, release_serial] (in our example: [3, 14, 15, \"rc\", 92] ) Changed in 0.19.0 and 0.20.0 noug_version.release_serial is the new name for noug_version.phase_minor in 0.19.0-beta. noug_version.phase_minor has been removed in 0.20.0-beta. Functions noug_version.clean_version_for_gh Version history Added in 0.19.0-beta Changed in 0.23.0-beta: added optional parameters print_value and return_value . Syntax: noug_version.clean_version_for_gh(<print_value=False>, <return_value=True>) Generates a beautiful str for the GitHub issues or PRs. If print_value is true, it prints the value. If return_value is true, it returns the value. noug_version.clean_version_for_nuitka_under_windows Added in 0.23.0-beta Syntax: noug_version.clean_version_for_nuitka_under_windows(<print_value=False>, <return_value=True>) Generates a string under the form \"<major>.<minor>.<patch>\" , or \"<major>.<minor>.<patch>.<release_serial>\" if release_serial \u2260 0. This is meant to be passed as the --windows-product-version option of Ntuika. If print_value is true, it prints the value. If return_value is true, it returns the value.","title":"Noug Version"},{"location":"0.23/stdlib/modules/noug_version/#noug-version","text":"Source code The noug_version module can be imported with the statement import noug_version . The noug_version module is used to have better informations about the current Nougaro version. Note Nougaro uses semantic versionning . We recommend you to read the whole semver specification.","title":"Noug Version"},{"location":"0.23/stdlib/modules/noug_version/#constants","text":"Examples are given considering the version 3.14.15-rc.92 noug_version.major : integer of the MAJOR version ( 3 ) noug_version.minor : integer of the MINOR version ( 14 ) noug_version.patch : integer of the PATCH version ( 15 ) noug_version.phase : string of the PHASE name ( \"rc\" ). Usually alpha , beta , rc , stable . noug_version.release_serial : integer of the MINOR INDEV version ( 92 ). It resets when the phase switches back to stable . When the version is under the form 3.14.15-stable or 0.16.0-beta , this number is 0 . noug_version.version_list : list under the form [major, minor, patch, phase, release_serial] (in our example: [3, 14, 15, \"rc\", 92] ) Changed in 0.19.0 and 0.20.0 noug_version.release_serial is the new name for noug_version.phase_minor in 0.19.0-beta. noug_version.phase_minor has been removed in 0.20.0-beta.","title":"Constants"},{"location":"0.23/stdlib/modules/noug_version/#functions","text":"","title":"Functions"},{"location":"0.23/stdlib/modules/noug_version/#noug_versionclean_version_for_gh","text":"Version history Added in 0.19.0-beta Changed in 0.23.0-beta: added optional parameters print_value and return_value . Syntax: noug_version.clean_version_for_gh(<print_value=False>, <return_value=True>) Generates a beautiful str for the GitHub issues or PRs. If print_value is true, it prints the value. If return_value is true, it returns the value.","title":"noug_version.clean_version_for_gh"},{"location":"0.23/stdlib/modules/noug_version/#noug_versionclean_version_for_nuitka_under_windows","text":"Added in 0.23.0-beta Syntax: noug_version.clean_version_for_nuitka_under_windows(<print_value=False>, <return_value=True>) Generates a string under the form \"<major>.<minor>.<patch>\" , or \"<major>.<minor>.<patch>.<release_serial>\" if release_serial \u2260 0. This is meant to be passed as the --windows-product-version option of Ntuika. If print_value is true, it prints the value. If return_value is true, it returns the value.","title":"noug_version.clean_version_for_nuitka_under_windows"},{"location":"0.23/stdlib/modules/random/","text":"Random Source code The random module can be imported with the statement import random . The random module is used to generate random numbers. Functions random.randint Syntax: random.randint(a: int, b: int) Generates a random integer between a and b . a and b must be integers . The condition a <= b MUST be verified. random.random Syntax: random.random Generates a random floating number between 0.0000000000000000 and 1.0000000000000000. random.choice Syntax: random.choice(list) Returns a random element of the list . random.shuffle Syntax: random.shuffle(list) Shuffles (by reference) and returns list . random.seed Syntax: random.seed(int) Sets the seed to generate numbers to int .","title":"Random"},{"location":"0.23/stdlib/modules/random/#random","text":"Source code The random module can be imported with the statement import random . The random module is used to generate random numbers.","title":"Random"},{"location":"0.23/stdlib/modules/random/#functions","text":"","title":"Functions"},{"location":"0.23/stdlib/modules/random/#randomrandint","text":"Syntax: random.randint(a: int, b: int) Generates a random integer between a and b . a and b must be integers . The condition a <= b MUST be verified.","title":"random.randint"},{"location":"0.23/stdlib/modules/random/#randomrandom","text":"Syntax: random.random Generates a random floating number between 0.0000000000000000 and 1.0000000000000000.","title":"random.random"},{"location":"0.23/stdlib/modules/random/#randomchoice","text":"Syntax: random.choice(list) Returns a random element of the list .","title":"random.choice"},{"location":"0.23/stdlib/modules/random/#randomshuffle","text":"Syntax: random.shuffle(list) Shuffles (by reference) and returns list .","title":"random.shuffle"},{"location":"0.23/stdlib/modules/random/#randomseed","text":"Syntax: random.seed(int) Sets the seed to generate numbers to int .","title":"random.seed"},{"location":"0.23/stdlib/modules/statistics/","text":"Statistics Source code The statistics module can be imported with the statement import statistics . The statistics module is used to do statistics. To do math, use the math module. Functions statistics.mean Syntax: statistics.mean(list) Calculates the mean of a list of numbers. statistics.geometric_mean Syntax: statistics.geometric_mean(list) Calculates the geometric mean of a list of positive numbers. statistics.harmonic_mean Syntax: statistics.harmonic_mean Calculates the harmonic mean of a list of positive numbers. statistics.median Syntax: statistics.median(list) Calculates the median of a list of numbers. statistics.quantiles Syntax: statistics.quantiles(list, n=4, method='exclusive') Cuts a list of numbers in n parts and returns a list of the values where the list was cut, using exclusive or inclusive method. n and method are optional. Disclamer from the Python source code Notes on methods for computing quantiles There is no one perfect way to compute quantiles. Here we offer two methods that serve common needs. Most other packages surveyed offered at least one or both of these two, making them \"standard\" in the sense of \"widely-adopted and reproducible\". They are also easy to explain, easy to compute manually, and have straight-forward interpretations that aren't surprising. The default method is known as \"R6\", \"PERCENTILE.EXC\", or \"expected value of rank order statistics\". The alternative method is known as \"R7\", \"PERCENTILE.INC\", or \"mode of rank order statistics\". For sample data where there is a positive probability for values beyond the range of the data, the R6 exclusive method is a reasonable choice. Consider a random sample of nine values from a population with a uniform distribution from 0.0 to 1.0. The distribution of the third ranked sample point is described by betavariate(alpha=3, beta=7) which has mode=0.250, median=0.286, and mean=0.300. Only the latter (which corresponds with R6) gives the desired cut point with 30% of the population falling below that value, making it comparable to a result from an inv_cdf() function. The R6 exclusive method is also idempotent. For describing population data where the end points are known to be included in the data, the R7 inclusive method is a reasonable choice. Instead of the mean, it uses the mode of the beta distribution for the interior points. Per Hyndman & Fan, \"One nice property is that the vertices of Q7(p) divide the range into n - 1 intervals, and exactly 100p% of the intervals lie to the left of Q7(p) and 100(1 - p)% of the intervals lie to the right of Q7(p).\" If needed, other methods could be added. However, for now, the position is that fewer options make for easier choices and that external packages can be used for anything more advanced. statistics.scope(list) Syntax: statistics.scope(list) Calculates the scope of a list of numbers: max(list) - min(list) . statistics.mode(list) Syntax: statistics.mode(list) Calculates the mode of a list of numbers, i.e. the most common value. statistics.multimode(value) Syntax: statistics.multimode(value) Calculates the modes of a list or a str, i.e. the most common values. It returns a list.","title":"Statistics"},{"location":"0.23/stdlib/modules/statistics/#statistics","text":"Source code The statistics module can be imported with the statement import statistics . The statistics module is used to do statistics. To do math, use the math module.","title":"Statistics"},{"location":"0.23/stdlib/modules/statistics/#functions","text":"","title":"Functions"},{"location":"0.23/stdlib/modules/statistics/#statisticsmean","text":"Syntax: statistics.mean(list) Calculates the mean of a list of numbers.","title":"statistics.mean"},{"location":"0.23/stdlib/modules/statistics/#statisticsgeometric_mean","text":"Syntax: statistics.geometric_mean(list) Calculates the geometric mean of a list of positive numbers.","title":"statistics.geometric_mean"},{"location":"0.23/stdlib/modules/statistics/#statisticsharmonic_mean","text":"Syntax: statistics.harmonic_mean Calculates the harmonic mean of a list of positive numbers.","title":"statistics.harmonic_mean"},{"location":"0.23/stdlib/modules/statistics/#statisticsmedian","text":"Syntax: statistics.median(list) Calculates the median of a list of numbers.","title":"statistics.median"},{"location":"0.23/stdlib/modules/statistics/#statisticsquantiles","text":"Syntax: statistics.quantiles(list, n=4, method='exclusive') Cuts a list of numbers in n parts and returns a list of the values where the list was cut, using exclusive or inclusive method. n and method are optional. Disclamer from the Python source code","title":"statistics.quantiles"},{"location":"0.23/stdlib/modules/statistics/#notes-on-methods-for-computing-quantiles","text":"There is no one perfect way to compute quantiles. Here we offer two methods that serve common needs. Most other packages surveyed offered at least one or both of these two, making them \"standard\" in the sense of \"widely-adopted and reproducible\". They are also easy to explain, easy to compute manually, and have straight-forward interpretations that aren't surprising. The default method is known as \"R6\", \"PERCENTILE.EXC\", or \"expected value of rank order statistics\". The alternative method is known as \"R7\", \"PERCENTILE.INC\", or \"mode of rank order statistics\". For sample data where there is a positive probability for values beyond the range of the data, the R6 exclusive method is a reasonable choice. Consider a random sample of nine values from a population with a uniform distribution from 0.0 to 1.0. The distribution of the third ranked sample point is described by betavariate(alpha=3, beta=7) which has mode=0.250, median=0.286, and mean=0.300. Only the latter (which corresponds with R6) gives the desired cut point with 30% of the population falling below that value, making it comparable to a result from an inv_cdf() function. The R6 exclusive method is also idempotent. For describing population data where the end points are known to be included in the data, the R7 inclusive method is a reasonable choice. Instead of the mean, it uses the mode of the beta distribution for the interior points. Per Hyndman & Fan, \"One nice property is that the vertices of Q7(p) divide the range into n - 1 intervals, and exactly 100p% of the intervals lie to the left of Q7(p) and 100(1 - p)% of the intervals lie to the right of Q7(p).\" If needed, other methods could be added. However, for now, the position is that fewer options make for easier choices and that external packages can be used for anything more advanced.","title":"Notes on methods for computing quantiles"},{"location":"0.23/stdlib/modules/statistics/#statisticsscopelist","text":"Syntax: statistics.scope(list) Calculates the scope of a list of numbers: max(list) - min(list) .","title":"statistics.scope(list)"},{"location":"0.23/stdlib/modules/statistics/#statisticsmodelist","text":"Syntax: statistics.mode(list) Calculates the mode of a list of numbers, i.e. the most common value.","title":"statistics.mode(list)"},{"location":"0.23/stdlib/modules/statistics/#statisticsmultimodevalue","text":"Syntax: statistics.multimode(value) Calculates the modes of a list or a str, i.e. the most common values. It returns a list.","title":"statistics.multimode(value)"},{"location":"0.23/stdlib/modules/time/","text":"Time Source code The time module can be imported with the statement import time . The time module is used to sleep for seconds or milliseconds, and to know current time, timezone and system\u2019s epoch. Constants time.timezone : the timezone (number of seconds to add to GMT) Functions time.sleep Syntax: time.sleep(seconds) Pauses the program for seconds ( int or float ) and do nothing. Returns None . time.sleep_milliseconds Syntax: time.sleep_milliseconds(milliseconds) Pauses the program for milliseconds ( integer ) and do nothing. Returns None . time.time Syntax: time.time() Returns the float value of the time in seconds since the Epoch (system-dependent, check your epoch with time.epoch() ). time.epoch Syntax: time.epoch() Returns the str value of the Epoch of your system.","title":"Time"},{"location":"0.23/stdlib/modules/time/#time","text":"Source code The time module can be imported with the statement import time . The time module is used to sleep for seconds or milliseconds, and to know current time, timezone and system\u2019s epoch.","title":"Time"},{"location":"0.23/stdlib/modules/time/#constants","text":"time.timezone : the timezone (number of seconds to add to GMT)","title":"Constants"},{"location":"0.23/stdlib/modules/time/#functions","text":"","title":"Functions"},{"location":"0.23/stdlib/modules/time/#timesleep","text":"Syntax: time.sleep(seconds) Pauses the program for seconds ( int or float ) and do nothing. Returns None .","title":"time.sleep"},{"location":"0.23/stdlib/modules/time/#timesleep_milliseconds","text":"Syntax: time.sleep_milliseconds(milliseconds) Pauses the program for milliseconds ( integer ) and do nothing. Returns None .","title":"time.sleep_milliseconds"},{"location":"0.23/stdlib/modules/time/#timetime","text":"Syntax: time.time() Returns the float value of the time in seconds since the Epoch (system-dependent, check your epoch with time.epoch() ).","title":"time.time"},{"location":"0.23/stdlib/modules/time/#timeepoch","text":"Syntax: time.epoch() Returns the str value of the Epoch of your system.","title":"time.epoch"},{"location":"0.23/stdlib/modules/unicodedata/","text":"Unicodedata Source code Credits This is massively copied from python documentation of unicodedata , under the Python Software Foundation License Version 2 . \u00a9 Copyright 2001-2023, Python Software Foundation. This text has not been edited. The unicodedata module can be imported with the statement import unicodedata . The unicodedata provides access to the Unicode database. Constants unicodedata.unicodedata_version : the version of the Unicode database used in this module. Depends on Python version! Functions unicodedata.lookup Syntax: unicodedata.lookup(name) Look up character by name. If a character with the given name is found, return the corresponding character. If not found, NotDefinedError is raised. unicodedata.name Syntax: unicodedata.name(chr, <default>) Returns the name assigned to the character chr as a string. If no name is defined, default is returned, or, if not given, RunTimeError is raised. unicodedata.category Syntax: unicodedata.category(chr) Returns the general category assigned to the character chr as string. unicodedata.bidirectional Syntax: unicodedata.bidirectional(chr) Returns the bidirectional class assigned to the character chr as string. If no such value is defined, an empty string is returned. unicodedata.combining Syntax: unicodedata.combining(chr) Returns the canonical combining class assigned to the character chr as integer. Returns 0 if no combining class is defined. unicodedata.east_asian_width Syntax: unicodedata.east_asian_width(chr) Returns the east asian width assigned to the character chr as string. unicodedata.mirrored Syntax: unicodedata.mirrored(chr) Returns the mirrored property assigned to the character chr as integer. Returns 1 if the character has been identified as a \u201cmirrored\u201d character in bidirectional text, 0 otherwise. unicodedata.decomposition Syntax: unicodedata.decomposition(chr) Returns the character decomposition mapping assigned to the character chr as string. An empty string is returned in case no such mapping is defined. unicodedata.normalize Syntax: unicodedata.normalize(form, unistr) Returns the normal form form for the Unicode string unistr . Valid values for form are \u2018NFC\u2019, \u2018NFKC\u2019, \u2018NFD\u2019, and \u2018NFKD\u2019. The Unicode standard defines various normalization forms of a Unicode string, based on the definition of canonical equivalence and compatibility equivalence. In Unicode, several characters can be expressed in various way. For example, the character U+00C7 (LATIN CAPITAL LETTER C WITH CEDILLA) can also be expressed as the sequence U+0043 (LATIN CAPITAL LETTER C) U+0327 (COMBINING CEDILLA). For each character, there are two normal forms: normal form C and normal form D. Normal form D (NFD) is also known as canonical decomposition, and translates each character into its decomposed form. Normal form C (NFC) first applies a canonical decomposition, then composes pre-combined characters again. In addition to these two forms, there are two additional normal forms based on compatibility equivalence. In Unicode, certain characters are supported which normally would be unified with other characters. For example, U+2160 (ROMAN NUMERAL ONE) is really the same thing as U+0049 (LATIN CAPITAL LETTER I). However, it is supported in Unicode for compatibility with existing character sets (e.g. gb2312). The normal form KD (NFKD) will apply the compatibility decomposition, i.e. replace all compatibility characters with their equivalents. The normal form KC (NFKC) first applies the compatibility decomposition, followed by the canonical composition. Even if two unicode strings are normalized and look the same to a human reader, if one has combining characters and the other doesn\u2019t, they may not compare equal. unicodedata.is_normalized Syntax: unicodedata.is_normalized(form, unistr) Return whether the Unicode string unistr is in the normal form form . Valid values for form are \u2018NFC\u2019, \u2018NFKC\u2019, \u2018NFD\u2019, and \u2018NFKD\u2019.","title":"Unicodedata"},{"location":"0.23/stdlib/modules/unicodedata/#unicodedata","text":"Source code Credits This is massively copied from python documentation of unicodedata , under the Python Software Foundation License Version 2 . \u00a9 Copyright 2001-2023, Python Software Foundation. This text has not been edited. The unicodedata module can be imported with the statement import unicodedata . The unicodedata provides access to the Unicode database.","title":"Unicodedata"},{"location":"0.23/stdlib/modules/unicodedata/#constants","text":"unicodedata.unicodedata_version : the version of the Unicode database used in this module. Depends on Python version!","title":"Constants"},{"location":"0.23/stdlib/modules/unicodedata/#functions","text":"","title":"Functions"},{"location":"0.23/stdlib/modules/unicodedata/#unicodedatalookup","text":"Syntax: unicodedata.lookup(name) Look up character by name. If a character with the given name is found, return the corresponding character. If not found, NotDefinedError is raised.","title":"unicodedata.lookup"},{"location":"0.23/stdlib/modules/unicodedata/#unicodedataname","text":"Syntax: unicodedata.name(chr, <default>) Returns the name assigned to the character chr as a string. If no name is defined, default is returned, or, if not given, RunTimeError is raised.","title":"unicodedata.name"},{"location":"0.23/stdlib/modules/unicodedata/#unicodedatacategory","text":"Syntax: unicodedata.category(chr) Returns the general category assigned to the character chr as string.","title":"unicodedata.category"},{"location":"0.23/stdlib/modules/unicodedata/#unicodedatabidirectional","text":"Syntax: unicodedata.bidirectional(chr) Returns the bidirectional class assigned to the character chr as string. If no such value is defined, an empty string is returned.","title":"unicodedata.bidirectional"},{"location":"0.23/stdlib/modules/unicodedata/#unicodedatacombining","text":"Syntax: unicodedata.combining(chr) Returns the canonical combining class assigned to the character chr as integer. Returns 0 if no combining class is defined.","title":"unicodedata.combining"},{"location":"0.23/stdlib/modules/unicodedata/#unicodedataeast_asian_width","text":"Syntax: unicodedata.east_asian_width(chr) Returns the east asian width assigned to the character chr as string.","title":"unicodedata.east_asian_width"},{"location":"0.23/stdlib/modules/unicodedata/#unicodedatamirrored","text":"Syntax: unicodedata.mirrored(chr) Returns the mirrored property assigned to the character chr as integer. Returns 1 if the character has been identified as a \u201cmirrored\u201d character in bidirectional text, 0 otherwise.","title":"unicodedata.mirrored"},{"location":"0.23/stdlib/modules/unicodedata/#unicodedatadecomposition","text":"Syntax: unicodedata.decomposition(chr) Returns the character decomposition mapping assigned to the character chr as string. An empty string is returned in case no such mapping is defined.","title":"unicodedata.decomposition"},{"location":"0.23/stdlib/modules/unicodedata/#unicodedatanormalize","text":"Syntax: unicodedata.normalize(form, unistr) Returns the normal form form for the Unicode string unistr . Valid values for form are \u2018NFC\u2019, \u2018NFKC\u2019, \u2018NFD\u2019, and \u2018NFKD\u2019. The Unicode standard defines various normalization forms of a Unicode string, based on the definition of canonical equivalence and compatibility equivalence. In Unicode, several characters can be expressed in various way. For example, the character U+00C7 (LATIN CAPITAL LETTER C WITH CEDILLA) can also be expressed as the sequence U+0043 (LATIN CAPITAL LETTER C) U+0327 (COMBINING CEDILLA). For each character, there are two normal forms: normal form C and normal form D. Normal form D (NFD) is also known as canonical decomposition, and translates each character into its decomposed form. Normal form C (NFC) first applies a canonical decomposition, then composes pre-combined characters again. In addition to these two forms, there are two additional normal forms based on compatibility equivalence. In Unicode, certain characters are supported which normally would be unified with other characters. For example, U+2160 (ROMAN NUMERAL ONE) is really the same thing as U+0049 (LATIN CAPITAL LETTER I). However, it is supported in Unicode for compatibility with existing character sets (e.g. gb2312). The normal form KD (NFKD) will apply the compatibility decomposition, i.e. replace all compatibility characters with their equivalents. The normal form KC (NFKC) first applies the compatibility decomposition, followed by the canonical composition. Even if two unicode strings are normalized and look the same to a human reader, if one has combining characters and the other doesn\u2019t, they may not compare equal.","title":"unicodedata.normalize"},{"location":"0.23/stdlib/modules/unicodedata/#unicodedatais_normalized","text":"Syntax: unicodedata.is_normalized(form, unistr) Return whether the Unicode string unistr is in the normal form form . Valid values for form are \u2018NFC\u2019, \u2018NFKC\u2019, \u2018NFD\u2019, and \u2018NFKD\u2019.","title":"unicodedata.is_normalized"},{"location":"0.23/stdlib/modules/webbrowser/","text":"Webbrowser Source code Added in 0.19.0-beta The webbrowser module can be imported with the statement import webbrowser . Convenient web-browser controller. The webbrowser module allows you to open pages in the browser. Functions webbrowser.open Syntax: webbrowser.open(url, <new=0>, <autoraise=True>) Displays url using the default browser. If new is 0, the url is opened in the same browser window if possible. If new is 1, a new browser window is opened if possible. If new is 2, a new tab is opened if possible. If autoraise is True, the window is raised if possible (note that under many window managers this will occur regardless of the setting of this variable).","title":"Webbrowser"},{"location":"0.23/stdlib/modules/webbrowser/#webbrowser","text":"Source code Added in 0.19.0-beta The webbrowser module can be imported with the statement import webbrowser . Convenient web-browser controller. The webbrowser module allows you to open pages in the browser.","title":"Webbrowser"},{"location":"0.23/stdlib/modules/webbrowser/#functions","text":"","title":"Functions"},{"location":"0.23/stdlib/modules/webbrowser/#webbrowseropen","text":"Syntax: webbrowser.open(url, <new=0>, <autoraise=True>) Displays url using the default browser. If new is 0, the url is opened in the same browser window if possible. If new is 1, a new browser window is opened if possible. If new is 2, a new tab is opened if possible. If autoraise is True, the window is raised if possible (note that under many window managers this will occur regardless of the setting of this variable).","title":"webbrowser.open"},{"location":"1.0/","text":"Nougaro 1.0 documentation This is the official documentation for Nougaro version 1.0.0. Hello, world! Language reference: syntax, statements, \u2026 Basic syntax Number literals String literals Identifiers and keywords Operators Values Variables Tests ( if statement, assert ) Loops Functions Attributes Classes Read and write in files Import and export Metas Dollar-print Standard library reference: builtins, modules, \u2026 Built-in variables Built-in functions Modules Expanding Nougaro (for Python developers) Write libraries for Nougaro Internals","title":"Nougaro 1.0 documentation"},{"location":"1.0/#nougaro-10-documentation","text":"This is the official documentation for Nougaro version 1.0.0. Hello, world! Language reference: syntax, statements, \u2026 Basic syntax Number literals String literals Identifiers and keywords Operators Values Variables Tests ( if statement, assert ) Loops Functions Attributes Classes Read and write in files Import and export Metas Dollar-print Standard library reference: builtins, modules, \u2026 Built-in variables Built-in functions Modules Expanding Nougaro (for Python developers) Write libraries for Nougaro Internals","title":"Nougaro 1.0 documentation"},{"location":"1.0/hello_world/","text":"Hello, world! This is the \u201cHello, world!\u201d program in Nougaro. print(\"Hello, world!\") Alternatively: import hello If you want to use functionnal programming: def main() print(\"Hello, world!\") end main() If you want to use object-oriented programming: class Main def print_hello_world() print(\"Hello, world!\") end end Main().print_hello_world()","title":"Hello, world!"},{"location":"1.0/hello_world/#hello-world","text":"This is the \u201cHello, world!\u201d program in Nougaro. print(\"Hello, world!\") Alternatively: import hello If you want to use functionnal programming: def main() print(\"Hello, world!\") end main() If you want to use object-oriented programming: class Main def print_hello_world() print(\"Hello, world!\") end end Main().print_hello_world()","title":"Hello, world!"},{"location":"1.0/internals/","text":"Internals Features that had to be documented but that are mainly used for debugging purposes. Context variables __actual_context__ is the name of the function where the code is executed. May be <program> . __exec_from__ is the name of the parent of the function where the code is executed. If __actual_context__ is <program> , __exec_from__ is (shell) . If the code is inside a function foo that is directly in <program> , __exec_from__ is foo from <program> . If the code is inside a function bar executed from our foo (that is in <program> ), __exec_from__ is bar from foo . Base value __base_value__ is the base value (python class Value ). It is the parent class of all the other values. It is the only value to crash on == and != operators . Nougaro informations Note This section is duplicated in this file __noug_version__ : string of the Nougaro version (e.g. \"0.15.0-beta\".) You can use the noug_version lib to have better informations. __data_version__ : the Nougaro data version, an internal version keeping track of changes in the config file directory structure __version_id__ : an ID increased at least once per version __python_version__ : string of the Python version (e.g. \"3.10.5\") __noug_dir__ : string of the absolute path of the directory where shell.(py/exe/bin) is located. May be used with file I/O read and write statements. Symbol table __symbol_table__ : string of the internal \u201cp-formated\u201d symbols dictionnary.","title":"Internals"},{"location":"1.0/internals/#internals","text":"Features that had to be documented but that are mainly used for debugging purposes.","title":"Internals"},{"location":"1.0/internals/#context-variables","text":"__actual_context__ is the name of the function where the code is executed. May be <program> . __exec_from__ is the name of the parent of the function where the code is executed. If __actual_context__ is <program> , __exec_from__ is (shell) . If the code is inside a function foo that is directly in <program> , __exec_from__ is foo from <program> . If the code is inside a function bar executed from our foo (that is in <program> ), __exec_from__ is bar from foo .","title":"Context variables"},{"location":"1.0/internals/#base-value","text":"__base_value__ is the base value (python class Value ). It is the parent class of all the other values. It is the only value to crash on == and != operators .","title":"Base value"},{"location":"1.0/internals/#nougaro-informations","text":"Note This section is duplicated in this file __noug_version__ : string of the Nougaro version (e.g. \"0.15.0-beta\".) You can use the noug_version lib to have better informations. __data_version__ : the Nougaro data version, an internal version keeping track of changes in the config file directory structure __version_id__ : an ID increased at least once per version __python_version__ : string of the Python version (e.g. \"3.10.5\") __noug_dir__ : string of the absolute path of the directory where shell.(py/exe/bin) is located. May be used with file I/O read and write statements.","title":"Nougaro informations"},{"location":"1.0/internals/#symbol-table","text":"__symbol_table__ : string of the internal \u201cp-formated\u201d symbols dictionnary.","title":"Symbol table"},{"location":"1.0/Expanding/Write-libs/","text":"You are a Nougaro developer, and you want to write an amazing library to implement python amazing things in Nougaro? You're at the right place!! You have to options: either writting it in Nougaro (with limited resources), either writting it in Python (with unlimited resources). Write libs in Nougaro Requirements You need to know how to code in Nougaro. Start coding The file should be named nameofthelib.noug and be located in the lib_ folder in the Nougaro repository. Simply write all your code. If you want something to be accessible when imported, use one of those syntaxes : export identifier (as identifier) export (any expression) as identifier You can find examples of built-in modules written in Nougaro in the lib_ folder. Write libs in Python Warning Everything changed in 0.16.0-beta and in 0.19.0-beta Requirements You need to know how to code in Python. Don't worry, that's easy ;) Start coding The file should be named nameofthelib_.py (the \u201c_\u201d is VERY important!!) The file will be placed in the lib_ folder in the Nougaro repository. Paste this generic code in your file: # -*- coding:utf-8 -*- \"\"\" YourModuleName module YourModuleName is a module that do [...] and [...] and also [...]. \"\"\" # IMPORTS # nougaro modules imports from lib_.lib_to_make_libs import * # useful stuff to make libs. # built-in python imports # here put the useful python imports your module will need ;) __LIB_VERSION__ = 4 Note Lib versions depending on Nougaro versions: prior to 0.20.0: 1 0.20.0: 2 0.21.0: 3 0.22.0-0.23.0: 4 Lib with constants If your lib contains constants, you can add them to the code, outside any class. Use py2noug function imported from lib_to_make_libs to convert Python values to Nougaro values. Python types that can be converted into Nougaro values are: str , int , float , bool (which is converted to 0 or 1), list , tuple (converted into list), dict (converted into a list of lists, each sub-list is [key, value] ), None . Other types will return generic value Value , which you can't make anything with... Example: AMAZING_CONSTANT = py2noug(3, *default_pos()) # will be Number(3), type 'int' ANOTHER_AMAZING_CONSTANT = py2noug(\"Hello world :)\", *default_pos()) # will be String(\"Hello world :)\"), type 'str' ( py2noug and default_pos are imported from lib_to_make_libs ) Lib with functions If you want functions in your lib, paste this code in your file (replace the generic names/texts with appropriate things): class YourModuleName(ModuleFunction): \"\"\" YourModuleName Module \"\"\" functions: dict[str, builtin_function_dict] = {} def __init__(self, function_name: str): super().__init__(\"your_module_name\", function_name, \"https://link_to_report_bugs.com (not required)\", functions=self.functions) def copy(self): \"\"\"Return a copy of self\"\"\" copy = YourModuleName(self.name) return self.set_context_and_pos_to_a_copy(copy) def is_eq(self, other: Value): return isinstance(other, YourModuleName) and self.name == other.name Changed in 0.20.0-beta Prior to 0.20.0, the method is_eq was named get_comparison_eq and had this syntax: def get_comparison_eq(self, other: Value): if isinstance(other, YourModuleName): return Number(self.name == other.name, self.pos_start, other.pos_end).set_context(self.context), None return Number(False, self.pos_start, other.pos_end).set_context(self.context), None Then, to add a function, add a method in this class following this syntax: def execute_function_name(self, context: Context): \"\"\" Docstring (optional) \"\"\" assert context.symbol_table is not None ... functions[\"function_name\"] = { \"function\": execute_function_name, \"param_names\": [\"parameter_1\", \"parameter_2\"], \"optional_params\": [\"optional_parameter_1\"], \"should_respect_args_number\": True, # The two following values are used internally. # They are not documented, don\u2019t set them to True except if you know what you\u2019re doing. \"run_noug_dir\": False, \"noug_dir\": False } Changed in 0.22.0-beta Prior to 0.22.0-beta, the key \"run_noug_dir\" was called \"run_noug_dir_work_dir\" . keys param_names and optional_params should be of type list[str] . should_respect_args_number is a bool. It is True when the number of given arguments should match with the number of parameters, and False if not. You can then add code in your function. Get arguments To get the arguments given by the user in your functions, use context.symbol_table.getf(\"identifier\") Replace the identifier by the one you given to the parameter. If your parameter is optional and that the user didn\u2019t specified it, the default value is a Python None (not a Nougaro NoneValue ). Danger Please don\u2019t use .get symbol table method, it does NOT work in modules (even if it looks like) and should NOT be used. (The short explanation why is that this method looks for the name also in parent symbol table, so if an optional param is not given but the user defined a variable with that name, it will be taken as the value for that param, which is not what we want. We don\u2019t care about parent symbol table, so we just look in the current symbol table which only contains the parameters. The corresponding issue is #10 .) Values Important You often have to switch between Nougaro and Python values! To convert python to Nougaro values, use py2noug function. To convert Nougaro to python values, use noug2py . Both functions are imported from lib_to_make_libs . You reed a position with py2noug : you can simply put self.pos_start and self.pos_end or the position of any value you want. What to return? Values and errors. If you don't need to return anything, simply use return RTResult().success(NoneValue(*default_pos(), False)) . Return errors Oops! It crashed! How to say it to the user under a good shape? Simply use this syntax: return RTResult().failure(NameOfTheError( self.pos_start, self.pos_end, \"error message.\", context )) If the user gave you a value with an incorrect type, use: return RTResult().failure(RTTypeErrorF( bad_argument.pos_start, bad_argument.pos_end, \"first/second/third\u2026\", \"name of the module.name of the function\", \"type that should be found\", bad_argument, context )) Replace \"first/second/third\u2026\" by the actual index of the argument. If it is the first argument, put \"first\" , et c\u00e6tera. The error will print, for instance, second argument of builtin function 'name of the function' should be 'type that should be found', not 'type of (bad_argument)'. You can replace self by any Nougaro value, such as your arguments. For example, in the lib math : if value.value < 0: # we check if the value is greater than (or equal to) 0 return RTResult().failure(RTArithmeticError( value.pos_start, value.pos_end, \"first argument of the built-in function 'math.sqrt' must be greater than (or equal to) 0.\", exec_context, \"lib_.math_.Math.execute_math_sqrt\" )) All the errors available in a Module: RunTimeError : basic run-time error RTIndexError : IndexError RTArithmeticError : ArithmeticError RTNotDefinedError : NotDefinedError RTTypeErrorF : TypeError (you give a Number but you need a String) RTFileNotFoundError : FileNotFoundError RTAssertionError : AssertionError (not useful in libs...) RTAttributeError : AttributeError RTOverflowError : OverflowError RTRecursionError : RecursionError (new in 0.20.0) PythonError : PythonError: an error due to Python. Don\u2019t put a str error message: pass directly the Python Exception. Return values To return a Nougaro value, use return RTResult().success(value) To return a Python value, use return RTResult().success(py2noug(value, self.pos_start, self.pos_end)) WHAT_TO_IMPORT : DO NOT forget that one!! When you have finished coding your amazing lib, create the WHAT_TO_IMPORT dict. It tells to the Nougaro Interpreter what should be imported and with which name. Follow this syntax: WHAT_TO_IMPORT = { \"name_of_a_constant\": IDENTIFIER, \"name_of_a_function\": YourModuleName('function_name'), } The function name is what you specified as the key of the functions dictionary. Custom errors To use a custom error in your code, simply copy-paste this code: class YourErrorName(RunTimeError): \"\"\"YourErrorName is an error that can be triggered ONLY via functions in this module.\"\"\" def __init__(self, pos_start: Position, pos_end: Position, details: str, context: Context, origin_file: str = \"lib_.(nameofthelib)_\"): super().__init__(pos_start, pos_end, details, context, rt_error=False, error_name=\"YourErrorName\", origin_file=origin_file) Then, call it like any other errors (like this ) Note: origin_file is used for debugging. To trigger it, you can run: nougaro> import debug;debug.enable() DEBUG mode is now ENABLED. [<module debug>, None] nougaro> (anything that throws an error) Example: nougaro> import debug;debug.enable() DEBUG mode is now ENABLED. [<module debug>, None] nougaro> thisisnotdefined [identifier:\"thisisnotdefined\", end of file] list:[(var_access:[identifier:\"thisisnotdefined\"], False)] (from src.runtime.interpreter.Interpreter.visit_VarAccessNode (is NOT lib and close match in symbol table)) Traceback (most recent call last): In file <stdin>, line 1, in <program>: thisisnotdefined ^^^^^^^^^^^^^^^^ NotDefinedError: name 'thisisnotdefined' is not defined. Did you mean 'is_none'? nougaro> this is a syntax error [identifier:\"this\", identifier:\"is\", identifier:\"a\", identifier:\"syntax\", identifier:\"error\", end of file] (from src.parser.parser.Parser.statements) In file <stdin>, line 1: this is a syntax error ^^ InvalidSyntaxError: unexpected token: identifier:\"is\". nougaro> Here, origin_file is src.runtime.interpreter.Interpreter.visit_VarAccessNode and src.parser.parser.Parser.parse . Example: RTStatisticsError in built-in lib statistics class RTStatisticsError(RunTimeError): \"\"\"StatisticsError is an error that can be triggered ONLY via functions in this module.\"\"\" def __init__(self, pos_start: Position, pos_end: Position, details: str, context: Context, origin_file: str = \"lib_.statistics_\"): super().__init__(pos_start, pos_end, details, context, rt_error=False, error_name=\"StatisticsError\", origin_file=origin_file) Examples You can read builtin files stored in lib_ folder to make you a good idea of what a nice-coded lib is ;) Here you go! If you think that your lib is absolutely awesome, you can open a PR to submit your idea. The best ideas will be implemented into vanilla Nougaro! If you think that this document is incomplete, that it didn\u2019t help you, or just to find some help, open an issue .","title":"Write libs"},{"location":"1.0/Expanding/Write-libs/#write-libs-in-nougaro","text":"","title":"Write libs in Nougaro"},{"location":"1.0/Expanding/Write-libs/#requirements","text":"You need to know how to code in Nougaro.","title":"Requirements"},{"location":"1.0/Expanding/Write-libs/#start-coding","text":"The file should be named nameofthelib.noug and be located in the lib_ folder in the Nougaro repository. Simply write all your code. If you want something to be accessible when imported, use one of those syntaxes : export identifier (as identifier) export (any expression) as identifier You can find examples of built-in modules written in Nougaro in the lib_ folder.","title":"Start coding"},{"location":"1.0/Expanding/Write-libs/#write-libs-in-python","text":"Warning Everything changed in 0.16.0-beta and in 0.19.0-beta","title":"Write libs in Python"},{"location":"1.0/Expanding/Write-libs/#requirements_1","text":"You need to know how to code in Python. Don't worry, that's easy ;)","title":"Requirements"},{"location":"1.0/Expanding/Write-libs/#start-coding_1","text":"The file should be named nameofthelib_.py (the \u201c_\u201d is VERY important!!) The file will be placed in the lib_ folder in the Nougaro repository. Paste this generic code in your file: # -*- coding:utf-8 -*- \"\"\" YourModuleName module YourModuleName is a module that do [...] and [...] and also [...]. \"\"\" # IMPORTS # nougaro modules imports from lib_.lib_to_make_libs import * # useful stuff to make libs. # built-in python imports # here put the useful python imports your module will need ;) __LIB_VERSION__ = 4 Note Lib versions depending on Nougaro versions: prior to 0.20.0: 1 0.20.0: 2 0.21.0: 3 0.22.0-0.23.0: 4","title":"Start coding"},{"location":"1.0/Expanding/Write-libs/#lib-with-constants","text":"If your lib contains constants, you can add them to the code, outside any class. Use py2noug function imported from lib_to_make_libs to convert Python values to Nougaro values. Python types that can be converted into Nougaro values are: str , int , float , bool (which is converted to 0 or 1), list , tuple (converted into list), dict (converted into a list of lists, each sub-list is [key, value] ), None . Other types will return generic value Value , which you can't make anything with... Example: AMAZING_CONSTANT = py2noug(3, *default_pos()) # will be Number(3), type 'int' ANOTHER_AMAZING_CONSTANT = py2noug(\"Hello world :)\", *default_pos()) # will be String(\"Hello world :)\"), type 'str' ( py2noug and default_pos are imported from lib_to_make_libs )","title":"Lib with constants"},{"location":"1.0/Expanding/Write-libs/#lib-with-functions","text":"If you want functions in your lib, paste this code in your file (replace the generic names/texts with appropriate things): class YourModuleName(ModuleFunction): \"\"\" YourModuleName Module \"\"\" functions: dict[str, builtin_function_dict] = {} def __init__(self, function_name: str): super().__init__(\"your_module_name\", function_name, \"https://link_to_report_bugs.com (not required)\", functions=self.functions) def copy(self): \"\"\"Return a copy of self\"\"\" copy = YourModuleName(self.name) return self.set_context_and_pos_to_a_copy(copy) def is_eq(self, other: Value): return isinstance(other, YourModuleName) and self.name == other.name Changed in 0.20.0-beta Prior to 0.20.0, the method is_eq was named get_comparison_eq and had this syntax: def get_comparison_eq(self, other: Value): if isinstance(other, YourModuleName): return Number(self.name == other.name, self.pos_start, other.pos_end).set_context(self.context), None return Number(False, self.pos_start, other.pos_end).set_context(self.context), None Then, to add a function, add a method in this class following this syntax: def execute_function_name(self, context: Context): \"\"\" Docstring (optional) \"\"\" assert context.symbol_table is not None ... functions[\"function_name\"] = { \"function\": execute_function_name, \"param_names\": [\"parameter_1\", \"parameter_2\"], \"optional_params\": [\"optional_parameter_1\"], \"should_respect_args_number\": True, # The two following values are used internally. # They are not documented, don\u2019t set them to True except if you know what you\u2019re doing. \"run_noug_dir\": False, \"noug_dir\": False } Changed in 0.22.0-beta Prior to 0.22.0-beta, the key \"run_noug_dir\" was called \"run_noug_dir_work_dir\" . keys param_names and optional_params should be of type list[str] . should_respect_args_number is a bool. It is True when the number of given arguments should match with the number of parameters, and False if not. You can then add code in your function.","title":"Lib with functions"},{"location":"1.0/Expanding/Write-libs/#get-arguments","text":"To get the arguments given by the user in your functions, use context.symbol_table.getf(\"identifier\") Replace the identifier by the one you given to the parameter. If your parameter is optional and that the user didn\u2019t specified it, the default value is a Python None (not a Nougaro NoneValue ). Danger Please don\u2019t use .get symbol table method, it does NOT work in modules (even if it looks like) and should NOT be used. (The short explanation why is that this method looks for the name also in parent symbol table, so if an optional param is not given but the user defined a variable with that name, it will be taken as the value for that param, which is not what we want. We don\u2019t care about parent symbol table, so we just look in the current symbol table which only contains the parameters. The corresponding issue is #10 .)","title":"Get arguments"},{"location":"1.0/Expanding/Write-libs/#values","text":"Important You often have to switch between Nougaro and Python values! To convert python to Nougaro values, use py2noug function. To convert Nougaro to python values, use noug2py . Both functions are imported from lib_to_make_libs . You reed a position with py2noug : you can simply put self.pos_start and self.pos_end or the position of any value you want.","title":"Values"},{"location":"1.0/Expanding/Write-libs/#what-to-return-values-and-errors","text":"If you don't need to return anything, simply use return RTResult().success(NoneValue(*default_pos(), False)) .","title":"What to return? Values and errors."},{"location":"1.0/Expanding/Write-libs/#return-errors","text":"Oops! It crashed! How to say it to the user under a good shape? Simply use this syntax: return RTResult().failure(NameOfTheError( self.pos_start, self.pos_end, \"error message.\", context )) If the user gave you a value with an incorrect type, use: return RTResult().failure(RTTypeErrorF( bad_argument.pos_start, bad_argument.pos_end, \"first/second/third\u2026\", \"name of the module.name of the function\", \"type that should be found\", bad_argument, context )) Replace \"first/second/third\u2026\" by the actual index of the argument. If it is the first argument, put \"first\" , et c\u00e6tera. The error will print, for instance, second argument of builtin function 'name of the function' should be 'type that should be found', not 'type of (bad_argument)'. You can replace self by any Nougaro value, such as your arguments. For example, in the lib math : if value.value < 0: # we check if the value is greater than (or equal to) 0 return RTResult().failure(RTArithmeticError( value.pos_start, value.pos_end, \"first argument of the built-in function 'math.sqrt' must be greater than (or equal to) 0.\", exec_context, \"lib_.math_.Math.execute_math_sqrt\" )) All the errors available in a Module: RunTimeError : basic run-time error RTIndexError : IndexError RTArithmeticError : ArithmeticError RTNotDefinedError : NotDefinedError RTTypeErrorF : TypeError (you give a Number but you need a String) RTFileNotFoundError : FileNotFoundError RTAssertionError : AssertionError (not useful in libs...) RTAttributeError : AttributeError RTOverflowError : OverflowError RTRecursionError : RecursionError (new in 0.20.0) PythonError : PythonError: an error due to Python. Don\u2019t put a str error message: pass directly the Python Exception.","title":"Return errors"},{"location":"1.0/Expanding/Write-libs/#return-values","text":"To return a Nougaro value, use return RTResult().success(value) To return a Python value, use return RTResult().success(py2noug(value, self.pos_start, self.pos_end))","title":"Return values"},{"location":"1.0/Expanding/Write-libs/#what_to_import-do-not-forget-that-one","text":"When you have finished coding your amazing lib, create the WHAT_TO_IMPORT dict. It tells to the Nougaro Interpreter what should be imported and with which name. Follow this syntax: WHAT_TO_IMPORT = { \"name_of_a_constant\": IDENTIFIER, \"name_of_a_function\": YourModuleName('function_name'), } The function name is what you specified as the key of the functions dictionary.","title":"WHAT_TO_IMPORT : DO NOT forget that one!!"},{"location":"1.0/Expanding/Write-libs/#custom-errors","text":"To use a custom error in your code, simply copy-paste this code: class YourErrorName(RunTimeError): \"\"\"YourErrorName is an error that can be triggered ONLY via functions in this module.\"\"\" def __init__(self, pos_start: Position, pos_end: Position, details: str, context: Context, origin_file: str = \"lib_.(nameofthelib)_\"): super().__init__(pos_start, pos_end, details, context, rt_error=False, error_name=\"YourErrorName\", origin_file=origin_file) Then, call it like any other errors (like this ) Note: origin_file is used for debugging. To trigger it, you can run: nougaro> import debug;debug.enable() DEBUG mode is now ENABLED. [<module debug>, None] nougaro> (anything that throws an error) Example: nougaro> import debug;debug.enable() DEBUG mode is now ENABLED. [<module debug>, None] nougaro> thisisnotdefined [identifier:\"thisisnotdefined\", end of file] list:[(var_access:[identifier:\"thisisnotdefined\"], False)] (from src.runtime.interpreter.Interpreter.visit_VarAccessNode (is NOT lib and close match in symbol table)) Traceback (most recent call last): In file <stdin>, line 1, in <program>: thisisnotdefined ^^^^^^^^^^^^^^^^ NotDefinedError: name 'thisisnotdefined' is not defined. Did you mean 'is_none'? nougaro> this is a syntax error [identifier:\"this\", identifier:\"is\", identifier:\"a\", identifier:\"syntax\", identifier:\"error\", end of file] (from src.parser.parser.Parser.statements) In file <stdin>, line 1: this is a syntax error ^^ InvalidSyntaxError: unexpected token: identifier:\"is\". nougaro> Here, origin_file is src.runtime.interpreter.Interpreter.visit_VarAccessNode and src.parser.parser.Parser.parse .","title":"Custom errors"},{"location":"1.0/Expanding/Write-libs/#example-rtstatisticserror-in-built-in-lib-statistics","text":"class RTStatisticsError(RunTimeError): \"\"\"StatisticsError is an error that can be triggered ONLY via functions in this module.\"\"\" def __init__(self, pos_start: Position, pos_end: Position, details: str, context: Context, origin_file: str = \"lib_.statistics_\"): super().__init__(pos_start, pos_end, details, context, rt_error=False, error_name=\"StatisticsError\", origin_file=origin_file)","title":"Example: RTStatisticsError in built-in lib statistics"},{"location":"1.0/Expanding/Write-libs/#examples","text":"You can read builtin files stored in lib_ folder to make you a good idea of what a nice-coded lib is ;)","title":"Examples"},{"location":"1.0/Expanding/Write-libs/#here-you-go","text":"If you think that your lib is absolutely awesome, you can open a PR to submit your idea. The best ideas will be implemented into vanilla Nougaro! If you think that this document is incomplete, that it didn\u2019t help you, or just to find some help, open an issue .","title":"Here you go!"},{"location":"1.0/Language/01syntax/","text":"Very basic syntax This document covers the basic syntax of Nougaro. Comments There are two types of comments in Nougaro: single-line comments and multi-line comments. Single-line comments Single-line comments start with # and end with a new line. They can start at the beginning of a line or after some code. Example: # this is a single-line comment foo(bar) # this calls the function foo with the argument bar Multi-line comments Multi-line comments start with /* and end with */ . They can start and stop at any point in the code. Example: /* this is a multi line comment */ print(\"hello\") /* this is also a multi line comment*/ Multi-line comments can also be only on one line: print(\"hello\") /* this is a multi-line comment that is only on one line */ Multi-line comments are simply ignored, which mean you can do things such as: print( /* this is a comment */ \"hello\" /* this is another comment */) print(/* this is actually a comment*/ \"hello\") Multi-line comments can be nested: /* comment /* comment-inside comment*/ /* /* comment-ception */ */ comment */ NOUGAROIGNORE comments Added in 0.22.0-beta These comments start and end with ..NOUGAROIGNORE or .. NOUGAROIGNORE , where . is any character among #@/%!$; . There should be nothing else on the NOUGAROIGNORE line. Example: file examples/fizzbuzz.cpp.c.py.noug (polyglott file using C/C++ comments, Python docstrings and Nougaro NOUGAROIGNORE comments). Lines Line are separated by a newline or a semicolon ( ; ). a b is equivalent to a ; b . Line joining If you don\u2019t have enough space on your line, you can join two \u201creal lines\u201d to form a Nougaro line, using a backspace. Example: var fruits = [\\ \"banana\", \\ \"apple\", \\ \"raspberry\", \\ \"pineapple\" \\ ] Blank lines Blank lines are ignored. Indentation Indentation is optional, as (mostly) every statement ends with end . Whitespaces Whitespaces are ignored everywhere (except in string literals and to differentiate things such as foobar and foo bar , or += and + = ).","title":"Very basic syntax"},{"location":"1.0/Language/01syntax/#very-basic-syntax","text":"This document covers the basic syntax of Nougaro.","title":"Very basic syntax"},{"location":"1.0/Language/01syntax/#comments","text":"There are two types of comments in Nougaro: single-line comments and multi-line comments.","title":"Comments"},{"location":"1.0/Language/01syntax/#single-line-comments","text":"Single-line comments start with # and end with a new line. They can start at the beginning of a line or after some code. Example: # this is a single-line comment foo(bar) # this calls the function foo with the argument bar","title":"Single-line comments"},{"location":"1.0/Language/01syntax/#multi-line-comments","text":"Multi-line comments start with /* and end with */ . They can start and stop at any point in the code. Example: /* this is a multi line comment */ print(\"hello\") /* this is also a multi line comment*/ Multi-line comments can also be only on one line: print(\"hello\") /* this is a multi-line comment that is only on one line */ Multi-line comments are simply ignored, which mean you can do things such as: print( /* this is a comment */ \"hello\" /* this is another comment */) print(/* this is actually a comment*/ \"hello\") Multi-line comments can be nested: /* comment /* comment-inside comment*/ /* /* comment-ception */ */ comment */","title":"Multi-line comments"},{"location":"1.0/Language/01syntax/#nougaroignore-comments","text":"Added in 0.22.0-beta These comments start and end with ..NOUGAROIGNORE or .. NOUGAROIGNORE , where . is any character among #@/%!$; . There should be nothing else on the NOUGAROIGNORE line. Example: file examples/fizzbuzz.cpp.c.py.noug (polyglott file using C/C++ comments, Python docstrings and Nougaro NOUGAROIGNORE comments).","title":"NOUGAROIGNORE comments"},{"location":"1.0/Language/01syntax/#lines","text":"Line are separated by a newline or a semicolon ( ; ). a b is equivalent to a ; b .","title":"Lines"},{"location":"1.0/Language/01syntax/#line-joining","text":"If you don\u2019t have enough space on your line, you can join two \u201creal lines\u201d to form a Nougaro line, using a backspace. Example: var fruits = [\\ \"banana\", \\ \"apple\", \\ \"raspberry\", \\ \"pineapple\" \\ ]","title":"Line joining"},{"location":"1.0/Language/01syntax/#blank-lines","text":"Blank lines are ignored.","title":"Blank lines"},{"location":"1.0/Language/01syntax/#indentation","text":"Indentation is optional, as (mostly) every statement ends with end .","title":"Indentation"},{"location":"1.0/Language/01syntax/#whitespaces","text":"Whitespaces are ignored everywhere (except in string literals and to differentiate things such as foobar and foo bar , or += and + = ).","title":"Whitespaces"},{"location":"1.0/Language/02number_literals/","text":"Number literals Here\u2019s all the different ways to write a number in Nougaro: 123 12.3 123e2 12.3e2 123e-2 123e+2 12.3e-2 12.3e+2 Note You can put + or - in front of the number to specify its sign. Example: -123 . Other bases: 0b01110 (base 2, binary) 0o17403 (base 8, octal) 0x4EF1A (base 16, hexadecimal) 0b10e30 0o70e30 Note 0xA0e30 will be interpreted as the hexadecimal number A0E30 ( 3*16^1 + 15*16^2 + 10*16^4 ) and not as 0xA0 * 10^30 _ in numbers Note You can put as much underscores ( _ ) as you want in a number literal, as long as the underscore are not at the beginning or at the end of the literal, or around the dot in floating-point numbers (ex: 10_694_254 is the same as 10694254 , 10_ is not valid, 12._3 is not valid and 12_._3 isn\u2019t either.)","title":"Number literals"},{"location":"1.0/Language/02number_literals/#number-literals","text":"Here\u2019s all the different ways to write a number in Nougaro: 123 12.3 123e2 12.3e2 123e-2 123e+2 12.3e-2 12.3e+2 Note You can put + or - in front of the number to specify its sign. Example: -123 . Other bases: 0b01110 (base 2, binary) 0o17403 (base 8, octal) 0x4EF1A (base 16, hexadecimal) 0b10e30 0o70e30 Note 0xA0e30 will be interpreted as the hexadecimal number A0E30 ( 3*16^1 + 15*16^2 + 10*16^4 ) and not as 0xA0 * 10^30","title":"Number literals"},{"location":"1.0/Language/02number_literals/#_-in-numbers","text":"Note You can put as much underscores ( _ ) as you want in a number literal, as long as the underscore are not at the beginning or at the end of the literal, or around the dot in floating-point numbers (ex: 10_694_254 is the same as 10694254 , 10_ is not valid, 12._3 is not valid and 12_._3 isn\u2019t either.)","title":"_ in numbers"},{"location":"1.0/Language/03string_literals/","text":"String literals String literals are delimited by \"\" , '' or \u00ab\u00bb . Examples: \"hello\" 'hello' \u00abhello\u00bb Escape characters: \\' : ' \\\" : \" \\\u00bb : \u00bb \\n : backline \\t : tab \\\\ : backslash \\xAA : unicode character number AA (hex) \\uAAAA : unicode character number AAAA (hex) \\UAAAAAAAA : unicode character number AAAAAAAA (hex) \\N{NAME} : unicode character with name NAME. Returns SyntaxError if it doesn\u2019t exist. Note The backslash isn\u2019t left if the next character is not recognised (example: \"\\/\" is the same as \"/\" , and not \"\\\\/\" ) Examples: 'I\\'m a string literal' \"He said: \\\"'I'm a string literal'\\\"\" \"\\\\ backslashes, \\t tabs and \\n backlines\" \u00abThis string has a \\N{NO BREAK SPACE}\u00bb \"\\N{Latin Small Letter C with Cedilla}: \\xe7\" \"\\N{Greek Small Letter Eta with Dasia and Oxia and Ypogegrammeni}: \\u1F95\" \"This is Person Shrugging (\ud83e\udd37): \\U0001f937\" Note You can use the meta nbspBetweenFrenchGuillemets to be forced to use a no-break-space or a narrow-no-break-space after \u00ab and before \u00bb . These NBSP are not counted in the string and this does not affect the other string delimiters.","title":"String literals"},{"location":"1.0/Language/03string_literals/#string-literals","text":"String literals are delimited by \"\" , '' or \u00ab\u00bb . Examples: \"hello\" 'hello' \u00abhello\u00bb Escape characters: \\' : ' \\\" : \" \\\u00bb : \u00bb \\n : backline \\t : tab \\\\ : backslash \\xAA : unicode character number AA (hex) \\uAAAA : unicode character number AAAA (hex) \\UAAAAAAAA : unicode character number AAAAAAAA (hex) \\N{NAME} : unicode character with name NAME. Returns SyntaxError if it doesn\u2019t exist. Note The backslash isn\u2019t left if the next character is not recognised (example: \"\\/\" is the same as \"/\" , and not \"\\\\/\" ) Examples: 'I\\'m a string literal' \"He said: \\\"'I'm a string literal'\\\"\" \"\\\\ backslashes, \\t tabs and \\n backlines\" \u00abThis string has a \\N{NO BREAK SPACE}\u00bb \"\\N{Latin Small Letter C with Cedilla}: \\xe7\" \"\\N{Greek Small Letter Eta with Dasia and Oxia and Ypogegrammeni}: \\u1F95\" \"This is Person Shrugging (\ud83e\udd37): \\U0001f937\" Note You can use the meta nbspBetweenFrenchGuillemets to be forced to use a no-break-space or a narrow-no-break-space after \u00ab and before \u00bb . These NBSP are not counted in the string and this does not affect the other string delimiters.","title":"String literals"},{"location":"1.0/Language/04identifiers_and_keywords/","text":"Identifiers and keywords Identifiers (variable names) can be composed of the 26 characters of the ASCII alphabet ( a to z \u202fthen A to Z ), in lower and upper case, the underscore _ and digits ( 0 to 9 ). Note An identifier can not start with a digit. Keywords The following identifiers are reserved and can not be used as variable names: and as assert break class continue def del do elif else end export for if import in loop not or read return step then to var while write xor","title":"Identifiers and keywords"},{"location":"1.0/Language/04identifiers_and_keywords/#identifiers-and-keywords","text":"Identifiers (variable names) can be composed of the 26 characters of the ASCII alphabet ( a to z \u202fthen A to Z ), in lower and upper case, the underscore _ and digits ( 0 to 9 ). Note An identifier can not start with a digit.","title":"Identifiers and keywords"},{"location":"1.0/Language/04identifiers_and_keywords/#keywords","text":"The following identifiers are reserved and can not be used as variable names: and as assert break class continue def del do elif else end export for if import in loop not or read return step then to var while write xor","title":"Keywords"},{"location":"1.0/Language/05operators/","text":"Operators Mathematical operators Here all the mathematical operators in Nougaro (ordered by priority): Nougaro Python Comments ^ ** power * * multiplication % % modulo / / division // // floor division + + addition - - substraction & & bitwise and | | bitwise or ^^ ^ bitwise xor ~ ~ bitwise not It respects operation priority and you can use parenthesis. Examples 3 * 4 returns 12 4 / 2 returns 2 1 + 1 returns 2 3 - 4 returns -1 10 % 7 returns 3 10 % 3 returns 1 10 // 7 returns 1 10 // 3 returns 3 5 ^ 2 returns 25 62 & 35 returns 34 ~1 returns -2 and ~-2 returns 1 5 + 5 * 3 + 2 returns 22 (5 + 5) * (3 + 2) returns 50 Test operators They are exactly same as Python ones: Nougaro Python Comments == == equals to != != different than < < less than <= <= less than or equals > > greater than >= >= greater than or equals in in check if a value is in another Note the in keyword can check if: int , float , str , list , DefaultValue or NoneValue is in a str any value is in a list Added in 0.22.0-beta DefaultValue is new in 0.22.0-beta. Logical operators There is one logical operator that isn't here in Python. There is a list: Nougaro Python Comments and and boolean 'and' (binary operator) or or boolean 'or' (binary operator) xor ^ boolean 'exclusive or' (binary operator) not not boolean 'not' (inverter) (unary operator)","title":"Operators"},{"location":"1.0/Language/05operators/#operators","text":"","title":"Operators"},{"location":"1.0/Language/05operators/#mathematical-operators","text":"Here all the mathematical operators in Nougaro (ordered by priority): Nougaro Python Comments ^ ** power * * multiplication % % modulo / / division // // floor division + + addition - - substraction & & bitwise and | | bitwise or ^^ ^ bitwise xor ~ ~ bitwise not It respects operation priority and you can use parenthesis.","title":"Mathematical operators"},{"location":"1.0/Language/05operators/#examples","text":"3 * 4 returns 12 4 / 2 returns 2 1 + 1 returns 2 3 - 4 returns -1 10 % 7 returns 3 10 % 3 returns 1 10 // 7 returns 1 10 // 3 returns 3 5 ^ 2 returns 25 62 & 35 returns 34 ~1 returns -2 and ~-2 returns 1 5 + 5 * 3 + 2 returns 22 (5 + 5) * (3 + 2) returns 50","title":"Examples"},{"location":"1.0/Language/05operators/#test-operators","text":"They are exactly same as Python ones: Nougaro Python Comments == == equals to != != different than < < less than <= <= less than or equals > > greater than >= >= greater than or equals in in check if a value is in another Note the in keyword can check if: int , float , str , list , DefaultValue or NoneValue is in a str any value is in a list Added in 0.22.0-beta DefaultValue is new in 0.22.0-beta.","title":"Test operators"},{"location":"1.0/Language/05operators/#logical-operators","text":"There is one logical operator that isn't here in Python. There is a list: Nougaro Python Comments and and boolean 'and' (binary operator) or or boolean 'or' (binary operator) xor ^ boolean 'exclusive or' (binary operator) not not boolean 'not' (inverter) (unary operator)","title":"Logical operators"},{"location":"1.0/Language/06values/","text":"Values Here is the list of the value types in Nougaro: int ( integers ). Internal type: int float ( floats ). Internal type: float str ( strings ). Internal type: str list ( lists ). Internal type: list NoneType ( None ). Internal type: NoneValue function . Internal type: func or method . module . Internal type: module constructor . Internal type: constructor object . Internal type: depends on the class\u2019 name, and it is <class> if the class has no name. Note Internal value types are base value (type: BaseValue ) and default value (type: DefaultValue ) Added in 0.22.0-beta DefaultValue is new in 0.22.0-beta. Changed in 0.22.0-beta Before 0.22.0-beta, a distinction was made between func (user-defined function or function in a module written in Nougaro) and built-in func (built-in function or function in a module written in Python). Numbers Numbers represents real-life numbers. The two types of numbers are int and float . To declare a number, you can use a number literal . Operations that can be used between two numbers are: addition, substraction, multiplication, power. If the second number is non-zero, division, modulo and floor division can be used. All these operations follow the mathematical logic (except for 0^0, that returns 1). Multiplication can be used between a integer (type int ) and a string or a list . For example, 3*\"str\" returns \"strstrstr\" , and 2*[1, 2] returns [1, 2, 1, 2] . In boolean context, a number is true if it is non-zero. Strings The type of a string is str . To declare a string, you can use a string literal The only operation that can be used between strings is addition, which concatenates the string with the other. For example, \"hello, \" + \"world!\" returns \"hello, world!\" . Multiplication can be used between a string and an integer (type int ). For example, \"str\"*3 returns \"strstrstr\" . In boolean context, a string is true if it contains at least one character. Lists Lists are a succession of values. To declare a list, you can use brackets ( [] ), and put every value separated by a comma ( , ) inside. They may be 0 values. To create a list with elements from another list (and other elements), you can use this syntax: [1, 2, *list_, 5] (which is [1, 2, 3, 4, 5] if list_ is [3, 4] ). The only operation that can be used between two lists is multiplication, which extends the first list with the content of the second list. This can also be achieved using extend(list1, list2) Addition can be used between a list and any other value to add an element to the list. Substraction can be used between a list and an integer (type int ) to pop (i.e. delete) an element by index. This supports negative numbers. The returned value is the list after the pop. This can be achieved with pop(list, index) , although this returns the popped value. Multiplication can be used between a list and an integer (type int ). For example, [1, 2]*2 returns [1, 2, 1, 2] . Division can be used between a list and an integer (type int ) to get an element by index. This supports negative numbers. This can be achieved using list(index) or get(list, index) . In boolean context, a list is true if it is not empty None None is a value to denote the absence of other values. It is accessible trought the None built-in variable. No operation can be used on None . In boolean context, None is false. Modules A module is a value containing various useful functions and constants. A list of modules can be found here . Importing modules is detailed here . The procedure to create your own module is detailed here . No operation can be used on modules. In boolean context, a module is true. Changed in 0.22.0-beta Prior to 0.22.0-beta, a module was false in boolean context.","title":"Values"},{"location":"1.0/Language/06values/#values","text":"Here is the list of the value types in Nougaro: int ( integers ). Internal type: int float ( floats ). Internal type: float str ( strings ). Internal type: str list ( lists ). Internal type: list NoneType ( None ). Internal type: NoneValue function . Internal type: func or method . module . Internal type: module constructor . Internal type: constructor object . Internal type: depends on the class\u2019 name, and it is <class> if the class has no name. Note Internal value types are base value (type: BaseValue ) and default value (type: DefaultValue ) Added in 0.22.0-beta DefaultValue is new in 0.22.0-beta. Changed in 0.22.0-beta Before 0.22.0-beta, a distinction was made between func (user-defined function or function in a module written in Nougaro) and built-in func (built-in function or function in a module written in Python).","title":"Values"},{"location":"1.0/Language/06values/#numbers","text":"Numbers represents real-life numbers. The two types of numbers are int and float . To declare a number, you can use a number literal . Operations that can be used between two numbers are: addition, substraction, multiplication, power. If the second number is non-zero, division, modulo and floor division can be used. All these operations follow the mathematical logic (except for 0^0, that returns 1). Multiplication can be used between a integer (type int ) and a string or a list . For example, 3*\"str\" returns \"strstrstr\" , and 2*[1, 2] returns [1, 2, 1, 2] . In boolean context, a number is true if it is non-zero.","title":"Numbers"},{"location":"1.0/Language/06values/#strings","text":"The type of a string is str . To declare a string, you can use a string literal The only operation that can be used between strings is addition, which concatenates the string with the other. For example, \"hello, \" + \"world!\" returns \"hello, world!\" . Multiplication can be used between a string and an integer (type int ). For example, \"str\"*3 returns \"strstrstr\" . In boolean context, a string is true if it contains at least one character.","title":"Strings"},{"location":"1.0/Language/06values/#lists","text":"Lists are a succession of values. To declare a list, you can use brackets ( [] ), and put every value separated by a comma ( , ) inside. They may be 0 values. To create a list with elements from another list (and other elements), you can use this syntax: [1, 2, *list_, 5] (which is [1, 2, 3, 4, 5] if list_ is [3, 4] ). The only operation that can be used between two lists is multiplication, which extends the first list with the content of the second list. This can also be achieved using extend(list1, list2) Addition can be used between a list and any other value to add an element to the list. Substraction can be used between a list and an integer (type int ) to pop (i.e. delete) an element by index. This supports negative numbers. The returned value is the list after the pop. This can be achieved with pop(list, index) , although this returns the popped value. Multiplication can be used between a list and an integer (type int ). For example, [1, 2]*2 returns [1, 2, 1, 2] . Division can be used between a list and an integer (type int ) to get an element by index. This supports negative numbers. This can be achieved using list(index) or get(list, index) . In boolean context, a list is true if it is not empty","title":"Lists"},{"location":"1.0/Language/06values/#none","text":"None is a value to denote the absence of other values. It is accessible trought the None built-in variable. No operation can be used on None . In boolean context, None is false.","title":"None"},{"location":"1.0/Language/06values/#modules","text":"A module is a value containing various useful functions and constants. A list of modules can be found here . Importing modules is detailed here . The procedure to create your own module is detailed here . No operation can be used on modules. In boolean context, a module is true. Changed in 0.22.0-beta Prior to 0.22.0-beta, a module was false in boolean context.","title":"Modules"},{"location":"1.0/Language/07variables/","text":"Variables Definition Use the syntax var identifier = value (see identifiers and values ) to assign the value value to the variable named identifier . The expression var identifier = value returns value . To assign the same value to multiple variables, you can use var variable1 = var variable2 = var variable3 = value . If you want to assign multiple values to multiple variables, you can use var variable1, variable2 = value1, value2 . This can be used to swap variables: var a, b = b, a . Except for keywords , there are no prohibited variable name. Edition You can edit variables by multiple ways: var a = value ; var a += value : same as var a = a + value ; var a ++ : same as var a += 1 ; var a -= value : same as var a = a - value ; var a -- : same as var a -= 1 ; var a *= value : same as var a = a * value ; var a /= value : same as var a = a / value ; var a ^= value : same as var a = a ^ value ; var a //= value : same as var a = a // value ; var a %= value : same as var a = a % value ; var a ||= value : same as var a = a or value ; var a &&= value : same as var a = a and value ; var a ^^^= value : same as var a = a xor value ; var a |= value : same as var a = a | value ; var a &= value : same as var a = a & value ; var a ^^= value : same as var a = a ^^ value ; var a === value : same as var a = a == value ; var a <== value : same as var a = a <= value ; var a <<= value : same as var a = a < value ; var a >== value : same as var a = a >= value ; var a >>= value : same as var a = a > value . Info For details about these operators, see this page . Note You can also edit multiple variables at the same time: var a, b += 1, 2 : same as var a += 1 ; var b += 2 var a, b ++ : same as var a, b += 1, 1 var a, b //= b, a : same as var c = a ; var a //= b ; var b //= c ; del c Access To access to a variable, you can: give the identifier: foo (returns the value of foo ) use the special syntax: foo ? bar ? a ? b (returns the value of foo if it is defined, otherwise the value of bar ... You can put as much ? identifier as you want.) Then, you can put an expression at the end, such as 2 . In this case, the value returned will be 2 if none of the given identifiers is defined. Deletion If you don't need a variable anymore, you can delete it with the del keyword: del identifier . Examples var foo = var bar = 12 while foo != bar - 1 then var bar -= 1 (see while loop ) Example for deletion Create a variable a , the delete it: nougaro> var a = 1 1 nougaro> del a But be careful! It can return errors: nougaro> var a = 1 1 nougaro> del a nougaro> del a Traceback (more recent call last): In file <stdin>, line 1, in <program>: del a ^ NotDefinedError: a is not defined.","title":"Variables"},{"location":"1.0/Language/07variables/#variables","text":"","title":"Variables"},{"location":"1.0/Language/07variables/#definition","text":"Use the syntax var identifier = value (see identifiers and values ) to assign the value value to the variable named identifier . The expression var identifier = value returns value . To assign the same value to multiple variables, you can use var variable1 = var variable2 = var variable3 = value . If you want to assign multiple values to multiple variables, you can use var variable1, variable2 = value1, value2 . This can be used to swap variables: var a, b = b, a . Except for keywords , there are no prohibited variable name.","title":"Definition"},{"location":"1.0/Language/07variables/#edition","text":"You can edit variables by multiple ways: var a = value ; var a += value : same as var a = a + value ; var a ++ : same as var a += 1 ; var a -= value : same as var a = a - value ; var a -- : same as var a -= 1 ; var a *= value : same as var a = a * value ; var a /= value : same as var a = a / value ; var a ^= value : same as var a = a ^ value ; var a //= value : same as var a = a // value ; var a %= value : same as var a = a % value ; var a ||= value : same as var a = a or value ; var a &&= value : same as var a = a and value ; var a ^^^= value : same as var a = a xor value ; var a |= value : same as var a = a | value ; var a &= value : same as var a = a & value ; var a ^^= value : same as var a = a ^^ value ; var a === value : same as var a = a == value ; var a <== value : same as var a = a <= value ; var a <<= value : same as var a = a < value ; var a >== value : same as var a = a >= value ; var a >>= value : same as var a = a > value . Info For details about these operators, see this page . Note You can also edit multiple variables at the same time: var a, b += 1, 2 : same as var a += 1 ; var b += 2 var a, b ++ : same as var a, b += 1, 1 var a, b //= b, a : same as var c = a ; var a //= b ; var b //= c ; del c","title":"Edition"},{"location":"1.0/Language/07variables/#access","text":"To access to a variable, you can: give the identifier: foo (returns the value of foo ) use the special syntax: foo ? bar ? a ? b (returns the value of foo if it is defined, otherwise the value of bar ... You can put as much ? identifier as you want.) Then, you can put an expression at the end, such as 2 . In this case, the value returned will be 2 if none of the given identifiers is defined.","title":"Access"},{"location":"1.0/Language/07variables/#deletion","text":"If you don't need a variable anymore, you can delete it with the del keyword: del identifier .","title":"Deletion"},{"location":"1.0/Language/07variables/#examples","text":"var foo = var bar = 12 while foo != bar - 1 then var bar -= 1 (see while loop )","title":"Examples"},{"location":"1.0/Language/07variables/#example-for-deletion","text":"Create a variable a , the delete it: nougaro> var a = 1 1 nougaro> del a But be careful! It can return errors: nougaro> var a = 1 1 nougaro> del a nougaro> del a Traceback (more recent call last): In file <stdin>, line 1, in <program>: del a ^ NotDefinedError: a is not defined.","title":"Example for deletion"},{"location":"1.0/Language/08tests/","text":"Test statements List There is the list of test keywords in Nougaro : Nougaro Python if if then : elif elif else else assert assert Syntax if <cond> then <expr> if <cond> then <expr> else <expr> if <cond> then <expr> elif <cond> then <expr> if <cond> then <expr> elif <cond> then <expr> else <expr> if <cond> then <expr> elif <cond> then <expr> elif <cond> then <expr> if <cond> then <expr> elif <cond> then <expr> elif <cond> then <expr> else <expr> etc. Multi-line : if <cond> then <some code here> end if <cond> then <some code here> else <some other code> end if <cond> then <some code here> else <some other code> end etc. Behaviour The condition is checked. If it is true, the expression in the if branch is executed. Otherwise, Nougaro checks for an elif branch. If it exists, it re-checks the condition, etc. If none of the conditions is true and that there is an else branch, the expression in the else branch is executed. If there is no else branch, nothing is executed. Logicals constants Nougaro Python Comments True True equals to 1 False False equals to 0 Conditions Conditions can be any value , which will be interpreted in its boolean context. Conditions can also use test operators . For instance, a == b checks if a is equal to b , where a < b checks if a is strictly less than b .\u202fYou can chain multiple operators: a == b <= c != d checks if a is equal to b and if b is less than or equal to c and if c is different from d . Multiple conditions can be combined with boolean/logical operators . Here is the truth table of the logical operators: and a b a and b 0 0 0 0 1 0 1 0 0 1 1 1 or a b a or b 0 0 0 0 1 1 1 0 1 1 1 1 xor a b a xor b 0 0 0 0 1 1 1 0 1 1 1 0 not a not a 0 1 1 0 There is no priority amongst boolean operators, so for instance a and b or c xor d gives ((a and b) or c) xor d . After interpretation, a condition is always 0 or 1 ( False or True ). Examples if foo == bar then var foo = 12 if bar != foo then var foo = 12 else var bar = 13 * if foo > bar and 12 <= variable then var bar = variable elif foo < bar xor foo > variable then var foo = 3 end if foo > bar and 12 <= variable then var bar = variable elif foo < bar xor foo > variable then var foo = 3 else var foo = 12 end Assertions The assert keyword can be used to quickly check for a condition, and crash if the condition is not met. Its syntax is the following: assert (condition) assert (condition), \"error message.\" If (condition) is true, nothing happens and the program continues. However, if it is false, the program crashes with AssertionError with the error message specified in the code (or without any error message if no error message is specified.)","title":"Test statements"},{"location":"1.0/Language/08tests/#test-statements","text":"","title":"Test statements"},{"location":"1.0/Language/08tests/#list","text":"There is the list of test keywords in Nougaro : Nougaro Python if if then : elif elif else else assert assert","title":"List"},{"location":"1.0/Language/08tests/#syntax","text":"if <cond> then <expr> if <cond> then <expr> else <expr> if <cond> then <expr> elif <cond> then <expr> if <cond> then <expr> elif <cond> then <expr> else <expr> if <cond> then <expr> elif <cond> then <expr> elif <cond> then <expr> if <cond> then <expr> elif <cond> then <expr> elif <cond> then <expr> else <expr> etc. Multi-line : if <cond> then <some code here> end if <cond> then <some code here> else <some other code> end if <cond> then <some code here> else <some other code> end etc.","title":"Syntax"},{"location":"1.0/Language/08tests/#behaviour","text":"The condition is checked. If it is true, the expression in the if branch is executed. Otherwise, Nougaro checks for an elif branch. If it exists, it re-checks the condition, etc. If none of the conditions is true and that there is an else branch, the expression in the else branch is executed. If there is no else branch, nothing is executed.","title":"Behaviour"},{"location":"1.0/Language/08tests/#logicals-constants","text":"Nougaro Python Comments True True equals to 1 False False equals to 0","title":"Logicals constants"},{"location":"1.0/Language/08tests/#conditions","text":"Conditions can be any value , which will be interpreted in its boolean context. Conditions can also use test operators . For instance, a == b checks if a is equal to b , where a < b checks if a is strictly less than b .\u202fYou can chain multiple operators: a == b <= c != d checks if a is equal to b and if b is less than or equal to c and if c is different from d . Multiple conditions can be combined with boolean/logical operators . Here is the truth table of the logical operators:","title":"Conditions"},{"location":"1.0/Language/08tests/#and","text":"a b a and b 0 0 0 0 1 0 1 0 0 1 1 1","title":"and"},{"location":"1.0/Language/08tests/#or","text":"a b a or b 0 0 0 0 1 1 1 0 1 1 1 1","title":"or"},{"location":"1.0/Language/08tests/#xor","text":"a b a xor b 0 0 0 0 1 1 1 0 1 1 1 0","title":"xor"},{"location":"1.0/Language/08tests/#not","text":"a not a 0 1 1 0 There is no priority amongst boolean operators, so for instance a and b or c xor d gives ((a and b) or c) xor d . After interpretation, a condition is always 0 or 1 ( False or True ).","title":"not"},{"location":"1.0/Language/08tests/#examples","text":"if foo == bar then var foo = 12 if bar != foo then var foo = 12 else var bar = 13 * if foo > bar and 12 <= variable then var bar = variable elif foo < bar xor foo > variable then var foo = 3 end if foo > bar and 12 <= variable then var bar = variable elif foo < bar xor foo > variable then var foo = 3 else var foo = 12 end","title":"Examples"},{"location":"1.0/Language/08tests/#assertions","text":"The assert keyword can be used to quickly check for a condition, and crash if the condition is not met. Its syntax is the following: assert (condition) assert (condition), \"error message.\" If (condition) is true, nothing happens and the program continues. However, if it is false, the program crashes with AssertionError with the error message specified in the code (or without any error message if no error message is specified.)","title":"Assertions"},{"location":"1.0/Language/09loops/","text":"Loops Loops are made to execute the same piece of code multiple times in a row. Here is a list of available loops in Nougaro: Nougaro Python C/C++ for for for while while while do ... then loop while (nothing) do ... while for The for loop can have two usages: browse every element in a list (or a str ), or iterate a certain number of times. for each To browse every element in a list (or a str ), use the following syntax: # One line for identifier in list then ... # Multiple lines for identifier in list then ... ... end For each element of the list, the variable identifier will be set to the corresponding element, and this variable can be used inside the loop. for i = ... to ... # One line for identifier = start_value to end_value then ... for identifier = start_value to end_value step step_value then ... # Multiple lines for identifier = start_value to end_value then ... ... end for identifier = start_value to end_value step step_value then ... ... end start_value , end_value and step_value are integers . If step_value is not specified, the default value is 0. This loop starts by setting the variable identifier to start_value , then executes the loop. It then adds step_value to identifier . If the value of identifier is greater than or equal to end_value , the loops stops without executing. Otherwise, it runs until this condition is reached. Note In for loops, the start value can be less than the end value. In that case, don\u2019t forget to give a negative step! while The while loop is used to repeat a piece of code as long as a condition is met. It has the following syntax: # One line while condition then ... # Multiple lines while condition then ... ... end do The do loop is used to execute a piece of code a first time, then repeat it as long as a condition is met. It has the following syntax: # One line do ... then loop while condition # Multiple lines do ... ... then loop while condition Labels Added in 0.20.0-beta Labels were added in 0.20.0-beta. You can label a loop using for:label , while:label or do:label . Labels are identifiers . You can use labels with break and continue . break , continue Changed in 0.20.0-beta Prior to 0.20.0-beta, break and continue did append None to the return list. To re-enable this behaviour, you can enable appendNoneOnBreak or appendNoneOnContinue metas . Added in 0.20.0-beta Labels were added in 0.20.0-beta. The break statement completely stops the loop. If there is a returned list, the value is not added to this list. You can use break and return ... to return a specific value. The continue statement omit the code after it, and execute another time the loop like if the last time was ended. continue and break work normally at the first execution of a do body. continue:label will continue the loop that has this label. If you\u2019re in an :inner loop inside a :label loop, the :inner loop will break and the :label loop will continue. break:label will break the loop that has this label. If you\u2019re in an :inner loop inside a :label loop, the :inner AND the :label loop will break.","title":"Loops"},{"location":"1.0/Language/09loops/#loops","text":"Loops are made to execute the same piece of code multiple times in a row. Here is a list of available loops in Nougaro: Nougaro Python C/C++ for for for while while while do ... then loop while (nothing) do ... while","title":"Loops"},{"location":"1.0/Language/09loops/#for","text":"The for loop can have two usages: browse every element in a list (or a str ), or iterate a certain number of times.","title":"for"},{"location":"1.0/Language/09loops/#for-each","text":"To browse every element in a list (or a str ), use the following syntax: # One line for identifier in list then ... # Multiple lines for identifier in list then ... ... end For each element of the list, the variable identifier will be set to the corresponding element, and this variable can be used inside the loop.","title":"for each"},{"location":"1.0/Language/09loops/#for-i-to","text":"# One line for identifier = start_value to end_value then ... for identifier = start_value to end_value step step_value then ... # Multiple lines for identifier = start_value to end_value then ... ... end for identifier = start_value to end_value step step_value then ... ... end start_value , end_value and step_value are integers . If step_value is not specified, the default value is 0. This loop starts by setting the variable identifier to start_value , then executes the loop. It then adds step_value to identifier . If the value of identifier is greater than or equal to end_value , the loops stops without executing. Otherwise, it runs until this condition is reached. Note In for loops, the start value can be less than the end value. In that case, don\u2019t forget to give a negative step!","title":"for i = ... to ..."},{"location":"1.0/Language/09loops/#while","text":"The while loop is used to repeat a piece of code as long as a condition is met. It has the following syntax: # One line while condition then ... # Multiple lines while condition then ... ... end","title":"while"},{"location":"1.0/Language/09loops/#do","text":"The do loop is used to execute a piece of code a first time, then repeat it as long as a condition is met. It has the following syntax: # One line do ... then loop while condition # Multiple lines do ... ... then loop while condition","title":"do"},{"location":"1.0/Language/09loops/#labels","text":"Added in 0.20.0-beta Labels were added in 0.20.0-beta. You can label a loop using for:label , while:label or do:label . Labels are identifiers . You can use labels with break and continue .","title":"Labels"},{"location":"1.0/Language/09loops/#break-continue","text":"Changed in 0.20.0-beta Prior to 0.20.0-beta, break and continue did append None to the return list. To re-enable this behaviour, you can enable appendNoneOnBreak or appendNoneOnContinue metas . Added in 0.20.0-beta Labels were added in 0.20.0-beta. The break statement completely stops the loop. If there is a returned list, the value is not added to this list. You can use break and return ... to return a specific value. The continue statement omit the code after it, and execute another time the loop like if the last time was ended. continue and break work normally at the first execution of a do body. continue:label will continue the loop that has this label. If you\u2019re in an :inner loop inside a :label loop, the :inner loop will break and the :label loop will continue. break:label will break the loop that has this label. If you\u2019re in an :inner loop inside a :label loop, the :inner AND the :label loop will break.","title":"break, continue"},{"location":"1.0/Language/10functions/","text":"Functions Internal type: func . No operation can be used on functions. Functions are true in boolean context. Changed in 0.22.0-beta Prior to 0.22.0-beta, functions were false in boolean context. Definition To define a function, use the def keyword and an arrow: def name(param1, param2) -> <some code here> . You can omit the name, but in this case you have to call directly the function or to store it in a variable: (def (param1) -> <some code here>)(<arg1>) ; var somefunc = def (param1) -> <some code here> You can define multi-line functions: def name(param1, param2, param3) <some code here> end Note The arguments given and the variables created inside the function are deleted at the end of the function execution. Similarly, the variables created outside the function and before its definition are accessible inside the function, but modifications are not saved. Info There can be 0 parameters. Optional parameters Note Added in 0.22.0-beta To define optional parameters, use this syntax: def name(param1, param2, param3)(optional_param1=default_value, optional_param2=default_value) <some code here> end return statement In the code executed by your function, there can be the return statement. It stops the function. If a value is placed after the statement, the function will return this value when called. In the other cases, it will return None . Call Call a function using this syntax: func(arg1, arg2) You can store arguments in a list and use *list . E.g. func(*list_) , func(*[1, 2, 3]) . Optional arguments Note Added in 0.22.0-beta You can omit optional arguments, which will set them to their default value. In this case: def name(param1, param2, param3)(optional_param1=default_value, optional_param2=default_value) , if you want to keep optional_param1 to its default value but not optional_param2 , you can use: name(argument1, argument2, argument3, <default>, optional_argument2) (keep < and > around <default> ) Examples def foo(a, b) -> a*b - b def bar(a, b) -> (a-1)*b var c = 2 var d = 5 if foo(c, d) == bar(c, d) then var e = True else var e = False (In this case, e = 1) def foo(a, b) if a == 2 then return a + b else return b end end def foo(a, b)(should_return_none = False) if a == 2 then return a + b else if should_return_none then return return b end end foo(1, 5) # 5 foo(2, 5) # 7 foo(1, 5, <default>) # 5 foo(2, 5, <default>) # 7 foo(1, 5, True) # None foo(2, 5, True) # 7","title":"Functions"},{"location":"1.0/Language/10functions/#functions","text":"Internal type: func . No operation can be used on functions. Functions are true in boolean context. Changed in 0.22.0-beta Prior to 0.22.0-beta, functions were false in boolean context.","title":"Functions"},{"location":"1.0/Language/10functions/#definition","text":"To define a function, use the def keyword and an arrow: def name(param1, param2) -> <some code here> . You can omit the name, but in this case you have to call directly the function or to store it in a variable: (def (param1) -> <some code here>)(<arg1>) ; var somefunc = def (param1) -> <some code here> You can define multi-line functions: def name(param1, param2, param3) <some code here> end Note The arguments given and the variables created inside the function are deleted at the end of the function execution. Similarly, the variables created outside the function and before its definition are accessible inside the function, but modifications are not saved. Info There can be 0 parameters.","title":"Definition"},{"location":"1.0/Language/10functions/#optional-parameters","text":"Note Added in 0.22.0-beta To define optional parameters, use this syntax: def name(param1, param2, param3)(optional_param1=default_value, optional_param2=default_value) <some code here> end","title":"Optional parameters"},{"location":"1.0/Language/10functions/#return-statement","text":"In the code executed by your function, there can be the return statement. It stops the function. If a value is placed after the statement, the function will return this value when called. In the other cases, it will return None .","title":"return statement"},{"location":"1.0/Language/10functions/#call","text":"Call a function using this syntax: func(arg1, arg2) You can store arguments in a list and use *list . E.g. func(*list_) , func(*[1, 2, 3]) .","title":"Call"},{"location":"1.0/Language/10functions/#optional-arguments","text":"Note Added in 0.22.0-beta You can omit optional arguments, which will set them to their default value. In this case: def name(param1, param2, param3)(optional_param1=default_value, optional_param2=default_value) , if you want to keep optional_param1 to its default value but not optional_param2 , you can use: name(argument1, argument2, argument3, <default>, optional_argument2) (keep < and > around <default> )","title":"Optional arguments"},{"location":"1.0/Language/10functions/#examples","text":"def foo(a, b) -> a*b - b def bar(a, b) -> (a-1)*b var c = 2 var d = 5 if foo(c, d) == bar(c, d) then var e = True else var e = False (In this case, e = 1) def foo(a, b) if a == 2 then return a + b else return b end end def foo(a, b)(should_return_none = False) if a == 2 then return a + b else if should_return_none then return return b end end foo(1, 5) # 5 foo(2, 5) # 7 foo(1, 5, <default>) # 5 foo(2, 5, <default>) # 7 foo(1, 5, True) # None foo(2, 5, True) # 7","title":"Examples"},{"location":"1.0/Language/11attributes/","text":"Attributes Values in Nougaro can have attributes, i.e. subvalues that have a name. They can be set using the classical variable definition syntax: var variable.attribute = value They can be accessed using the dot-syntax: variable.attribute Note You can even access any name defined in the context of the value. For instance, variable.print references the print built-in function. Pro tip The next time you have a bug, document it. If it is documented, it is therefore not a bug.","title":"Attributes"},{"location":"1.0/Language/11attributes/#attributes","text":"Values in Nougaro can have attributes, i.e. subvalues that have a name. They can be set using the classical variable definition syntax: var variable.attribute = value They can be accessed using the dot-syntax: variable.attribute Note You can even access any name defined in the context of the value. For instance, variable.print references the print built-in function. Pro tip The next time you have a bug, document it. If it is documented, it is therefore not a bug.","title":"Attributes"},{"location":"1.0/Language/12classes/","text":"Classes and objects Note Added in 0.15-beta Nougaro is an object-oriented programming language, which means you can create objects using classes . Class definition To define a class, use this syntax: class Name ... end To create attributes , just use the basic var id = value syntax: class Name var a = 3 var b = 1 end To create methods , just use the basic def syntax . Access to object\u2019s attributes with this : class Name var a = 3 var b = 1 def increment_b(by) var this.b += 1 end def get_a() return this.a end end Methods are attributes themselves. Methods Internal type: method . No operation can be used on methods. Methods are true in boolean context. Changed in 0.22.0-beta Prior to 0.22.0-beta, methods were false in boolean context. Constructor value Internal type: constructor . No operation can be used on constructors. Constructors are false in boolean context. Inheritance To inherit from another class, use the class Name(Iherit) syntax: class ChildOfName(Name) var c = 3 def set_c(new_value) var this.c = new_value end def a_plus_b_plus_c() return this.get_a() + this.b + this.c end end Object Classes can be instanced into objects by calling them. Example: var instance = Name() instance.increment_b(10) assert instance.b == 11 Internal type: Name (depends on the class\u2019 name). No operation can be used on objects. Objects are false in boolean context. Example See the stack.noug example located in ./examples/ in the main Nougaro repository.","title":"Classes and objects"},{"location":"1.0/Language/12classes/#classes-and-objects","text":"Note Added in 0.15-beta Nougaro is an object-oriented programming language, which means you can create objects using classes .","title":"Classes and objects"},{"location":"1.0/Language/12classes/#class-definition","text":"To define a class, use this syntax: class Name ... end To create attributes , just use the basic var id = value syntax: class Name var a = 3 var b = 1 end To create methods , just use the basic def syntax . Access to object\u2019s attributes with this : class Name var a = 3 var b = 1 def increment_b(by) var this.b += 1 end def get_a() return this.a end end Methods are attributes themselves.","title":"Class definition"},{"location":"1.0/Language/12classes/#methods","text":"Internal type: method . No operation can be used on methods. Methods are true in boolean context. Changed in 0.22.0-beta Prior to 0.22.0-beta, methods were false in boolean context.","title":"Methods"},{"location":"1.0/Language/12classes/#constructor-value","text":"Internal type: constructor . No operation can be used on constructors. Constructors are false in boolean context.","title":"Constructor value"},{"location":"1.0/Language/12classes/#inheritance","text":"To inherit from another class, use the class Name(Iherit) syntax: class ChildOfName(Name) var c = 3 def set_c(new_value) var this.c = new_value end def a_plus_b_plus_c() return this.get_a() + this.b + this.c end end","title":"Inheritance"},{"location":"1.0/Language/12classes/#object","text":"Classes can be instanced into objects by calling them. Example: var instance = Name() instance.increment_b(10) assert instance.b == 11 Internal type: Name (depends on the class\u2019 name). No operation can be used on objects. Objects are false in boolean context.","title":"Object"},{"location":"1.0/Language/12classes/#example","text":"See the stack.noug example located in ./examples/ in the main Nougaro repository.","title":"Example"},{"location":"1.0/Language/13read_and_write_files/","text":"Read and write in files Read To read a file, use read \"path/to/file.ext\" or read \"path/to/file\" line_number . You can assign this value to a variable by using read \"file\" >> identifier line_number or var identifier = read \"file\" line_number . line_number is an integer and is optional. You can use \"<stdin>\" as file name to get a line of input from the user. It is exactly like the input built-in function . The read expression returns the content of the file (or of the line). Write To write in a file, use write \"sometext\" >> \"path/to/file.ext\" line_number . line_number is an integer and is optional. To overwrite the content when you write, replace >> by !>> . You can use \"<stdout>\" as file name to print a text in the console. It is exactly like the print built-in function . If you overwrite the contents of <stdout> , the console is cleared (exactly like the clear built-in function .) The write expression returns the text that was wrote in the file.","title":"Read and write in files"},{"location":"1.0/Language/13read_and_write_files/#read-and-write-in-files","text":"","title":"Read and write in files"},{"location":"1.0/Language/13read_and_write_files/#read","text":"To read a file, use read \"path/to/file.ext\" or read \"path/to/file\" line_number . You can assign this value to a variable by using read \"file\" >> identifier line_number or var identifier = read \"file\" line_number . line_number is an integer and is optional. You can use \"<stdin>\" as file name to get a line of input from the user. It is exactly like the input built-in function . The read expression returns the content of the file (or of the line).","title":"Read"},{"location":"1.0/Language/13read_and_write_files/#write","text":"To write in a file, use write \"sometext\" >> \"path/to/file.ext\" line_number . line_number is an integer and is optional. To overwrite the content when you write, replace >> by !>> . You can use \"<stdout>\" as file name to print a text in the console. It is exactly like the print built-in function . If you overwrite the contents of <stdout> , the console is cleared (exactly like the clear built-in function .) The write expression returns the text that was wrote in the file.","title":"Write"},{"location":"1.0/Language/14import/","text":"Import and export import and export are two keywords related to modules /libraries. Import The import keyword is used to import a module in the current code. It follows the syntax import name or import name as alias . It checks for name in Nougaro stardard library and in the current directory for a file named name.noug . dir.subdir.name looks for ./dir/subdir/name.noug . Note: the \u201ccurrent directory\u201d is the directory of the file that were executed. For instance, if the file foo.noug (in the directory project ) imported dir.bar , and that dir/bar.noug has import name , name is checked in the project directory. The \u201ccurrent directory\u201d is the working directory ( pwd ) if you launched an interactive session (shell). The import keyword created a module value with, as attributes, all the values exported by the module. Export The export keyword is used to export a value in a module, that will become an attribute of the module\u2019s value when imported. It follows the syntax export name or export expression as name . More in this page .","title":"Import and export"},{"location":"1.0/Language/14import/#import-and-export","text":"import and export are two keywords related to modules /libraries.","title":"Import and export"},{"location":"1.0/Language/14import/#import","text":"The import keyword is used to import a module in the current code. It follows the syntax import name or import name as alias . It checks for name in Nougaro stardard library and in the current directory for a file named name.noug . dir.subdir.name looks for ./dir/subdir/name.noug . Note: the \u201ccurrent directory\u201d is the directory of the file that were executed. For instance, if the file foo.noug (in the directory project ) imported dir.bar , and that dir/bar.noug has import name , name is checked in the project directory. The \u201ccurrent directory\u201d is the working directory ( pwd ) if you launched an interactive session (shell). The import keyword created a module value with, as attributes, all the values exported by the module.","title":"Import"},{"location":"1.0/Language/14import/#export","text":"The export keyword is used to export a value in a module, that will become an attribute of the module\u2019s value when imported. It follows the syntax export name or export expression as name . More in this page .","title":"Export"},{"location":"1.0/Language/15metas/","text":"Metas Note Added in 0.19.0-beta Metas are a way to use other (or old) functionnalities in Nougaro. They\u2019re used by adding @meta metaName or @meta metaName value at the beginning of a file or in an interactive shell. Note that, instead of @ , you can use any of those prefixes: #@ , %@ , @@ , -@ , $@ . appendNoneOnBreak Note Added in 0.20.0-beta If enabled, this meta forces a break statement to append None to the list returned by the loop . appendNoneOnContinue Note Added in 0.20.0-beta If enabled, this meta forces a continue statement to append None to the list returned by the loop . legacyAbs The legacyAbs meta lets you use the old syntax (in the prototype-1 version) for absolute value, which is |...| . However, this meta disables the bitwise or operation . Example: @meta legacyAbs print(|-1|) # 1 var a = 12 print(|-a|) # 12 nbspBetweenFrenchGuillemets The nbspBetweenFrenchGuillemets meta requires you, if you use the french string quotes ( \u00ab\u00bb ), to put a no-break space (or a narrow no-break space) after the \u00ab and before the \u00bb . Example: @meta nbspBetweenFrenchGuillemets print(\u00ab hello, world \u00bb) /* hello, world * note that the quotes aren\u2019t regular spaces */ setTheTestValueTo Sets __the_test_value__ to the str value given in the meta value If no value is given, it sets it to None .","title":"Metas"},{"location":"1.0/Language/15metas/#metas","text":"Note Added in 0.19.0-beta Metas are a way to use other (or old) functionnalities in Nougaro. They\u2019re used by adding @meta metaName or @meta metaName value at the beginning of a file or in an interactive shell. Note that, instead of @ , you can use any of those prefixes: #@ , %@ , @@ , -@ , $@ .","title":"Metas"},{"location":"1.0/Language/15metas/#appendnoneonbreak","text":"Note Added in 0.20.0-beta If enabled, this meta forces a break statement to append None to the list returned by the loop .","title":"appendNoneOnBreak"},{"location":"1.0/Language/15metas/#appendnoneoncontinue","text":"Note Added in 0.20.0-beta If enabled, this meta forces a continue statement to append None to the list returned by the loop .","title":"appendNoneOnContinue"},{"location":"1.0/Language/15metas/#legacyabs","text":"The legacyAbs meta lets you use the old syntax (in the prototype-1 version) for absolute value, which is |...| . However, this meta disables the bitwise or operation . Example: @meta legacyAbs print(|-1|) # 1 var a = 12 print(|-a|) # 12","title":"legacyAbs"},{"location":"1.0/Language/15metas/#nbspbetweenfrenchguillemets","text":"The nbspBetweenFrenchGuillemets meta requires you, if you use the french string quotes ( \u00ab\u00bb ), to put a no-break space (or a narrow no-break space) after the \u00ab and before the \u00bb . Example: @meta nbspBetweenFrenchGuillemets print(\u00ab hello, world \u00bb) /* hello, world * note that the quotes aren\u2019t regular spaces */","title":"nbspBetweenFrenchGuillemets"},{"location":"1.0/Language/15metas/#setthetestvalueto","text":"Sets __the_test_value__ to the str value given in the meta value If no value is given, it sets it to None .","title":"setTheTestValueTo"},{"location":"1.0/Language/16dollar_print/","text":"Dollar-print syntax The dollar-print syntax is the following: $indentifier It checks if identifier exists, and if so, it prits it. Otherwise, it prints $identifier . If no identifier is given, it prints $ .","title":"Dollar-print syntax"},{"location":"1.0/Language/16dollar_print/#dollar-print-syntax","text":"The dollar-print syntax is the following: $indentifier It checks if identifier exists, and if so, it prits it. Otherwise, it prints $identifier . If no identifier is given, it prints $ .","title":"Dollar-print syntax"},{"location":"1.0/stdlib/01builtin-variables/","text":"List of built-in variables Useful ones __args__ Note Added in 0.16.0-beta List of the command line arguments (type string). Examples (assuming your Nougaro command is noug ): noug -c \"print(__args__)\" -t d 78876876 -v tth prints [\"-c\", \"-t\", \"d\", \"78876876\", \"-v\", \"tth\"] noug examples/args.noug -t d 78876876 -v tth prints [\"examples/args.noug\", \"-t\", \"d\", \"78876876\", \"-v\", \"tth\"] (check out the contents of args.noug ) noug -c \"print(__args__)\" prints [\"-c\"] entering the shell then entering print(__args__) prints [] Nougaro informations Note This section is duplicated in this file __noug_version__ : string of the Nougaro version (e.g. \"0.15.0-beta\".) You can use the noug_version lib to have better informations. __data_version__ : the Nougaro data version, an internal version keeping track of changes in the config file directory structure __version_id__ : an ID increased at least once per version __python_version__ : string of the Python version (e.g. \"3.10.5\") __noug_dir__ : string of the absolute path of the directory where shell.(py/exe) is located. May be used with file I/O read and write statements. OS informations __os_name__ : name of the Operating System (e.g. \"Windows\", \"Linux\", \"Darwin\" \u2013 for macOS \u2013, \"Java\" \u2013 for Jython \u2013, \u2026) __os_release__ : release of the OS (e.g. \"10\" for Windows 10, \"Vista\" for Windows Vista.) __os_version__ : version of the OS (e.g. \"10.0.19044\" for Windows 10 build 19044.) Examples print(\"You use Nougaro version \" + __noug_version__ + \", interpreted with Python \" + __python_version__) print(\"You use \" + __os_name__ + \" \" + __os_release__ + \" \" + __os_version__) On the Jean Dubois' old computer, under Windows 10 21H2, it returns: You use Nougaro version alpha 0.8.1, interpreted with Python 3.10.5 You use Windows 10 10.0.19044 And under his Linux: You use nougaro version beta 0.14, interpreted with Python 3.11.4 You use Linux 6.2.0-27-generic #28-Ubuntu SMP PREEMPT_DYNAMIC Wed Jul 12 22:39:51 UTC 2023 Note that this code is in example.noug","title":"List of built-in variables"},{"location":"1.0/stdlib/01builtin-variables/#list-of-built-in-variables","text":"","title":"List of built-in variables"},{"location":"1.0/stdlib/01builtin-variables/#useful-ones","text":"","title":"Useful ones"},{"location":"1.0/stdlib/01builtin-variables/#__args__","text":"Note Added in 0.16.0-beta List of the command line arguments (type string). Examples (assuming your Nougaro command is noug ): noug -c \"print(__args__)\" -t d 78876876 -v tth prints [\"-c\", \"-t\", \"d\", \"78876876\", \"-v\", \"tth\"] noug examples/args.noug -t d 78876876 -v tth prints [\"examples/args.noug\", \"-t\", \"d\", \"78876876\", \"-v\", \"tth\"] (check out the contents of args.noug ) noug -c \"print(__args__)\" prints [\"-c\"] entering the shell then entering print(__args__) prints []","title":"__args__"},{"location":"1.0/stdlib/01builtin-variables/#nougaro-informations","text":"Note This section is duplicated in this file __noug_version__ : string of the Nougaro version (e.g. \"0.15.0-beta\".) You can use the noug_version lib to have better informations. __data_version__ : the Nougaro data version, an internal version keeping track of changes in the config file directory structure __version_id__ : an ID increased at least once per version __python_version__ : string of the Python version (e.g. \"3.10.5\") __noug_dir__ : string of the absolute path of the directory where shell.(py/exe) is located. May be used with file I/O read and write statements.","title":"Nougaro informations"},{"location":"1.0/stdlib/01builtin-variables/#os-informations","text":"__os_name__ : name of the Operating System (e.g. \"Windows\", \"Linux\", \"Darwin\" \u2013 for macOS \u2013, \"Java\" \u2013 for Jython \u2013, \u2026) __os_release__ : release of the OS (e.g. \"10\" for Windows 10, \"Vista\" for Windows Vista.) __os_version__ : version of the OS (e.g. \"10.0.19044\" for Windows 10 build 19044.)","title":"OS informations"},{"location":"1.0/stdlib/01builtin-variables/#examples","text":"print(\"You use Nougaro version \" + __noug_version__ + \", interpreted with Python \" + __python_version__) print(\"You use \" + __os_name__ + \" \" + __os_release__ + \" \" + __os_version__) On the Jean Dubois' old computer, under Windows 10 21H2, it returns: You use Nougaro version alpha 0.8.1, interpreted with Python 3.10.5 You use Windows 10 10.0.19044 And under his Linux: You use nougaro version beta 0.14, interpreted with Python 3.11.4 You use Linux 6.2.0-27-generic #28-Ubuntu SMP PREEMPT_DYNAMIC Wed Jul 12 22:39:51 UTC 2023 Note that this code is in example.noug","title":"Examples"},{"location":"1.0/stdlib/02builtin-functions/","text":"List of built-in functions Note In this page, type of parameters are noted using the param: type syntax (type can eventually be Any ), and optional parameters are noted between <> and their default value are specified with = . Also, *args tells that this function can take any number of arguments. Input/Output print Syntax: print(str: str) . Prints str in console. Returns None. Example: print(\"hello, world!\") . print_ret Syntax: print_ret(str: str) . Prints str in console and returns it. Example: print_ret(\"hello, world!\") . print_in_red Syntax: print_in_red(str: str) . Prints str in red in console. Returns None. Example: print_in_red(\"Error: this error is RED\") . print_in_red_ret Syntax: print_in_red_ret(str: str) . Prints str in red in console and returns it. Example: print_in_red_ret(\"Error: this error is RED and returned\") print_in_green Syntax: print_in_green(str: str) . Prints str in green in console. Returns None. Example: print_in_green(\"Info: this info is GREEN\") . print_in_green_ret Syntax: print_in_green_ret(str: str) . Prints str in green in console and returns it. Example: print_in_green_ret(\"Info: this info is GREEN and returned\") input Syntax: input(<text_to_display: str = \"\">) . Inputs a str. If text_to_display is specified, it is printed as a prompt. input_int Syntax: input_int(<text_to_display: str = \"\">) . Inputs an int. If text_to_display is specified, it is printed as a prompt. input_num Syntax: input_num(<text_to_display: str = \"\">) . Inputs an int or a float. If text_to_display is specified, it is printed as a prompt. Types Note Python isinstance() returns True if value is an object of the given type. type Syntax: type(value: Any) Returns a str of the internal type of the value. It can be str , int , float , list , func , module , ... is_int Syntax: is_int(value: Any) Returns True if value is an integer , False if it is not. Corresponds to isinstance(value, int) . is_float Syntax: is_float(value: Any) Returns True if value is a float , False if it is not. Corresponds to isinstance(value, float) . is_num Syntax: is_num(value: Any) Returns True if value is a number , False if it is not. Corresponds to isinstance(value, float) or isinstance(value, int) . is_str Syntax: is_str(value: Any) Returns True if value is a string , False if it is not. Corresponds to isinstance(value, str) . is_list Syntax: is_list(value: Any) Returns True if value is a list , False if it is not. Corresponds to isinstance(value, list) . is_func Syntax: is_func(value: Any) Returns True if value is a function , False if it is not. Corresponds to isinstance(value, BaseFunction) where BaseFunction is function, method and builtin function. is_module Syntax: is_module(value: Any) Returns True if value is a module , False if it is not. Corresponds to isinstance(value, module) . Example: import math; is_module(math) will be True , but is_module(3.2) will be False . is_none Syntax: is_none(value: Any) Returns True if value is None , False if it is not. Corresponds to isinstance(value, NoneValue) or value is None . is_constructor Added in 0.20.0-beta Syntax: is_constructor(value: Any) Returns True if value is a constructor , False if it is not. Corresponds to isinstance(value, Constructor) . is_object Added in 0.20.0-beta Syntax: is_object(value: Any) Returns True if value is an object , False if it is not. Corresponds to isinstance(value, object) . Note: in Nougaro, everything is not an object! Type conversions str Syntax: str(value: Any) Converts value to string (may return an error). int Syntax: str(value: Any) Converts value to int (may return an error). float Syntax: str(value: Any) Converts value to float (may return an error). list Syntax: str(value: Any) Converts value to list (may return an error). String and lists operators upper Syntax: upper(value: str) Returns upper-cased string. Example: upper('nougaro') returns 'NOUGARO' . lower Syntax: lower(value: str) Returns lower-cased string. Example: lower('NOUGARO') returns 'nougaro' . split Syntax: split(value: str, <char: str = \" \">) Returns splitted string. For example, split('a b c') returns ['a', 'b', 'c'] ; split('a b c', 'b') returns ['a ', ' c'] . startswith Syntax: startswith(value: str, substring: str) Returns True if value starts with substring . Example: \"nougaro\" starts with \"noug\" , but \"canal du midi\" does not start with \"minimes\" . endswith Syntax: endswith(value: str, substring: str) Returns True if value ends with substring . Example: \"nougaro\" ends with \"garo\" , but \"canal du midi\" does not end with \"minimes\" . len Syntax: len(value: list | str) Returns the number of elements in a list (i.e. its length), or the number of chars in a str. reverse Syntax: reverse(value: list | str) Reverses list or string value by reference and returns the result. Example: reverse([1, 2, 3]) is [3, 2, 1] . append Syntax: append(list: list, value: Any) Appends value at the end of the list. Returns a list. If the list is a variable, edits the variable. pop Syntax: pop(list: list, <index: int = -1>) : Deletes value at given index. Returns the popped element. If the list is a variable, edits the variable. If index is not given, the last element of the list is popped. insert Syntax: insert(list: list, value: Any, <index: int = -1>) Inserts value at the given index in the list. replace Syntax: replace(list: list, index: int, value: Any) Replaces value at the given index in the list. extend Syntax: extend(list1: list, list2: list, <remove_duplicates: int = False>) Appends to list1 the elements of list2 . Returns list1 . If list1 is a variable, edits the variable. If remove_duplicates is True, removes the list2 elements already in list1 before extending. get Syntax: get(list: list, index: int) Returns the element of the list at the given index. max Syntax: max(list: list, <ignore_not_num: int = False>) Returns the maximum element of the list. Ignores elements that are not numbers if ignore_not_num is True , otherwise crashes if such element exists. min Syntax: min(list: list, <ignore_not_num: int = False>) Returns the minimum element of the list. Ignores elements that are not numbers if ignore_not_num is True , otherwise crashes if such element exists. sort Syntax: sort(value: list, <mode: str = \"timsort\">) Sorts list value according to mode mode . Available modes are: timsort (default), stalin , sleep , miracle and panic . timsort is Python\u2019s default algorithm stalin sends to gulag values that are not sorted (i.e. pop them from the list). Example: [1, 4, 3, 7, 6, 10, 2, 5, 23] will be sorted as [1, 4, 7, 10, 23] . sleep sort take only a list of positive integers. It starts as many threads as elements in the list, and each thread waits for as much seconds as the element. For instance, when the list [5, 2, 3, 0] is passed in sleepsort, it starts by launching 4 threads that wait for 5, 2, 3 and 0 seconds. When a thread finishes to wait, it append its element to the list. Use the mode sleep-verbose to see what\u2019s happening. miracle sort literally waits for a miracle. It checks if the list is sorted, and if it is not, it checks again. If a cosmic ray (or another miracle ) flips the right bits in your RAM so the list is sorted, miraclesort will return the sorted list. panic sort checks if the list is sorted. If so, it returns it. If the list is not sorted, this causes an illegal hardware instruction (Unix and GNU/Linux) or a segfault (Windows). Number operators round Syntax: round(number: int | float, <n_digits: int = 0>) Rounds number to the closest number with n_digits decimals. n_digits may be 0 or negative, in which case the returned type is int . Changed in 0.22.0-beta The round built-in function previously returned int only when n_digits was 0 (now it is the case when n_digits \u2a7d 0) Characters and Unicode Note There\u2019s more in the unicodedata module. ord Syntax: ord(c: str) Returns an integer representing the Unicode code point of that c . c is a string with only one character. Ex: ord('a') returns 97 and ord('\u20ac') returns 8364 . chr Syntax: chr(i: int) Returns the string representing the character whose Unicode code point is the integer i . For example, chr(97) returns the string 'a' , and chr(8364) returns the string '\u20ac' . License __gpl__ Syntax: __gpl__(<print_in_term: int = False>) If print_in_term is True , prints the General Public License 3.0 in the terminal. Otherwise, it opens the GPL in the default system program. Files __path_exists__ Syntax: path_exists(path: str) Returns True ( 1 ) if the path exists, False ( 0 ) otherwise. Technical exit Syntax: exit(<stop_code: int | str = 0>) Just quits the interpreter. clear Syntax: clear() Clears the screen. Returns None . void Syntax: void(*args) Does nothing. Returns None . run Syntax: run(file_name: str) Executes the code in the file file_name . example Syntax: example(<example_name: str | None = None>, <return_example_value: int = False>) Executes the code in the file examples/(example_name).noug . If example_name is None , executes the code in the file example.noug . If return_example_value is True , returns the list value from the example execution. system_call Warning This function may be dangerous, because any system command can be executed. Syntax: system_call(cmd: str) Calls cmd . Prints the result of the command and returnt the stop code as str . __python__ Warning This function may be dangerous, because any Python code can be executed. Syntax: __python__(source: str) Runs Python\u2019s eval(source) . __is_keyword__ Syntax: __is_keyword__(word: str) Check if word is a valid Nougaro keyword . __is_valid_token_type__ Syntax: __is_valid_token_type__(tok_type: str) Checks if tok_type is a valid Nougaro token type, such as 'EE' or 'BITWISENOT'. __test__ Syntax: __test__(<should_print_ok: int = False>, <should_i_return: int = False>) Executes the test file for the Nougaro interpreter. If should_print_ok is True , prints \u201cOK\u201d each times a test was succesful. If should_i_return is true, returns the value of the interpreted file. __py_type__ Syntax: __py_type__(value) Returns the string of Python\u2019s type(value) . For instance, __py_type__(__py_type__) is \"<class 'src.runtime.values.functions.builtin_function.BuiltInFunction'>\" __how_many_lines_of_code__ Syntax: __how_many_lines_of_code__(<print_details: Any = True>) Lets you know how many lines of code there are in Nougaro. If print_details is True, details how many lines of code they are in each file. Mathematical functions Please refer to Math module .","title":"List of built-in functions"},{"location":"1.0/stdlib/02builtin-functions/#list-of-built-in-functions","text":"Note In this page, type of parameters are noted using the param: type syntax (type can eventually be Any ), and optional parameters are noted between <> and their default value are specified with = . Also, *args tells that this function can take any number of arguments.","title":"List of built-in functions"},{"location":"1.0/stdlib/02builtin-functions/#inputoutput","text":"","title":"Input/Output"},{"location":"1.0/stdlib/02builtin-functions/#print","text":"Syntax: print(str: str) . Prints str in console. Returns None. Example: print(\"hello, world!\") .","title":"print"},{"location":"1.0/stdlib/02builtin-functions/#print_ret","text":"Syntax: print_ret(str: str) . Prints str in console and returns it. Example: print_ret(\"hello, world!\") .","title":"print_ret"},{"location":"1.0/stdlib/02builtin-functions/#print_in_red","text":"Syntax: print_in_red(str: str) . Prints str in red in console. Returns None. Example: print_in_red(\"Error: this error is RED\") .","title":"print_in_red"},{"location":"1.0/stdlib/02builtin-functions/#print_in_red_ret","text":"Syntax: print_in_red_ret(str: str) . Prints str in red in console and returns it. Example: print_in_red_ret(\"Error: this error is RED and returned\")","title":"print_in_red_ret"},{"location":"1.0/stdlib/02builtin-functions/#print_in_green","text":"Syntax: print_in_green(str: str) . Prints str in green in console. Returns None. Example: print_in_green(\"Info: this info is GREEN\") .","title":"print_in_green"},{"location":"1.0/stdlib/02builtin-functions/#print_in_green_ret","text":"Syntax: print_in_green_ret(str: str) . Prints str in green in console and returns it. Example: print_in_green_ret(\"Info: this info is GREEN and returned\")","title":"print_in_green_ret"},{"location":"1.0/stdlib/02builtin-functions/#input","text":"Syntax: input(<text_to_display: str = \"\">) . Inputs a str. If text_to_display is specified, it is printed as a prompt.","title":"input"},{"location":"1.0/stdlib/02builtin-functions/#input_int","text":"Syntax: input_int(<text_to_display: str = \"\">) . Inputs an int. If text_to_display is specified, it is printed as a prompt.","title":"input_int"},{"location":"1.0/stdlib/02builtin-functions/#input_num","text":"Syntax: input_num(<text_to_display: str = \"\">) . Inputs an int or a float. If text_to_display is specified, it is printed as a prompt.","title":"input_num"},{"location":"1.0/stdlib/02builtin-functions/#types","text":"Note Python isinstance() returns True if value is an object of the given type.","title":"Types"},{"location":"1.0/stdlib/02builtin-functions/#type","text":"Syntax: type(value: Any) Returns a str of the internal type of the value. It can be str , int , float , list , func , module , ...","title":"type"},{"location":"1.0/stdlib/02builtin-functions/#is_int","text":"Syntax: is_int(value: Any) Returns True if value is an integer , False if it is not. Corresponds to isinstance(value, int) .","title":"is_int"},{"location":"1.0/stdlib/02builtin-functions/#is_float","text":"Syntax: is_float(value: Any) Returns True if value is a float , False if it is not. Corresponds to isinstance(value, float) .","title":"is_float"},{"location":"1.0/stdlib/02builtin-functions/#is_num","text":"Syntax: is_num(value: Any) Returns True if value is a number , False if it is not. Corresponds to isinstance(value, float) or isinstance(value, int) .","title":"is_num"},{"location":"1.0/stdlib/02builtin-functions/#is_str","text":"Syntax: is_str(value: Any) Returns True if value is a string , False if it is not. Corresponds to isinstance(value, str) .","title":"is_str"},{"location":"1.0/stdlib/02builtin-functions/#is_list","text":"Syntax: is_list(value: Any) Returns True if value is a list , False if it is not. Corresponds to isinstance(value, list) .","title":"is_list"},{"location":"1.0/stdlib/02builtin-functions/#is_func","text":"Syntax: is_func(value: Any) Returns True if value is a function , False if it is not. Corresponds to isinstance(value, BaseFunction) where BaseFunction is function, method and builtin function.","title":"is_func"},{"location":"1.0/stdlib/02builtin-functions/#is_module","text":"Syntax: is_module(value: Any) Returns True if value is a module , False if it is not. Corresponds to isinstance(value, module) . Example: import math; is_module(math) will be True , but is_module(3.2) will be False .","title":"is_module"},{"location":"1.0/stdlib/02builtin-functions/#is_none","text":"Syntax: is_none(value: Any) Returns True if value is None , False if it is not. Corresponds to isinstance(value, NoneValue) or value is None .","title":"is_none"},{"location":"1.0/stdlib/02builtin-functions/#is_constructor","text":"Added in 0.20.0-beta Syntax: is_constructor(value: Any) Returns True if value is a constructor , False if it is not. Corresponds to isinstance(value, Constructor) .","title":"is_constructor"},{"location":"1.0/stdlib/02builtin-functions/#is_object","text":"Added in 0.20.0-beta Syntax: is_object(value: Any) Returns True if value is an object , False if it is not. Corresponds to isinstance(value, object) . Note: in Nougaro, everything is not an object!","title":"is_object"},{"location":"1.0/stdlib/02builtin-functions/#type-conversions","text":"","title":"Type conversions"},{"location":"1.0/stdlib/02builtin-functions/#str","text":"Syntax: str(value: Any) Converts value to string (may return an error).","title":"str"},{"location":"1.0/stdlib/02builtin-functions/#int","text":"Syntax: str(value: Any) Converts value to int (may return an error).","title":"int"},{"location":"1.0/stdlib/02builtin-functions/#float","text":"Syntax: str(value: Any) Converts value to float (may return an error).","title":"float"},{"location":"1.0/stdlib/02builtin-functions/#list","text":"Syntax: str(value: Any) Converts value to list (may return an error).","title":"list"},{"location":"1.0/stdlib/02builtin-functions/#string-and-lists-operators","text":"","title":"String and lists operators"},{"location":"1.0/stdlib/02builtin-functions/#upper","text":"Syntax: upper(value: str) Returns upper-cased string. Example: upper('nougaro') returns 'NOUGARO' .","title":"upper"},{"location":"1.0/stdlib/02builtin-functions/#lower","text":"Syntax: lower(value: str) Returns lower-cased string. Example: lower('NOUGARO') returns 'nougaro' .","title":"lower"},{"location":"1.0/stdlib/02builtin-functions/#split","text":"Syntax: split(value: str, <char: str = \" \">) Returns splitted string. For example, split('a b c') returns ['a', 'b', 'c'] ; split('a b c', 'b') returns ['a ', ' c'] .","title":"split"},{"location":"1.0/stdlib/02builtin-functions/#startswith","text":"Syntax: startswith(value: str, substring: str) Returns True if value starts with substring . Example: \"nougaro\" starts with \"noug\" , but \"canal du midi\" does not start with \"minimes\" .","title":"startswith"},{"location":"1.0/stdlib/02builtin-functions/#endswith","text":"Syntax: endswith(value: str, substring: str) Returns True if value ends with substring . Example: \"nougaro\" ends with \"garo\" , but \"canal du midi\" does not end with \"minimes\" .","title":"endswith"},{"location":"1.0/stdlib/02builtin-functions/#len","text":"Syntax: len(value: list | str) Returns the number of elements in a list (i.e. its length), or the number of chars in a str.","title":"len"},{"location":"1.0/stdlib/02builtin-functions/#reverse","text":"Syntax: reverse(value: list | str) Reverses list or string value by reference and returns the result. Example: reverse([1, 2, 3]) is [3, 2, 1] .","title":"reverse"},{"location":"1.0/stdlib/02builtin-functions/#append","text":"Syntax: append(list: list, value: Any) Appends value at the end of the list. Returns a list. If the list is a variable, edits the variable.","title":"append"},{"location":"1.0/stdlib/02builtin-functions/#pop","text":"Syntax: pop(list: list, <index: int = -1>) : Deletes value at given index. Returns the popped element. If the list is a variable, edits the variable. If index is not given, the last element of the list is popped.","title":"pop"},{"location":"1.0/stdlib/02builtin-functions/#insert","text":"Syntax: insert(list: list, value: Any, <index: int = -1>) Inserts value at the given index in the list.","title":"insert"},{"location":"1.0/stdlib/02builtin-functions/#replace","text":"Syntax: replace(list: list, index: int, value: Any) Replaces value at the given index in the list.","title":"replace"},{"location":"1.0/stdlib/02builtin-functions/#extend","text":"Syntax: extend(list1: list, list2: list, <remove_duplicates: int = False>) Appends to list1 the elements of list2 . Returns list1 . If list1 is a variable, edits the variable. If remove_duplicates is True, removes the list2 elements already in list1 before extending.","title":"extend"},{"location":"1.0/stdlib/02builtin-functions/#get","text":"Syntax: get(list: list, index: int) Returns the element of the list at the given index.","title":"get"},{"location":"1.0/stdlib/02builtin-functions/#max","text":"Syntax: max(list: list, <ignore_not_num: int = False>) Returns the maximum element of the list. Ignores elements that are not numbers if ignore_not_num is True , otherwise crashes if such element exists.","title":"max"},{"location":"1.0/stdlib/02builtin-functions/#min","text":"Syntax: min(list: list, <ignore_not_num: int = False>) Returns the minimum element of the list. Ignores elements that are not numbers if ignore_not_num is True , otherwise crashes if such element exists.","title":"min"},{"location":"1.0/stdlib/02builtin-functions/#sort","text":"Syntax: sort(value: list, <mode: str = \"timsort\">) Sorts list value according to mode mode . Available modes are: timsort (default), stalin , sleep , miracle and panic . timsort is Python\u2019s default algorithm stalin sends to gulag values that are not sorted (i.e. pop them from the list). Example: [1, 4, 3, 7, 6, 10, 2, 5, 23] will be sorted as [1, 4, 7, 10, 23] . sleep sort take only a list of positive integers. It starts as many threads as elements in the list, and each thread waits for as much seconds as the element. For instance, when the list [5, 2, 3, 0] is passed in sleepsort, it starts by launching 4 threads that wait for 5, 2, 3 and 0 seconds. When a thread finishes to wait, it append its element to the list. Use the mode sleep-verbose to see what\u2019s happening. miracle sort literally waits for a miracle. It checks if the list is sorted, and if it is not, it checks again. If a cosmic ray (or another miracle ) flips the right bits in your RAM so the list is sorted, miraclesort will return the sorted list. panic sort checks if the list is sorted. If so, it returns it. If the list is not sorted, this causes an illegal hardware instruction (Unix and GNU/Linux) or a segfault (Windows).","title":"sort"},{"location":"1.0/stdlib/02builtin-functions/#number-operators","text":"","title":"Number operators"},{"location":"1.0/stdlib/02builtin-functions/#round","text":"Syntax: round(number: int | float, <n_digits: int = 0>) Rounds number to the closest number with n_digits decimals. n_digits may be 0 or negative, in which case the returned type is int . Changed in 0.22.0-beta The round built-in function previously returned int only when n_digits was 0 (now it is the case when n_digits \u2a7d 0)","title":"round"},{"location":"1.0/stdlib/02builtin-functions/#characters-and-unicode","text":"Note There\u2019s more in the unicodedata module.","title":"Characters and Unicode"},{"location":"1.0/stdlib/02builtin-functions/#ord","text":"Syntax: ord(c: str) Returns an integer representing the Unicode code point of that c . c is a string with only one character. Ex: ord('a') returns 97 and ord('\u20ac') returns 8364 .","title":"ord"},{"location":"1.0/stdlib/02builtin-functions/#chr","text":"Syntax: chr(i: int) Returns the string representing the character whose Unicode code point is the integer i . For example, chr(97) returns the string 'a' , and chr(8364) returns the string '\u20ac' .","title":"chr"},{"location":"1.0/stdlib/02builtin-functions/#license","text":"","title":"License"},{"location":"1.0/stdlib/02builtin-functions/#__gpl__","text":"Syntax: __gpl__(<print_in_term: int = False>) If print_in_term is True , prints the General Public License 3.0 in the terminal. Otherwise, it opens the GPL in the default system program.","title":"__gpl__"},{"location":"1.0/stdlib/02builtin-functions/#files","text":"","title":"Files"},{"location":"1.0/stdlib/02builtin-functions/#__path_exists__","text":"Syntax: path_exists(path: str) Returns True ( 1 ) if the path exists, False ( 0 ) otherwise.","title":"__path_exists__"},{"location":"1.0/stdlib/02builtin-functions/#technical","text":"","title":"Technical"},{"location":"1.0/stdlib/02builtin-functions/#exit","text":"Syntax: exit(<stop_code: int | str = 0>) Just quits the interpreter.","title":"exit"},{"location":"1.0/stdlib/02builtin-functions/#clear","text":"Syntax: clear() Clears the screen. Returns None .","title":"clear"},{"location":"1.0/stdlib/02builtin-functions/#void","text":"Syntax: void(*args) Does nothing. Returns None .","title":"void"},{"location":"1.0/stdlib/02builtin-functions/#run","text":"Syntax: run(file_name: str) Executes the code in the file file_name .","title":"run"},{"location":"1.0/stdlib/02builtin-functions/#example","text":"Syntax: example(<example_name: str | None = None>, <return_example_value: int = False>) Executes the code in the file examples/(example_name).noug . If example_name is None , executes the code in the file example.noug . If return_example_value is True , returns the list value from the example execution.","title":"example"},{"location":"1.0/stdlib/02builtin-functions/#system_call","text":"Warning This function may be dangerous, because any system command can be executed. Syntax: system_call(cmd: str) Calls cmd . Prints the result of the command and returnt the stop code as str .","title":"system_call"},{"location":"1.0/stdlib/02builtin-functions/#__python__","text":"Warning This function may be dangerous, because any Python code can be executed. Syntax: __python__(source: str) Runs Python\u2019s eval(source) .","title":"__python__"},{"location":"1.0/stdlib/02builtin-functions/#__is_keyword__","text":"Syntax: __is_keyword__(word: str) Check if word is a valid Nougaro keyword .","title":"__is_keyword__"},{"location":"1.0/stdlib/02builtin-functions/#__is_valid_token_type__","text":"Syntax: __is_valid_token_type__(tok_type: str) Checks if tok_type is a valid Nougaro token type, such as 'EE' or 'BITWISENOT'.","title":"__is_valid_token_type__"},{"location":"1.0/stdlib/02builtin-functions/#__test__","text":"Syntax: __test__(<should_print_ok: int = False>, <should_i_return: int = False>) Executes the test file for the Nougaro interpreter. If should_print_ok is True , prints \u201cOK\u201d each times a test was succesful. If should_i_return is true, returns the value of the interpreted file.","title":"__test__"},{"location":"1.0/stdlib/02builtin-functions/#__py_type__","text":"Syntax: __py_type__(value) Returns the string of Python\u2019s type(value) . For instance, __py_type__(__py_type__) is \"<class 'src.runtime.values.functions.builtin_function.BuiltInFunction'>\"","title":"__py_type__"},{"location":"1.0/stdlib/02builtin-functions/#__how_many_lines_of_code__","text":"Syntax: __how_many_lines_of_code__(<print_details: Any = True>) Lets you know how many lines of code there are in Nougaro. If print_details is True, details how many lines of code they are in each file.","title":"__how_many_lines_of_code__"},{"location":"1.0/stdlib/02builtin-functions/#mathematical-functions","text":"Please refer to Math module .","title":"Mathematical functions"},{"location":"1.0/stdlib/modules/","text":"Modules Modules allow you to spend less time coding, and often implement things that would be usually undoable in Nougaro. You can import a module using the import keyword. Here is the list of available Modules in Nougaro: Debug Hello (just prints \u201cHello, world!\u201d when imported) Lorem Math Noug Version Random Statistics Time Unicodedata Webbrowser","title":"Modules"},{"location":"1.0/stdlib/modules/#modules","text":"Modules allow you to spend less time coding, and often implement things that would be usually undoable in Nougaro. You can import a module using the import keyword. Here is the list of available Modules in Nougaro: Debug Hello (just prints \u201cHello, world!\u201d when imported) Lorem Math Noug Version Random Statistics Time Unicodedata Webbrowser","title":"Modules"},{"location":"1.0/stdlib/modules/debug/","text":"Debug Source code Debug is a lib that contains some debugging tools. Constants debug.is_debug_enabled : 1 if DEBUG mode is enabled, else 0 debug.should_print_context : 1 if PRINT CONTEXT debug option is enabled, else 0 debug.should_print_time (new in 0.20.0-beta): 1 if PRINT TIME debug option is enabled, else 0 Functions debug.debug_mode_enable Syntax: debug.debug_mode_enable Enables DEBUG mode. debug.enable Alias for debug.debug_mode_enable debug.debug_mode_disable Syntax: debug.debug_mode_disable Disables DEBUG mode. debug.disable Alias for debug.debug_mode_disable debug.print_context Syntax: debug.print_context Enables PRINT CONTEXT debug option. debug.stop_print_context Syntax: debug.stop_print_context Disables PRINT CONTEXT debug option. debug.print_time Added in 0.20.0-beta Syntax: debug.print_time Enables PRINT TIME debug option. debug.stop_print_time Added in 0.20.0-beta Syntax: debug.stop_print_time Disables PRINT TIME debug option. debug.enable_all Changed in 0.20.0-beta Now also enables PRINT TIME debug option. Syntax: debug.enable_all Enables DEBUG mode with all its options debug.disable_all Changed in 0.20.0-beta Now also disables PRINT TIME debug option. Syntax: debug.disable_all Disables DEBUG mode and all its options.","title":"Debug"},{"location":"1.0/stdlib/modules/debug/#debug","text":"Source code Debug is a lib that contains some debugging tools.","title":"Debug"},{"location":"1.0/stdlib/modules/debug/#constants","text":"debug.is_debug_enabled : 1 if DEBUG mode is enabled, else 0 debug.should_print_context : 1 if PRINT CONTEXT debug option is enabled, else 0 debug.should_print_time (new in 0.20.0-beta): 1 if PRINT TIME debug option is enabled, else 0","title":"Constants"},{"location":"1.0/stdlib/modules/debug/#functions","text":"","title":"Functions"},{"location":"1.0/stdlib/modules/debug/#debugdebug_mode_enable","text":"Syntax: debug.debug_mode_enable Enables DEBUG mode.","title":"debug.debug_mode_enable"},{"location":"1.0/stdlib/modules/debug/#debugenable","text":"Alias for debug.debug_mode_enable","title":"debug.enable"},{"location":"1.0/stdlib/modules/debug/#debugdebug_mode_disable","text":"Syntax: debug.debug_mode_disable Disables DEBUG mode.","title":"debug.debug_mode_disable"},{"location":"1.0/stdlib/modules/debug/#debugdisable","text":"Alias for debug.debug_mode_disable","title":"debug.disable"},{"location":"1.0/stdlib/modules/debug/#debugprint_context","text":"Syntax: debug.print_context Enables PRINT CONTEXT debug option.","title":"debug.print_context"},{"location":"1.0/stdlib/modules/debug/#debugstop_print_context","text":"Syntax: debug.stop_print_context Disables PRINT CONTEXT debug option.","title":"debug.stop_print_context"},{"location":"1.0/stdlib/modules/debug/#debugprint_time","text":"Added in 0.20.0-beta Syntax: debug.print_time Enables PRINT TIME debug option.","title":"debug.print_time"},{"location":"1.0/stdlib/modules/debug/#debugstop_print_time","text":"Added in 0.20.0-beta Syntax: debug.stop_print_time Disables PRINT TIME debug option.","title":"debug.stop_print_time"},{"location":"1.0/stdlib/modules/debug/#debugenable_all","text":"Changed in 0.20.0-beta Now also enables PRINT TIME debug option. Syntax: debug.enable_all Enables DEBUG mode with all its options","title":"debug.enable_all"},{"location":"1.0/stdlib/modules/debug/#debugdisable_all","text":"Changed in 0.20.0-beta Now also disables PRINT TIME debug option. Syntax: debug.disable_all Disables DEBUG mode and all its options.","title":"debug.disable_all"},{"location":"1.0/stdlib/modules/lorem/","text":"Lorem Source code Lorem is a lib to generate Lorem Ipsum texts (dummy texts). Function lorem.ipsum Syntax: lorem.ipsum(paragraphs: int) Generate a random Lorem Ipsum text (dummy text) with as many paragraphs as specified in paragraphs .","title":"Lorem"},{"location":"1.0/stdlib/modules/lorem/#lorem","text":"Source code Lorem is a lib to generate Lorem Ipsum texts (dummy texts).","title":"Lorem"},{"location":"1.0/stdlib/modules/lorem/#function","text":"","title":"Function"},{"location":"1.0/stdlib/modules/lorem/#loremipsum","text":"Syntax: lorem.ipsum(paragraphs: int) Generate a random Lorem Ipsum text (dummy text) with as many paragraphs as specified in paragraphs .","title":"lorem.ipsum"},{"location":"1.0/stdlib/modules/math/","text":"Math Source code The math module can be imported with the statement import math . The math module is used to do math. To do statistics, use the statistics module. Constants math.pi : Pi . \\pi = 3.141592653589793 math.tau : Tau . \\tau = 6.283185307179586 math.sqrt_pi : square root of pi ( math.sqrt(math.pi) ). \\sqrt\\pi = 1.7724538509055159 math.sqrt_tau : square root of tau ( math.sqrt(math.tau) ). \\sqrt\\tau = 2.5066282746310002 math.e : Euler's number . e = 2.718281828459045 Functions math.sqrt Syntax: math.sqrt(n) Returns \\sqrt{n} (square root of n ), n \\in \\mathbb{R}_+ math.isqrt Syntax: math.isqrt(n) Returns \\left\\lfloor\\sqrt{n}\\right\\rfloor (integer square root of n ), n \\in \\mathbb{N} math.root Syntax: math.root(n, k) Returns the \\sqrt[k]{n} ( k -th root of n ), n \\in \\mathbb{R}_+, k \\in \\mathbb{R} math.iroot Syntax: math.iroot(n, k) Returns \\left\\lfloor\\sqrt[k]{n}\\right\\rfloor (integer k -th root of n ), n \\in \\mathbb{R}_+, k \\in \\mathbb{R} math.degrees Syntax: math.degrees(angle) Transforms a radian angle to a degree angle. \\verb|angle| \\in \\mathbb{R} math.radians Syntax: math.radians(angle) Transform a degree angle to a radian angle. \\verb|angle| \\in \\mathbb{R} math.sin Syntax: math.sin(angle) Returns sine of an angle in radians. \\verb|angle| \\in \\mathbb{R} math.cos Syntax: math.cos(angle) Returns cosine of an angle in radians. \\verb|angle| \\in \\mathbb{R} math.tan Syntax: math.tan(angle) Returns tangent of an angle in radians. \\verb|angle| \\in \\mathbb{R} math.asin Syntax: math.asin(sin) Returns arcsine of an sin (result in radians). \\verb|sin| \\in [-1, 1] math.acos Syntax: math.acos(cos) Returns arccosine of an cos (result in radians). \\verb|cos| \\in [-1, 1] math.atan Syntax: math.atan(tan) Returns arctangent of an tan (result in radians). \\verb|tan| \\in \\mathbb{R} math.abs Syntax: math.abs(n) Returns \\left|n\\right| (absolute value of n ), n \\in \\mathbb{R} math.log Syntax: math.log(n, <base>) Returns the natural logarithm ( base = e ) of n if no base is given, or the logarithm of n in the given base. n, base \\in \\mathbb{R} math.log2 Syntax: math.log2(n) Same as math.log(n, 2) . n \\in \\mathbb{R} math.factorial Added in 0.19.0-beta Syntax: math.factorial(n) Returns n! ( factorial of n ). n \\in \\mathbb{N}","title":"Math"},{"location":"1.0/stdlib/modules/math/#math","text":"Source code The math module can be imported with the statement import math . The math module is used to do math. To do statistics, use the statistics module.","title":"Math"},{"location":"1.0/stdlib/modules/math/#constants","text":"math.pi : Pi . \\pi = 3.141592653589793 math.tau : Tau . \\tau = 6.283185307179586 math.sqrt_pi : square root of pi ( math.sqrt(math.pi) ). \\sqrt\\pi = 1.7724538509055159 math.sqrt_tau : square root of tau ( math.sqrt(math.tau) ). \\sqrt\\tau = 2.5066282746310002 math.e : Euler's number . e = 2.718281828459045","title":"Constants"},{"location":"1.0/stdlib/modules/math/#functions","text":"","title":"Functions"},{"location":"1.0/stdlib/modules/math/#mathsqrt","text":"Syntax: math.sqrt(n) Returns \\sqrt{n} (square root of n ), n \\in \\mathbb{R}_+","title":"math.sqrt"},{"location":"1.0/stdlib/modules/math/#mathisqrt","text":"Syntax: math.isqrt(n) Returns \\left\\lfloor\\sqrt{n}\\right\\rfloor (integer square root of n ), n \\in \\mathbb{N}","title":"math.isqrt"},{"location":"1.0/stdlib/modules/math/#mathroot","text":"Syntax: math.root(n, k) Returns the \\sqrt[k]{n} ( k -th root of n ), n \\in \\mathbb{R}_+, k \\in \\mathbb{R}","title":"math.root"},{"location":"1.0/stdlib/modules/math/#mathiroot","text":"Syntax: math.iroot(n, k) Returns \\left\\lfloor\\sqrt[k]{n}\\right\\rfloor (integer k -th root of n ), n \\in \\mathbb{R}_+, k \\in \\mathbb{R}","title":"math.iroot"},{"location":"1.0/stdlib/modules/math/#mathdegrees","text":"Syntax: math.degrees(angle) Transforms a radian angle to a degree angle. \\verb|angle| \\in \\mathbb{R}","title":"math.degrees"},{"location":"1.0/stdlib/modules/math/#mathradians","text":"Syntax: math.radians(angle) Transform a degree angle to a radian angle. \\verb|angle| \\in \\mathbb{R}","title":"math.radians"},{"location":"1.0/stdlib/modules/math/#mathsin","text":"Syntax: math.sin(angle) Returns sine of an angle in radians. \\verb|angle| \\in \\mathbb{R}","title":"math.sin"},{"location":"1.0/stdlib/modules/math/#mathcos","text":"Syntax: math.cos(angle) Returns cosine of an angle in radians. \\verb|angle| \\in \\mathbb{R}","title":"math.cos"},{"location":"1.0/stdlib/modules/math/#mathtan","text":"Syntax: math.tan(angle) Returns tangent of an angle in radians. \\verb|angle| \\in \\mathbb{R}","title":"math.tan"},{"location":"1.0/stdlib/modules/math/#mathasin","text":"Syntax: math.asin(sin) Returns arcsine of an sin (result in radians). \\verb|sin| \\in [-1, 1]","title":"math.asin"},{"location":"1.0/stdlib/modules/math/#mathacos","text":"Syntax: math.acos(cos) Returns arccosine of an cos (result in radians). \\verb|cos| \\in [-1, 1]","title":"math.acos"},{"location":"1.0/stdlib/modules/math/#mathatan","text":"Syntax: math.atan(tan) Returns arctangent of an tan (result in radians). \\verb|tan| \\in \\mathbb{R}","title":"math.atan"},{"location":"1.0/stdlib/modules/math/#mathabs","text":"Syntax: math.abs(n) Returns \\left|n\\right| (absolute value of n ), n \\in \\mathbb{R}","title":"math.abs"},{"location":"1.0/stdlib/modules/math/#mathlog","text":"Syntax: math.log(n, <base>) Returns the natural logarithm ( base = e ) of n if no base is given, or the logarithm of n in the given base. n, base \\in \\mathbb{R}","title":"math.log"},{"location":"1.0/stdlib/modules/math/#mathlog2","text":"Syntax: math.log2(n) Same as math.log(n, 2) . n \\in \\mathbb{R}","title":"math.log2"},{"location":"1.0/stdlib/modules/math/#mathfactorial","text":"Added in 0.19.0-beta Syntax: math.factorial(n) Returns n! ( factorial of n ). n \\in \\mathbb{N}","title":"math.factorial"},{"location":"1.0/stdlib/modules/noug_version/","text":"Noug Version Source code The noug_version module can be imported with the statement import noug_version . The noug_version module is used to have better informations about the current Nougaro version. Note Nougaro uses semantic versionning . We recommend you to read the whole semver specification. Constants Examples are given considering the version 3.14.15-rc.92 noug_version.major : integer of the MAJOR version ( 3 ) noug_version.minor : integer of the MINOR version ( 14 ) noug_version.patch : integer of the PATCH version ( 15 ) noug_version.phase : string of the PHASE name ( \"rc\" ). Usually alpha , beta , rc , stable . noug_version.release_serial : integer of the MINOR INDEV version ( 92 ). It resets when the phase switches back to stable . When the version is under the form 3.14.15-stable or 0.16.0-beta , this number is 0 . noug_version.version_list : list under the form [major, minor, patch, phase, release_serial] (in our example: [3, 14, 15, \"rc\", 92] ) Changed in 0.19.0 and 0.20.0 noug_version.release_serial is the new name for noug_version.phase_minor in 0.19.0-beta. noug_version.phase_minor has been removed in 0.20.0-beta. Functions noug_version.clean_version_for_gh Version history Added in 0.19.0-beta Changed in 0.23.0-beta: added optional parameters print_value and return_value . Syntax: noug_version.clean_version_for_gh(<print_value=False>, <return_value=True>) Generates a beautiful str for the GitHub issues or PRs. If print_value is true, it prints the value. If return_value is true, it returns the value. noug_version.clean_version_for_nuitka_under_windows Added in 0.23.0-beta Syntax: noug_version.clean_version_for_nuitka_under_windows(<print_value=False>, <return_value=True>) Generates a string under the form \"<major>.<minor>.<patch>\" , or \"<major>.<minor>.<patch>.<release_serial>\" if release_serial \u2260 0. This is meant to be passed as the --windows-product-version option of Ntuika. If print_value is true, it prints the value. If return_value is true, it returns the value.","title":"Noug Version"},{"location":"1.0/stdlib/modules/noug_version/#noug-version","text":"Source code The noug_version module can be imported with the statement import noug_version . The noug_version module is used to have better informations about the current Nougaro version. Note Nougaro uses semantic versionning . We recommend you to read the whole semver specification.","title":"Noug Version"},{"location":"1.0/stdlib/modules/noug_version/#constants","text":"Examples are given considering the version 3.14.15-rc.92 noug_version.major : integer of the MAJOR version ( 3 ) noug_version.minor : integer of the MINOR version ( 14 ) noug_version.patch : integer of the PATCH version ( 15 ) noug_version.phase : string of the PHASE name ( \"rc\" ). Usually alpha , beta , rc , stable . noug_version.release_serial : integer of the MINOR INDEV version ( 92 ). It resets when the phase switches back to stable . When the version is under the form 3.14.15-stable or 0.16.0-beta , this number is 0 . noug_version.version_list : list under the form [major, minor, patch, phase, release_serial] (in our example: [3, 14, 15, \"rc\", 92] ) Changed in 0.19.0 and 0.20.0 noug_version.release_serial is the new name for noug_version.phase_minor in 0.19.0-beta. noug_version.phase_minor has been removed in 0.20.0-beta.","title":"Constants"},{"location":"1.0/stdlib/modules/noug_version/#functions","text":"","title":"Functions"},{"location":"1.0/stdlib/modules/noug_version/#noug_versionclean_version_for_gh","text":"Version history Added in 0.19.0-beta Changed in 0.23.0-beta: added optional parameters print_value and return_value . Syntax: noug_version.clean_version_for_gh(<print_value=False>, <return_value=True>) Generates a beautiful str for the GitHub issues or PRs. If print_value is true, it prints the value. If return_value is true, it returns the value.","title":"noug_version.clean_version_for_gh"},{"location":"1.0/stdlib/modules/noug_version/#noug_versionclean_version_for_nuitka_under_windows","text":"Added in 0.23.0-beta Syntax: noug_version.clean_version_for_nuitka_under_windows(<print_value=False>, <return_value=True>) Generates a string under the form \"<major>.<minor>.<patch>\" , or \"<major>.<minor>.<patch>.<release_serial>\" if release_serial \u2260 0. This is meant to be passed as the --windows-product-version option of Ntuika. If print_value is true, it prints the value. If return_value is true, it returns the value.","title":"noug_version.clean_version_for_nuitka_under_windows"},{"location":"1.0/stdlib/modules/random/","text":"Random Source code The random module can be imported with the statement import random . The random module is used to generate random numbers. Functions random.randint Syntax: random.randint(a: int, b: int) Generates a random integer between a and b . a and b must be integers . The condition a <= b MUST be verified. random.random Syntax: random.random Generates a random floating number between 0.0000000000000000 and 1.0000000000000000. random.choice Syntax: random.choice(list) Returns a random element of the list . random.shuffle Syntax: random.shuffle(list) Shuffles (by reference) and returns list . random.seed Syntax: random.seed(int) Sets the seed to generate numbers to int .","title":"Random"},{"location":"1.0/stdlib/modules/random/#random","text":"Source code The random module can be imported with the statement import random . The random module is used to generate random numbers.","title":"Random"},{"location":"1.0/stdlib/modules/random/#functions","text":"","title":"Functions"},{"location":"1.0/stdlib/modules/random/#randomrandint","text":"Syntax: random.randint(a: int, b: int) Generates a random integer between a and b . a and b must be integers . The condition a <= b MUST be verified.","title":"random.randint"},{"location":"1.0/stdlib/modules/random/#randomrandom","text":"Syntax: random.random Generates a random floating number between 0.0000000000000000 and 1.0000000000000000.","title":"random.random"},{"location":"1.0/stdlib/modules/random/#randomchoice","text":"Syntax: random.choice(list) Returns a random element of the list .","title":"random.choice"},{"location":"1.0/stdlib/modules/random/#randomshuffle","text":"Syntax: random.shuffle(list) Shuffles (by reference) and returns list .","title":"random.shuffle"},{"location":"1.0/stdlib/modules/random/#randomseed","text":"Syntax: random.seed(int) Sets the seed to generate numbers to int .","title":"random.seed"},{"location":"1.0/stdlib/modules/statistics/","text":"Statistics Source code The statistics module can be imported with the statement import statistics . The statistics module is used to do statistics. To do math, use the math module. Functions statistics.mean Syntax: statistics.mean(list) Calculates the mean of a list of numbers. statistics.geometric_mean Syntax: statistics.geometric_mean(list) Calculates the geometric mean of a list of positive numbers. statistics.harmonic_mean Syntax: statistics.harmonic_mean Calculates the harmonic mean of a list of positive numbers. statistics.median Syntax: statistics.median(list) Calculates the median of a list of numbers. statistics.quantiles Syntax: statistics.quantiles(list, n=4, method='exclusive') Cuts a list of numbers in n parts and returns a list of the values where the list was cut, using exclusive or inclusive method. n and method are optional. Disclamer from the Python source code Notes on methods for computing quantiles There is no one perfect way to compute quantiles. Here we offer two methods that serve common needs. Most other packages surveyed offered at least one or both of these two, making them \"standard\" in the sense of \"widely-adopted and reproducible\". They are also easy to explain, easy to compute manually, and have straight-forward interpretations that aren't surprising. The default method is known as \"R6\", \"PERCENTILE.EXC\", or \"expected value of rank order statistics\". The alternative method is known as \"R7\", \"PERCENTILE.INC\", or \"mode of rank order statistics\". For sample data where there is a positive probability for values beyond the range of the data, the R6 exclusive method is a reasonable choice. Consider a random sample of nine values from a population with a uniform distribution from 0.0 to 1.0. The distribution of the third ranked sample point is described by betavariate(alpha=3, beta=7) which has mode=0.250, median=0.286, and mean=0.300. Only the latter (which corresponds with R6) gives the desired cut point with 30% of the population falling below that value, making it comparable to a result from an inv_cdf() function. The R6 exclusive method is also idempotent. For describing population data where the end points are known to be included in the data, the R7 inclusive method is a reasonable choice. Instead of the mean, it uses the mode of the beta distribution for the interior points. Per Hyndman & Fan, \"One nice property is that the vertices of Q7(p) divide the range into n - 1 intervals, and exactly 100p% of the intervals lie to the left of Q7(p) and 100(1 - p)% of the intervals lie to the right of Q7(p).\" If needed, other methods could be added. However, for now, the position is that fewer options make for easier choices and that external packages can be used for anything more advanced. statistics.scope(list) Syntax: statistics.scope(list) Calculates the scope of a list of numbers: max(list) - min(list) . statistics.mode(list) Syntax: statistics.mode(list) Calculates the mode of a list of numbers, i.e. the most common value. statistics.multimode(value) Syntax: statistics.multimode(value) Calculates the modes of a list or a str, i.e. the most common values. It returns a list.","title":"Statistics"},{"location":"1.0/stdlib/modules/statistics/#statistics","text":"Source code The statistics module can be imported with the statement import statistics . The statistics module is used to do statistics. To do math, use the math module.","title":"Statistics"},{"location":"1.0/stdlib/modules/statistics/#functions","text":"","title":"Functions"},{"location":"1.0/stdlib/modules/statistics/#statisticsmean","text":"Syntax: statistics.mean(list) Calculates the mean of a list of numbers.","title":"statistics.mean"},{"location":"1.0/stdlib/modules/statistics/#statisticsgeometric_mean","text":"Syntax: statistics.geometric_mean(list) Calculates the geometric mean of a list of positive numbers.","title":"statistics.geometric_mean"},{"location":"1.0/stdlib/modules/statistics/#statisticsharmonic_mean","text":"Syntax: statistics.harmonic_mean Calculates the harmonic mean of a list of positive numbers.","title":"statistics.harmonic_mean"},{"location":"1.0/stdlib/modules/statistics/#statisticsmedian","text":"Syntax: statistics.median(list) Calculates the median of a list of numbers.","title":"statistics.median"},{"location":"1.0/stdlib/modules/statistics/#statisticsquantiles","text":"Syntax: statistics.quantiles(list, n=4, method='exclusive') Cuts a list of numbers in n parts and returns a list of the values where the list was cut, using exclusive or inclusive method. n and method are optional. Disclamer from the Python source code","title":"statistics.quantiles"},{"location":"1.0/stdlib/modules/statistics/#notes-on-methods-for-computing-quantiles","text":"There is no one perfect way to compute quantiles. Here we offer two methods that serve common needs. Most other packages surveyed offered at least one or both of these two, making them \"standard\" in the sense of \"widely-adopted and reproducible\". They are also easy to explain, easy to compute manually, and have straight-forward interpretations that aren't surprising. The default method is known as \"R6\", \"PERCENTILE.EXC\", or \"expected value of rank order statistics\". The alternative method is known as \"R7\", \"PERCENTILE.INC\", or \"mode of rank order statistics\". For sample data where there is a positive probability for values beyond the range of the data, the R6 exclusive method is a reasonable choice. Consider a random sample of nine values from a population with a uniform distribution from 0.0 to 1.0. The distribution of the third ranked sample point is described by betavariate(alpha=3, beta=7) which has mode=0.250, median=0.286, and mean=0.300. Only the latter (which corresponds with R6) gives the desired cut point with 30% of the population falling below that value, making it comparable to a result from an inv_cdf() function. The R6 exclusive method is also idempotent. For describing population data where the end points are known to be included in the data, the R7 inclusive method is a reasonable choice. Instead of the mean, it uses the mode of the beta distribution for the interior points. Per Hyndman & Fan, \"One nice property is that the vertices of Q7(p) divide the range into n - 1 intervals, and exactly 100p% of the intervals lie to the left of Q7(p) and 100(1 - p)% of the intervals lie to the right of Q7(p).\" If needed, other methods could be added. However, for now, the position is that fewer options make for easier choices and that external packages can be used for anything more advanced.","title":"Notes on methods for computing quantiles"},{"location":"1.0/stdlib/modules/statistics/#statisticsscopelist","text":"Syntax: statistics.scope(list) Calculates the scope of a list of numbers: max(list) - min(list) .","title":"statistics.scope(list)"},{"location":"1.0/stdlib/modules/statistics/#statisticsmodelist","text":"Syntax: statistics.mode(list) Calculates the mode of a list of numbers, i.e. the most common value.","title":"statistics.mode(list)"},{"location":"1.0/stdlib/modules/statistics/#statisticsmultimodevalue","text":"Syntax: statistics.multimode(value) Calculates the modes of a list or a str, i.e. the most common values. It returns a list.","title":"statistics.multimode(value)"},{"location":"1.0/stdlib/modules/time/","text":"Time Source code The time module can be imported with the statement import time . The time module is used to sleep for seconds or milliseconds, and to know current time, timezone and system\u2019s epoch. Constants time.timezone : the timezone (number of seconds to add to GMT) Functions time.sleep Syntax: time.sleep(seconds) Pauses the program for seconds ( int or float ) and do nothing. Returns None . time.sleep_milliseconds Syntax: time.sleep_milliseconds(milliseconds) Pauses the program for milliseconds ( integer ) and do nothing. Returns None . time.time Syntax: time.time() Returns the float value of the time in seconds since the Epoch (system-dependent, check your epoch with time.epoch() ). time.epoch Syntax: time.epoch() Returns the str value of the Epoch of your system.","title":"Time"},{"location":"1.0/stdlib/modules/time/#time","text":"Source code The time module can be imported with the statement import time . The time module is used to sleep for seconds or milliseconds, and to know current time, timezone and system\u2019s epoch.","title":"Time"},{"location":"1.0/stdlib/modules/time/#constants","text":"time.timezone : the timezone (number of seconds to add to GMT)","title":"Constants"},{"location":"1.0/stdlib/modules/time/#functions","text":"","title":"Functions"},{"location":"1.0/stdlib/modules/time/#timesleep","text":"Syntax: time.sleep(seconds) Pauses the program for seconds ( int or float ) and do nothing. Returns None .","title":"time.sleep"},{"location":"1.0/stdlib/modules/time/#timesleep_milliseconds","text":"Syntax: time.sleep_milliseconds(milliseconds) Pauses the program for milliseconds ( integer ) and do nothing. Returns None .","title":"time.sleep_milliseconds"},{"location":"1.0/stdlib/modules/time/#timetime","text":"Syntax: time.time() Returns the float value of the time in seconds since the Epoch (system-dependent, check your epoch with time.epoch() ).","title":"time.time"},{"location":"1.0/stdlib/modules/time/#timeepoch","text":"Syntax: time.epoch() Returns the str value of the Epoch of your system.","title":"time.epoch"},{"location":"1.0/stdlib/modules/unicodedata/","text":"Unicodedata Source code Credits This is massively copied from python documentation of unicodedata , under the Python Software Foundation License Version 2 . \u00a9 Copyright 2001-2023, Python Software Foundation. This text has not been edited. The unicodedata module can be imported with the statement import unicodedata . The unicodedata provides access to the Unicode database. Constants unicodedata.unicodedata_version : the version of the Unicode database used in this module. Depends on Python version! Functions unicodedata.lookup Syntax: unicodedata.lookup(name) Look up character by name. If a character with the given name is found, return the corresponding character. If not found, NotDefinedError is raised. unicodedata.name Syntax: unicodedata.name(chr, <default>) Returns the name assigned to the character chr as a string. If no name is defined, default is returned, or, if not given, RunTimeError is raised. unicodedata.category Syntax: unicodedata.category(chr) Returns the general category assigned to the character chr as string. unicodedata.bidirectional Syntax: unicodedata.bidirectional(chr) Returns the bidirectional class assigned to the character chr as string. If no such value is defined, an empty string is returned. unicodedata.combining Syntax: unicodedata.combining(chr) Returns the canonical combining class assigned to the character chr as integer. Returns 0 if no combining class is defined. unicodedata.east_asian_width Syntax: unicodedata.east_asian_width(chr) Returns the east asian width assigned to the character chr as string. unicodedata.mirrored Syntax: unicodedata.mirrored(chr) Returns the mirrored property assigned to the character chr as integer. Returns 1 if the character has been identified as a \u201cmirrored\u201d character in bidirectional text, 0 otherwise. unicodedata.decomposition Syntax: unicodedata.decomposition(chr) Returns the character decomposition mapping assigned to the character chr as string. An empty string is returned in case no such mapping is defined. unicodedata.normalize Syntax: unicodedata.normalize(form, unistr) Returns the normal form form for the Unicode string unistr . Valid values for form are \u2018NFC\u2019, \u2018NFKC\u2019, \u2018NFD\u2019, and \u2018NFKD\u2019. The Unicode standard defines various normalization forms of a Unicode string, based on the definition of canonical equivalence and compatibility equivalence. In Unicode, several characters can be expressed in various way. For example, the character U+00C7 (LATIN CAPITAL LETTER C WITH CEDILLA) can also be expressed as the sequence U+0043 (LATIN CAPITAL LETTER C) U+0327 (COMBINING CEDILLA). For each character, there are two normal forms: normal form C and normal form D. Normal form D (NFD) is also known as canonical decomposition, and translates each character into its decomposed form. Normal form C (NFC) first applies a canonical decomposition, then composes pre-combined characters again. In addition to these two forms, there are two additional normal forms based on compatibility equivalence. In Unicode, certain characters are supported which normally would be unified with other characters. For example, U+2160 (ROMAN NUMERAL ONE) is really the same thing as U+0049 (LATIN CAPITAL LETTER I). However, it is supported in Unicode for compatibility with existing character sets (e.g. gb2312). The normal form KD (NFKD) will apply the compatibility decomposition, i.e. replace all compatibility characters with their equivalents. The normal form KC (NFKC) first applies the compatibility decomposition, followed by the canonical composition. Even if two unicode strings are normalized and look the same to a human reader, if one has combining characters and the other doesn\u2019t, they may not compare equal. unicodedata.is_normalized Syntax: unicodedata.is_normalized(form, unistr) Return whether the Unicode string unistr is in the normal form form . Valid values for form are \u2018NFC\u2019, \u2018NFKC\u2019, \u2018NFD\u2019, and \u2018NFKD\u2019.","title":"Unicodedata"},{"location":"1.0/stdlib/modules/unicodedata/#unicodedata","text":"Source code Credits This is massively copied from python documentation of unicodedata , under the Python Software Foundation License Version 2 . \u00a9 Copyright 2001-2023, Python Software Foundation. This text has not been edited. The unicodedata module can be imported with the statement import unicodedata . The unicodedata provides access to the Unicode database.","title":"Unicodedata"},{"location":"1.0/stdlib/modules/unicodedata/#constants","text":"unicodedata.unicodedata_version : the version of the Unicode database used in this module. Depends on Python version!","title":"Constants"},{"location":"1.0/stdlib/modules/unicodedata/#functions","text":"","title":"Functions"},{"location":"1.0/stdlib/modules/unicodedata/#unicodedatalookup","text":"Syntax: unicodedata.lookup(name) Look up character by name. If a character with the given name is found, return the corresponding character. If not found, NotDefinedError is raised.","title":"unicodedata.lookup"},{"location":"1.0/stdlib/modules/unicodedata/#unicodedataname","text":"Syntax: unicodedata.name(chr, <default>) Returns the name assigned to the character chr as a string. If no name is defined, default is returned, or, if not given, RunTimeError is raised.","title":"unicodedata.name"},{"location":"1.0/stdlib/modules/unicodedata/#unicodedatacategory","text":"Syntax: unicodedata.category(chr) Returns the general category assigned to the character chr as string.","title":"unicodedata.category"},{"location":"1.0/stdlib/modules/unicodedata/#unicodedatabidirectional","text":"Syntax: unicodedata.bidirectional(chr) Returns the bidirectional class assigned to the character chr as string. If no such value is defined, an empty string is returned.","title":"unicodedata.bidirectional"},{"location":"1.0/stdlib/modules/unicodedata/#unicodedatacombining","text":"Syntax: unicodedata.combining(chr) Returns the canonical combining class assigned to the character chr as integer. Returns 0 if no combining class is defined.","title":"unicodedata.combining"},{"location":"1.0/stdlib/modules/unicodedata/#unicodedataeast_asian_width","text":"Syntax: unicodedata.east_asian_width(chr) Returns the east asian width assigned to the character chr as string.","title":"unicodedata.east_asian_width"},{"location":"1.0/stdlib/modules/unicodedata/#unicodedatamirrored","text":"Syntax: unicodedata.mirrored(chr) Returns the mirrored property assigned to the character chr as integer. Returns 1 if the character has been identified as a \u201cmirrored\u201d character in bidirectional text, 0 otherwise.","title":"unicodedata.mirrored"},{"location":"1.0/stdlib/modules/unicodedata/#unicodedatadecomposition","text":"Syntax: unicodedata.decomposition(chr) Returns the character decomposition mapping assigned to the character chr as string. An empty string is returned in case no such mapping is defined.","title":"unicodedata.decomposition"},{"location":"1.0/stdlib/modules/unicodedata/#unicodedatanormalize","text":"Syntax: unicodedata.normalize(form, unistr) Returns the normal form form for the Unicode string unistr . Valid values for form are \u2018NFC\u2019, \u2018NFKC\u2019, \u2018NFD\u2019, and \u2018NFKD\u2019. The Unicode standard defines various normalization forms of a Unicode string, based on the definition of canonical equivalence and compatibility equivalence. In Unicode, several characters can be expressed in various way. For example, the character U+00C7 (LATIN CAPITAL LETTER C WITH CEDILLA) can also be expressed as the sequence U+0043 (LATIN CAPITAL LETTER C) U+0327 (COMBINING CEDILLA). For each character, there are two normal forms: normal form C and normal form D. Normal form D (NFD) is also known as canonical decomposition, and translates each character into its decomposed form. Normal form C (NFC) first applies a canonical decomposition, then composes pre-combined characters again. In addition to these two forms, there are two additional normal forms based on compatibility equivalence. In Unicode, certain characters are supported which normally would be unified with other characters. For example, U+2160 (ROMAN NUMERAL ONE) is really the same thing as U+0049 (LATIN CAPITAL LETTER I). However, it is supported in Unicode for compatibility with existing character sets (e.g. gb2312). The normal form KD (NFKD) will apply the compatibility decomposition, i.e. replace all compatibility characters with their equivalents. The normal form KC (NFKC) first applies the compatibility decomposition, followed by the canonical composition. Even if two unicode strings are normalized and look the same to a human reader, if one has combining characters and the other doesn\u2019t, they may not compare equal.","title":"unicodedata.normalize"},{"location":"1.0/stdlib/modules/unicodedata/#unicodedatais_normalized","text":"Syntax: unicodedata.is_normalized(form, unistr) Return whether the Unicode string unistr is in the normal form form . Valid values for form are \u2018NFC\u2019, \u2018NFKC\u2019, \u2018NFD\u2019, and \u2018NFKD\u2019.","title":"unicodedata.is_normalized"},{"location":"1.0/stdlib/modules/webbrowser/","text":"Webbrowser Source code Added in 0.19.0-beta The webbrowser module can be imported with the statement import webbrowser . Convenient web-browser controller. The webbrowser module allows you to open pages in the browser. Functions webbrowser.open Syntax: webbrowser.open(url, <new=0>, <autoraise=True>) Displays url using the default browser. If new is 0, the url is opened in the same browser window if possible. If new is 1, a new browser window is opened if possible. If new is 2, a new tab is opened if possible. If autoraise is True, the window is raised if possible (note that under many window managers this will occur regardless of the setting of this variable).","title":"Webbrowser"},{"location":"1.0/stdlib/modules/webbrowser/#webbrowser","text":"Source code Added in 0.19.0-beta The webbrowser module can be imported with the statement import webbrowser . Convenient web-browser controller. The webbrowser module allows you to open pages in the browser.","title":"Webbrowser"},{"location":"1.0/stdlib/modules/webbrowser/#functions","text":"","title":"Functions"},{"location":"1.0/stdlib/modules/webbrowser/#webbrowseropen","text":"Syntax: webbrowser.open(url, <new=0>, <autoraise=True>) Displays url using the default browser. If new is 0, the url is opened in the same browser window if possible. If new is 1, a new browser window is opened if possible. If new is 2, a new tab is opened if possible. If autoraise is True, the window is raised if possible (note that under many window managers this will occur regardless of the setting of this variable).","title":"webbrowser.open"},{"location":"1.1/","text":"Nougaro 1.1 documentation This is the official documentation for Nougaro version 1.1.0. Hello, world! Language reference: syntax, statements, \u2026 Basic syntax Number literals String literals Identifiers and keywords Operators Values Variables Tests ( if statement, assert ) Loops Functions Attributes Classes Read and write in files Import and export Metas Dollar-print Standard library reference: builtins, modules, \u2026 Built-in variables Built-in functions Modules Expanding Nougaro (for Python developers) Write libraries for Nougaro Internals","title":"Nougaro 1.1 documentation"},{"location":"1.1/#nougaro-11-documentation","text":"This is the official documentation for Nougaro version 1.1.0. Hello, world! Language reference: syntax, statements, \u2026 Basic syntax Number literals String literals Identifiers and keywords Operators Values Variables Tests ( if statement, assert ) Loops Functions Attributes Classes Read and write in files Import and export Metas Dollar-print Standard library reference: builtins, modules, \u2026 Built-in variables Built-in functions Modules Expanding Nougaro (for Python developers) Write libraries for Nougaro Internals","title":"Nougaro 1.1 documentation"},{"location":"1.1/hello_world/","text":"Hello, world! This is the \u201cHello, world!\u201d program in Nougaro. print(\"Hello, world!\") Alternatively: import hello If you want to use functionnal programming: def main() print(\"Hello, world!\") end main() If you want to use object-oriented programming: class Main def print_hello_world() print(\"Hello, world!\") end end Main().print_hello_world()","title":"Hello, world!"},{"location":"1.1/hello_world/#hello-world","text":"This is the \u201cHello, world!\u201d program in Nougaro. print(\"Hello, world!\") Alternatively: import hello If you want to use functionnal programming: def main() print(\"Hello, world!\") end main() If you want to use object-oriented programming: class Main def print_hello_world() print(\"Hello, world!\") end end Main().print_hello_world()","title":"Hello, world!"},{"location":"1.1/internals/","text":"Internals Features that had to be documented but that are mainly used for debugging purposes. Context variables __actual_context__ is the name of the function where the code is executed. May be <program> . __exec_from__ is the name of the parent of the function where the code is executed. If __actual_context__ is <program> , __exec_from__ is (shell) . If the code is inside a function foo that is directly in <program> , __exec_from__ is foo from <program> . If the code is inside a function bar executed from our foo (that is in <program> ), __exec_from__ is bar from foo . Base value __base_value__ is the base value (python class Value ). It is the parent class of all the other values. It is the only value to crash on == and != operators . Nougaro informations Note This section is duplicated in this file __noug_version__ : string of the Nougaro version (e.g. \"0.15.0-beta\".) You can use the noug_version lib to have better informations. __data_version__ : the Nougaro data version, an internal version keeping track of changes in the config file directory structure __version_id__ : an ID increased at least once per version __python_version__ : string of the Python version (e.g. \"3.10.5\") __noug_dir__ : string of the absolute path of the directory where shell.(py/exe/bin) is located. May be used with file I/O read and write statements. Symbol table __symbol_table__ : string of the internal \u201cp-formated\u201d symbols dictionnary.","title":"Internals"},{"location":"1.1/internals/#internals","text":"Features that had to be documented but that are mainly used for debugging purposes.","title":"Internals"},{"location":"1.1/internals/#context-variables","text":"__actual_context__ is the name of the function where the code is executed. May be <program> . __exec_from__ is the name of the parent of the function where the code is executed. If __actual_context__ is <program> , __exec_from__ is (shell) . If the code is inside a function foo that is directly in <program> , __exec_from__ is foo from <program> . If the code is inside a function bar executed from our foo (that is in <program> ), __exec_from__ is bar from foo .","title":"Context variables"},{"location":"1.1/internals/#base-value","text":"__base_value__ is the base value (python class Value ). It is the parent class of all the other values. It is the only value to crash on == and != operators .","title":"Base value"},{"location":"1.1/internals/#nougaro-informations","text":"Note This section is duplicated in this file __noug_version__ : string of the Nougaro version (e.g. \"0.15.0-beta\".) You can use the noug_version lib to have better informations. __data_version__ : the Nougaro data version, an internal version keeping track of changes in the config file directory structure __version_id__ : an ID increased at least once per version __python_version__ : string of the Python version (e.g. \"3.10.5\") __noug_dir__ : string of the absolute path of the directory where shell.(py/exe/bin) is located. May be used with file I/O read and write statements.","title":"Nougaro informations"},{"location":"1.1/internals/#symbol-table","text":"__symbol_table__ : string of the internal \u201cp-formated\u201d symbols dictionnary.","title":"Symbol table"},{"location":"1.1/Expanding/Write-libs/","text":"You are a Nougaro developer, and you want to write an amazing library to implement python amazing things in Nougaro? You're at the right place!! You have to options: either writting it in Nougaro (with limited resources), either writting it in Python (with unlimited resources). Write libs in Nougaro Requirements You need to know how to code in Nougaro. Start coding The file should be named nameofthelib.noug and be located in the lib_ folder in the Nougaro repository. Simply write all your code. If you want something to be accessible when imported, use one of those syntaxes : export identifier (as identifier) export (any expression) as identifier You can find examples of built-in modules written in Nougaro in the lib_ folder. Write libs in Python Warning Everything changed in 0.16.0-beta and in 0.19.0-beta Requirements You need to know how to code in Python. Don't worry, that's easy ;) Start coding The file should be named nameofthelib_.py (the \u201c_\u201d is VERY important!!) The file will be placed in the lib_ folder in the Nougaro repository. Paste this generic code in your file: # -*- coding:utf-8 -*- \"\"\" YourModuleName module YourModuleName is a module that do [...] and [...] and also [...]. \"\"\" # IMPORTS # nougaro modules imports from lib_.lib_to_make_libs import * # useful stuff to make libs. # built-in python imports # here put the useful python imports your module will need ;) __LIB_VERSION__ = 4 Note Lib versions depending on Nougaro versions: prior to 0.20.0: 1 0.20.0: 2 0.21.0: 3 0.22.0-0.23.0: 4 Lib with constants If your lib contains constants, you can add them to the code, outside any class. Use py2noug function imported from lib_to_make_libs to convert Python values to Nougaro values. Python types that can be converted into Nougaro values are: str , int , float , bool (which is converted to 0 or 1), list , tuple (converted into list), dict (converted into a list of lists, each sub-list is [key, value] ), None . Other types will return generic value Value , which you can't make anything with... Example: AMAZING_CONSTANT = py2noug(3, *default_pos()) # will be Number(3), type 'int' ANOTHER_AMAZING_CONSTANT = py2noug(\"Hello world :)\", *default_pos()) # will be String(\"Hello world :)\"), type 'str' ( py2noug and default_pos are imported from lib_to_make_libs ) Lib with functions If you want functions in your lib, paste this code in your file (replace the generic names/texts with appropriate things): class YourModuleName(ModuleFunction): \"\"\" YourModuleName Module \"\"\" functions: dict[str, builtin_function_dict] = {} def __init__(self, function_name: str): super().__init__(\"your_module_name\", function_name, \"https://link_to_report_bugs.com (not required)\", functions=self.functions) def copy(self): \"\"\"Return a copy of self\"\"\" copy = YourModuleName(self.name) return self.set_context_and_pos_to_a_copy(copy) def is_eq(self, other: Value): return isinstance(other, YourModuleName) and self.name == other.name Changed in 0.20.0-beta Prior to 0.20.0, the method is_eq was named get_comparison_eq and had this syntax: def get_comparison_eq(self, other: Value): if isinstance(other, YourModuleName): return Number(self.name == other.name, self.pos_start, other.pos_end).set_context(self.context), None return Number(False, self.pos_start, other.pos_end).set_context(self.context), None Then, to add a function, add a method in this class following this syntax: def execute_function_name(self, context: Context): \"\"\" Docstring (optional) \"\"\" assert context.symbol_table is not None ... functions[\"function_name\"] = { \"function\": execute_function_name, \"param_names\": [\"parameter_1\", \"parameter_2\"], \"optional_params\": [\"optional_parameter_1\"], \"should_respect_args_number\": True, # The two following values are used internally. # They are not documented, don\u2019t set them to True except if you know what you\u2019re doing. \"run_noug_dir\": False, \"noug_dir\": False } Changed in 0.22.0-beta Prior to 0.22.0-beta, the key \"run_noug_dir\" was called \"run_noug_dir_work_dir\" . keys param_names and optional_params should be of type list[str] . should_respect_args_number is a bool. It is True when the number of given arguments should match with the number of parameters, and False if not. You can then add code in your function. Get arguments To get the arguments given by the user in your functions, use context.symbol_table.getf(\"identifier\") Replace the identifier by the one you given to the parameter. If your parameter is optional and that the user didn\u2019t specified it, the default value is a Python None (not a Nougaro NoneValue ). Danger Please don\u2019t use .get symbol table method, it does NOT work in modules (even if it looks like) and should NOT be used. (The short explanation why is that this method looks for the name also in parent symbol table, so if an optional param is not given but the user defined a variable with that name, it will be taken as the value for that param, which is not what we want. We don\u2019t care about parent symbol table, so we just look in the current symbol table which only contains the parameters. The corresponding issue is #10 .) Values Important You often have to switch between Nougaro and Python values! To convert python to Nougaro values, use py2noug function. To convert Nougaro to python values, use noug2py . Both functions are imported from lib_to_make_libs . You reed a position with py2noug : you can simply put self.pos_start and self.pos_end or the position of any value you want. What to return? Values and errors. If you don't need to return anything, simply use return RTResult().success(NoneValue(*default_pos(), False)) . Return errors Oops! It crashed! How to say it to the user under a good shape? Simply use this syntax: return RTResult().failure(NameOfTheError( self.pos_start, self.pos_end, \"error message.\", context )) If the user gave you a value with an incorrect type, use: return RTResult().failure(RTTypeErrorF( bad_argument.pos_start, bad_argument.pos_end, \"first/second/third\u2026\", \"name of the module.name of the function\", \"type that should be found\", bad_argument, context )) Replace \"first/second/third\u2026\" by the actual index of the argument. If it is the first argument, put \"first\" , et c\u00e6tera. The error will print, for instance, second argument of builtin function 'name of the function' should be 'type that should be found', not 'type of (bad_argument)'. You can replace self by any Nougaro value, such as your arguments. For example, in the lib math : if value.value < 0: # we check if the value is greater than (or equal to) 0 return RTResult().failure(RTArithmeticError( value.pos_start, value.pos_end, \"first argument of the built-in function 'math.sqrt' must be greater than (or equal to) 0.\", exec_context, \"lib_.math_.Math.execute_math_sqrt\" )) All the errors available in a Module: RunTimeError : basic run-time error RTIndexError : IndexError RTArithmeticError : ArithmeticError RTNotDefinedError : NotDefinedError RTTypeErrorF : TypeError (you give a Number but you need a String) RTFileNotFoundError : FileNotFoundError RTAssertionError : AssertionError (not useful in libs...) RTAttributeError : AttributeError RTOverflowError : OverflowError RTRecursionError : RecursionError (new in 0.20.0) PythonError : PythonError: an error due to Python. Don\u2019t put a str error message: pass directly the Python Exception. Return values To return a Nougaro value, use return RTResult().success(value) To return a Python value, use return RTResult().success(py2noug(value, self.pos_start, self.pos_end)) WHAT_TO_IMPORT : DO NOT forget that one!! When you have finished coding your amazing lib, create the WHAT_TO_IMPORT dict. It tells to the Nougaro Interpreter what should be imported and with which name. Follow this syntax: WHAT_TO_IMPORT = { \"name_of_a_constant\": IDENTIFIER, \"name_of_a_function\": YourModuleName('function_name'), } The function name is what you specified as the key of the functions dictionary. Custom errors To use a custom error in your code, simply copy-paste this code: class YourErrorName(RunTimeError): \"\"\"YourErrorName is an error that can be triggered ONLY via functions in this module.\"\"\" def __init__(self, pos_start: Position, pos_end: Position, details: str, context: Context, origin_file: str = \"lib_.(nameofthelib)_\"): super().__init__(pos_start, pos_end, details, context, rt_error=False, error_name=\"YourErrorName\", origin_file=origin_file) Then, call it like any other errors (like this ) Note: origin_file is used for debugging. To trigger it, you can run: nougaro> import debug;debug.enable() DEBUG mode is now ENABLED. [<module debug>, None] nougaro> (anything that throws an error) Example: nougaro> import debug;debug.enable() DEBUG mode is now ENABLED. [<module debug>, None] nougaro> thisisnotdefined [identifier:\"thisisnotdefined\", end of file] list:[(var_access:[identifier:\"thisisnotdefined\"], False)] (from src.runtime.interpreter.Interpreter.visit_VarAccessNode (is NOT lib and close match in symbol table)) Traceback (most recent call last): In file <stdin>, line 1, in <program>: thisisnotdefined ^^^^^^^^^^^^^^^^ NotDefinedError: name 'thisisnotdefined' is not defined. Did you mean 'is_none'? nougaro> this is a syntax error [identifier:\"this\", identifier:\"is\", identifier:\"a\", identifier:\"syntax\", identifier:\"error\", end of file] (from src.parser.parser.Parser.statements) In file <stdin>, line 1: this is a syntax error ^^ InvalidSyntaxError: unexpected token: identifier:\"is\". nougaro> Here, origin_file is src.runtime.interpreter.Interpreter.visit_VarAccessNode and src.parser.parser.Parser.parse . Example: RTStatisticsError in built-in lib statistics class RTStatisticsError(RunTimeError): \"\"\"StatisticsError is an error that can be triggered ONLY via functions in this module.\"\"\" def __init__(self, pos_start: Position, pos_end: Position, details: str, context: Context, origin_file: str = \"lib_.statistics_\"): super().__init__(pos_start, pos_end, details, context, rt_error=False, error_name=\"StatisticsError\", origin_file=origin_file) Examples You can read builtin files stored in lib_ folder to make you a good idea of what a nice-coded lib is ;) Here you go! If you think that your lib is absolutely awesome, you can open a PR to submit your idea. The best ideas will be implemented into vanilla Nougaro! If you think that this document is incomplete, that it didn\u2019t help you, or just to find some help, open an issue .","title":"Write libs"},{"location":"1.1/Expanding/Write-libs/#write-libs-in-nougaro","text":"","title":"Write libs in Nougaro"},{"location":"1.1/Expanding/Write-libs/#requirements","text":"You need to know how to code in Nougaro.","title":"Requirements"},{"location":"1.1/Expanding/Write-libs/#start-coding","text":"The file should be named nameofthelib.noug and be located in the lib_ folder in the Nougaro repository. Simply write all your code. If you want something to be accessible when imported, use one of those syntaxes : export identifier (as identifier) export (any expression) as identifier You can find examples of built-in modules written in Nougaro in the lib_ folder.","title":"Start coding"},{"location":"1.1/Expanding/Write-libs/#write-libs-in-python","text":"Warning Everything changed in 0.16.0-beta and in 0.19.0-beta","title":"Write libs in Python"},{"location":"1.1/Expanding/Write-libs/#requirements_1","text":"You need to know how to code in Python. Don't worry, that's easy ;)","title":"Requirements"},{"location":"1.1/Expanding/Write-libs/#start-coding_1","text":"The file should be named nameofthelib_.py (the \u201c_\u201d is VERY important!!) The file will be placed in the lib_ folder in the Nougaro repository. Paste this generic code in your file: # -*- coding:utf-8 -*- \"\"\" YourModuleName module YourModuleName is a module that do [...] and [...] and also [...]. \"\"\" # IMPORTS # nougaro modules imports from lib_.lib_to_make_libs import * # useful stuff to make libs. # built-in python imports # here put the useful python imports your module will need ;) __LIB_VERSION__ = 4 Note Lib versions depending on Nougaro versions: prior to 0.20.0: 1 0.20.0: 2 0.21.0: 3 0.22.0-0.23.0: 4","title":"Start coding"},{"location":"1.1/Expanding/Write-libs/#lib-with-constants","text":"If your lib contains constants, you can add them to the code, outside any class. Use py2noug function imported from lib_to_make_libs to convert Python values to Nougaro values. Python types that can be converted into Nougaro values are: str , int , float , bool (which is converted to 0 or 1), list , tuple (converted into list), dict (converted into a list of lists, each sub-list is [key, value] ), None . Other types will return generic value Value , which you can't make anything with... Example: AMAZING_CONSTANT = py2noug(3, *default_pos()) # will be Number(3), type 'int' ANOTHER_AMAZING_CONSTANT = py2noug(\"Hello world :)\", *default_pos()) # will be String(\"Hello world :)\"), type 'str' ( py2noug and default_pos are imported from lib_to_make_libs )","title":"Lib with constants"},{"location":"1.1/Expanding/Write-libs/#lib-with-functions","text":"If you want functions in your lib, paste this code in your file (replace the generic names/texts with appropriate things): class YourModuleName(ModuleFunction): \"\"\" YourModuleName Module \"\"\" functions: dict[str, builtin_function_dict] = {} def __init__(self, function_name: str): super().__init__(\"your_module_name\", function_name, \"https://link_to_report_bugs.com (not required)\", functions=self.functions) def copy(self): \"\"\"Return a copy of self\"\"\" copy = YourModuleName(self.name) return self.set_context_and_pos_to_a_copy(copy) def is_eq(self, other: Value): return isinstance(other, YourModuleName) and self.name == other.name Changed in 0.20.0-beta Prior to 0.20.0, the method is_eq was named get_comparison_eq and had this syntax: def get_comparison_eq(self, other: Value): if isinstance(other, YourModuleName): return Number(self.name == other.name, self.pos_start, other.pos_end).set_context(self.context), None return Number(False, self.pos_start, other.pos_end).set_context(self.context), None Then, to add a function, add a method in this class following this syntax: def execute_function_name(self, context: Context): \"\"\" Docstring (optional) \"\"\" assert context.symbol_table is not None ... functions[\"function_name\"] = { \"function\": execute_function_name, \"param_names\": [\"parameter_1\", \"parameter_2\"], \"optional_params\": [\"optional_parameter_1\"], \"should_respect_args_number\": True, # The two following values are used internally. # They are not documented, don\u2019t set them to True except if you know what you\u2019re doing. \"run_noug_dir\": False, \"noug_dir\": False } Changed in 0.22.0-beta Prior to 0.22.0-beta, the key \"run_noug_dir\" was called \"run_noug_dir_work_dir\" . keys param_names and optional_params should be of type list[str] . should_respect_args_number is a bool. It is True when the number of given arguments should match with the number of parameters, and False if not. You can then add code in your function.","title":"Lib with functions"},{"location":"1.1/Expanding/Write-libs/#get-arguments","text":"To get the arguments given by the user in your functions, use context.symbol_table.getf(\"identifier\") Replace the identifier by the one you given to the parameter. If your parameter is optional and that the user didn\u2019t specified it, the default value is a Python None (not a Nougaro NoneValue ). Danger Please don\u2019t use .get symbol table method, it does NOT work in modules (even if it looks like) and should NOT be used. (The short explanation why is that this method looks for the name also in parent symbol table, so if an optional param is not given but the user defined a variable with that name, it will be taken as the value for that param, which is not what we want. We don\u2019t care about parent symbol table, so we just look in the current symbol table which only contains the parameters. The corresponding issue is #10 .)","title":"Get arguments"},{"location":"1.1/Expanding/Write-libs/#values","text":"Important You often have to switch between Nougaro and Python values! To convert python to Nougaro values, use py2noug function. To convert Nougaro to python values, use noug2py . Both functions are imported from lib_to_make_libs . You reed a position with py2noug : you can simply put self.pos_start and self.pos_end or the position of any value you want.","title":"Values"},{"location":"1.1/Expanding/Write-libs/#what-to-return-values-and-errors","text":"If you don't need to return anything, simply use return RTResult().success(NoneValue(*default_pos(), False)) .","title":"What to return? Values and errors."},{"location":"1.1/Expanding/Write-libs/#return-errors","text":"Oops! It crashed! How to say it to the user under a good shape? Simply use this syntax: return RTResult().failure(NameOfTheError( self.pos_start, self.pos_end, \"error message.\", context )) If the user gave you a value with an incorrect type, use: return RTResult().failure(RTTypeErrorF( bad_argument.pos_start, bad_argument.pos_end, \"first/second/third\u2026\", \"name of the module.name of the function\", \"type that should be found\", bad_argument, context )) Replace \"first/second/third\u2026\" by the actual index of the argument. If it is the first argument, put \"first\" , et c\u00e6tera. The error will print, for instance, second argument of builtin function 'name of the function' should be 'type that should be found', not 'type of (bad_argument)'. You can replace self by any Nougaro value, such as your arguments. For example, in the lib math : if value.value < 0: # we check if the value is greater than (or equal to) 0 return RTResult().failure(RTArithmeticError( value.pos_start, value.pos_end, \"first argument of the built-in function 'math.sqrt' must be greater than (or equal to) 0.\", exec_context, \"lib_.math_.Math.execute_math_sqrt\" )) All the errors available in a Module: RunTimeError : basic run-time error RTIndexError : IndexError RTArithmeticError : ArithmeticError RTNotDefinedError : NotDefinedError RTTypeErrorF : TypeError (you give a Number but you need a String) RTFileNotFoundError : FileNotFoundError RTAssertionError : AssertionError (not useful in libs...) RTAttributeError : AttributeError RTOverflowError : OverflowError RTRecursionError : RecursionError (new in 0.20.0) PythonError : PythonError: an error due to Python. Don\u2019t put a str error message: pass directly the Python Exception.","title":"Return errors"},{"location":"1.1/Expanding/Write-libs/#return-values","text":"To return a Nougaro value, use return RTResult().success(value) To return a Python value, use return RTResult().success(py2noug(value, self.pos_start, self.pos_end))","title":"Return values"},{"location":"1.1/Expanding/Write-libs/#what_to_import-do-not-forget-that-one","text":"When you have finished coding your amazing lib, create the WHAT_TO_IMPORT dict. It tells to the Nougaro Interpreter what should be imported and with which name. Follow this syntax: WHAT_TO_IMPORT = { \"name_of_a_constant\": IDENTIFIER, \"name_of_a_function\": YourModuleName('function_name'), } The function name is what you specified as the key of the functions dictionary.","title":"WHAT_TO_IMPORT : DO NOT forget that one!!"},{"location":"1.1/Expanding/Write-libs/#custom-errors","text":"To use a custom error in your code, simply copy-paste this code: class YourErrorName(RunTimeError): \"\"\"YourErrorName is an error that can be triggered ONLY via functions in this module.\"\"\" def __init__(self, pos_start: Position, pos_end: Position, details: str, context: Context, origin_file: str = \"lib_.(nameofthelib)_\"): super().__init__(pos_start, pos_end, details, context, rt_error=False, error_name=\"YourErrorName\", origin_file=origin_file) Then, call it like any other errors (like this ) Note: origin_file is used for debugging. To trigger it, you can run: nougaro> import debug;debug.enable() DEBUG mode is now ENABLED. [<module debug>, None] nougaro> (anything that throws an error) Example: nougaro> import debug;debug.enable() DEBUG mode is now ENABLED. [<module debug>, None] nougaro> thisisnotdefined [identifier:\"thisisnotdefined\", end of file] list:[(var_access:[identifier:\"thisisnotdefined\"], False)] (from src.runtime.interpreter.Interpreter.visit_VarAccessNode (is NOT lib and close match in symbol table)) Traceback (most recent call last): In file <stdin>, line 1, in <program>: thisisnotdefined ^^^^^^^^^^^^^^^^ NotDefinedError: name 'thisisnotdefined' is not defined. Did you mean 'is_none'? nougaro> this is a syntax error [identifier:\"this\", identifier:\"is\", identifier:\"a\", identifier:\"syntax\", identifier:\"error\", end of file] (from src.parser.parser.Parser.statements) In file <stdin>, line 1: this is a syntax error ^^ InvalidSyntaxError: unexpected token: identifier:\"is\". nougaro> Here, origin_file is src.runtime.interpreter.Interpreter.visit_VarAccessNode and src.parser.parser.Parser.parse .","title":"Custom errors"},{"location":"1.1/Expanding/Write-libs/#example-rtstatisticserror-in-built-in-lib-statistics","text":"class RTStatisticsError(RunTimeError): \"\"\"StatisticsError is an error that can be triggered ONLY via functions in this module.\"\"\" def __init__(self, pos_start: Position, pos_end: Position, details: str, context: Context, origin_file: str = \"lib_.statistics_\"): super().__init__(pos_start, pos_end, details, context, rt_error=False, error_name=\"StatisticsError\", origin_file=origin_file)","title":"Example: RTStatisticsError in built-in lib statistics"},{"location":"1.1/Expanding/Write-libs/#examples","text":"You can read builtin files stored in lib_ folder to make you a good idea of what a nice-coded lib is ;)","title":"Examples"},{"location":"1.1/Expanding/Write-libs/#here-you-go","text":"If you think that your lib is absolutely awesome, you can open a PR to submit your idea. The best ideas will be implemented into vanilla Nougaro! If you think that this document is incomplete, that it didn\u2019t help you, or just to find some help, open an issue .","title":"Here you go!"},{"location":"1.1/Language/01syntax/","text":"Very basic syntax This document covers the basic syntax of Nougaro. Comments There are two types of comments in Nougaro: single-line comments and multi-line comments. Single-line comments Single-line comments start with # and end with a new line. They can start at the beginning of a line or after some code. Example: # this is a single-line comment foo(bar) # this calls the function foo with the argument bar Multi-line comments Multi-line comments start with /* and end with */ . They can start and stop at any point in the code. Example: /* this is a multi line comment */ print(\"hello\") /* this is also a multi line comment*/ Multi-line comments can also be only on one line: print(\"hello\") /* this is a multi-line comment that is only on one line */ Multi-line comments are simply ignored, which mean you can do things such as: print( /* this is a comment */ \"hello\" /* this is another comment */) print(/* this is actually a comment*/ \"hello\") Multi-line comments can be nested: /* comment /* comment-inside comment*/ /* /* comment-ception */ */ comment */ NOUGAROIGNORE comments Added in 0.22.0-beta These comments start and end with ..NOUGAROIGNORE or .. NOUGAROIGNORE , where . is any character among #@/%!$; . There should be nothing else on the NOUGAROIGNORE line. Example: file examples/fizzbuzz.cpp.c.py.noug (polyglott file using C/C++ comments, Python docstrings and Nougaro NOUGAROIGNORE comments). Lines Line are separated by a newline or a semicolon ( ; ). a b is equivalent to a ; b . Line joining If you don\u2019t have enough space on your line, you can join two \u201creal lines\u201d to form a Nougaro line, using a backspace. Example: var fruits = [\\ \"banana\", \\ \"apple\", \\ \"raspberry\", \\ \"pineapple\" \\ ] Blank lines Blank lines are ignored. Indentation Indentation is optional, as (mostly) every statement ends with end . Whitespaces Whitespaces are ignored everywhere (except in string literals and to differentiate things such as foobar and foo bar , or += and + = ).","title":"Very basic syntax"},{"location":"1.1/Language/01syntax/#very-basic-syntax","text":"This document covers the basic syntax of Nougaro.","title":"Very basic syntax"},{"location":"1.1/Language/01syntax/#comments","text":"There are two types of comments in Nougaro: single-line comments and multi-line comments.","title":"Comments"},{"location":"1.1/Language/01syntax/#single-line-comments","text":"Single-line comments start with # and end with a new line. They can start at the beginning of a line or after some code. Example: # this is a single-line comment foo(bar) # this calls the function foo with the argument bar","title":"Single-line comments"},{"location":"1.1/Language/01syntax/#multi-line-comments","text":"Multi-line comments start with /* and end with */ . They can start and stop at any point in the code. Example: /* this is a multi line comment */ print(\"hello\") /* this is also a multi line comment*/ Multi-line comments can also be only on one line: print(\"hello\") /* this is a multi-line comment that is only on one line */ Multi-line comments are simply ignored, which mean you can do things such as: print( /* this is a comment */ \"hello\" /* this is another comment */) print(/* this is actually a comment*/ \"hello\") Multi-line comments can be nested: /* comment /* comment-inside comment*/ /* /* comment-ception */ */ comment */","title":"Multi-line comments"},{"location":"1.1/Language/01syntax/#nougaroignore-comments","text":"Added in 0.22.0-beta These comments start and end with ..NOUGAROIGNORE or .. NOUGAROIGNORE , where . is any character among #@/%!$; . There should be nothing else on the NOUGAROIGNORE line. Example: file examples/fizzbuzz.cpp.c.py.noug (polyglott file using C/C++ comments, Python docstrings and Nougaro NOUGAROIGNORE comments).","title":"NOUGAROIGNORE comments"},{"location":"1.1/Language/01syntax/#lines","text":"Line are separated by a newline or a semicolon ( ; ). a b is equivalent to a ; b .","title":"Lines"},{"location":"1.1/Language/01syntax/#line-joining","text":"If you don\u2019t have enough space on your line, you can join two \u201creal lines\u201d to form a Nougaro line, using a backspace. Example: var fruits = [\\ \"banana\", \\ \"apple\", \\ \"raspberry\", \\ \"pineapple\" \\ ]","title":"Line joining"},{"location":"1.1/Language/01syntax/#blank-lines","text":"Blank lines are ignored.","title":"Blank lines"},{"location":"1.1/Language/01syntax/#indentation","text":"Indentation is optional, as (mostly) every statement ends with end .","title":"Indentation"},{"location":"1.1/Language/01syntax/#whitespaces","text":"Whitespaces are ignored everywhere (except in string literals and to differentiate things such as foobar and foo bar , or += and + = ).","title":"Whitespaces"},{"location":"1.1/Language/02number_literals/","text":"Number literals Here\u2019s all the different ways to write a number in Nougaro: 123 12.3 123e2 12.3e2 123e-2 123e+2 12.3e-2 12.3e+2 Note You can put + or - in front of the number to specify its sign. Example: -123 . Other bases: 0b01110 (base 2, binary) 0o17403 (base 8, octal) 0x4EF1A (base 16, hexadecimal) 0b10e30 0o70e30 Note 0xA0e30 will be interpreted as the hexadecimal number A0E30 ( 3*16^1 + 15*16^2 + 10*16^4 ) and not as 0xA0 * 10^30 _ in numbers Note You can put as much underscores ( _ ) as you want in a number literal, as long as the underscore are not at the beginning or at the end of the literal, or around the dot in floating-point numbers (ex: 10_694_254 is the same as 10694254 , 10_ is not valid, 12._3 is not valid and 12_._3 isn\u2019t either.)","title":"Number literals"},{"location":"1.1/Language/02number_literals/#number-literals","text":"Here\u2019s all the different ways to write a number in Nougaro: 123 12.3 123e2 12.3e2 123e-2 123e+2 12.3e-2 12.3e+2 Note You can put + or - in front of the number to specify its sign. Example: -123 . Other bases: 0b01110 (base 2, binary) 0o17403 (base 8, octal) 0x4EF1A (base 16, hexadecimal) 0b10e30 0o70e30 Note 0xA0e30 will be interpreted as the hexadecimal number A0E30 ( 3*16^1 + 15*16^2 + 10*16^4 ) and not as 0xA0 * 10^30","title":"Number literals"},{"location":"1.1/Language/02number_literals/#_-in-numbers","text":"Note You can put as much underscores ( _ ) as you want in a number literal, as long as the underscore are not at the beginning or at the end of the literal, or around the dot in floating-point numbers (ex: 10_694_254 is the same as 10694254 , 10_ is not valid, 12._3 is not valid and 12_._3 isn\u2019t either.)","title":"_ in numbers"},{"location":"1.1/Language/03string_literals/","text":"String literals String literals are delimited by \"\" , '' or \u00ab\u00bb . Examples: \"hello\" 'hello' \u00abhello\u00bb Escape characters: \\' : ' \\\" : \" \\\u00bb : \u00bb \\n : backline \\t : tab \\\\ : backslash \\xAA : unicode character number AA (hex) \\uAAAA : unicode character number AAAA (hex) \\UAAAAAAAA : unicode character number AAAAAAAA (hex) \\N{NAME} : unicode character with name NAME. Returns SyntaxError if it doesn\u2019t exist. Note The backslash isn\u2019t left if the next character is not recognised (example: \"\\/\" is the same as \"/\" , and not \"\\\\/\" ) Examples: 'I\\'m a string literal' \"He said: \\\"'I'm a string literal'\\\"\" \"\\\\ backslashes, \\t tabs and \\n backlines\" \u00abThis string has a \\N{NO BREAK SPACE}\u00bb \"\\N{Latin Small Letter C with Cedilla}: \\xe7\" \"\\N{Greek Small Letter Eta with Dasia and Oxia and Ypogegrammeni}: \\u1F95\" \"This is Person Shrugging (\ud83e\udd37): \\U0001f937\" Note You can use the meta nbspBetweenFrenchGuillemets to be forced to use a no-break-space or a narrow-no-break-space after \u00ab and before \u00bb . These NBSP are not counted in the string and this does not affect the other string delimiters.","title":"String literals"},{"location":"1.1/Language/03string_literals/#string-literals","text":"String literals are delimited by \"\" , '' or \u00ab\u00bb . Examples: \"hello\" 'hello' \u00abhello\u00bb Escape characters: \\' : ' \\\" : \" \\\u00bb : \u00bb \\n : backline \\t : tab \\\\ : backslash \\xAA : unicode character number AA (hex) \\uAAAA : unicode character number AAAA (hex) \\UAAAAAAAA : unicode character number AAAAAAAA (hex) \\N{NAME} : unicode character with name NAME. Returns SyntaxError if it doesn\u2019t exist. Note The backslash isn\u2019t left if the next character is not recognised (example: \"\\/\" is the same as \"/\" , and not \"\\\\/\" ) Examples: 'I\\'m a string literal' \"He said: \\\"'I'm a string literal'\\\"\" \"\\\\ backslashes, \\t tabs and \\n backlines\" \u00abThis string has a \\N{NO BREAK SPACE}\u00bb \"\\N{Latin Small Letter C with Cedilla}: \\xe7\" \"\\N{Greek Small Letter Eta with Dasia and Oxia and Ypogegrammeni}: \\u1F95\" \"This is Person Shrugging (\ud83e\udd37): \\U0001f937\" Note You can use the meta nbspBetweenFrenchGuillemets to be forced to use a no-break-space or a narrow-no-break-space after \u00ab and before \u00bb . These NBSP are not counted in the string and this does not affect the other string delimiters.","title":"String literals"},{"location":"1.1/Language/04identifiers_and_keywords/","text":"Identifiers and keywords Identifiers (variable names) can be composed of the 26 characters of the ASCII alphabet ( a to z \u202fthen A to Z ), in lower and upper case, the underscore _ and digits ( 0 to 9 ). Note An identifier can not start with a digit. Keywords The following identifiers are reserved and can not be used as variable names: and as assert break class continue def del do elif else end export for if import in loop not or read return step then to var while write xor","title":"Identifiers and keywords"},{"location":"1.1/Language/04identifiers_and_keywords/#identifiers-and-keywords","text":"Identifiers (variable names) can be composed of the 26 characters of the ASCII alphabet ( a to z \u202fthen A to Z ), in lower and upper case, the underscore _ and digits ( 0 to 9 ). Note An identifier can not start with a digit.","title":"Identifiers and keywords"},{"location":"1.1/Language/04identifiers_and_keywords/#keywords","text":"The following identifiers are reserved and can not be used as variable names: and as assert break class continue def del do elif else end export for if import in loop not or read return step then to var while write xor","title":"Keywords"},{"location":"1.1/Language/05operators/","text":"Operators Mathematical operators Here all the mathematical operators in Nougaro (ordered by priority): Nougaro Python Comments ^ ** power * * multiplication % % modulo / / division // // floor division + + addition - - substraction & & bitwise and | | bitwise or ^^ ^ bitwise xor ~ ~ bitwise not It respects operation priority and you can use parenthesis. Examples 3 * 4 returns 12 4 / 2 returns 2 1 + 1 returns 2 3 - 4 returns -1 10 % 7 returns 3 10 % 3 returns 1 10 // 7 returns 1 10 // 3 returns 3 5 ^ 2 returns 25 62 & 35 returns 34 ~1 returns -2 and ~-2 returns 1 5 + 5 * 3 + 2 returns 22 (5 + 5) * (3 + 2) returns 50 Test operators They are exactly same as Python ones: Nougaro Python Comments == == equals to != != different than < < less than <= <= less than or equals > > greater than >= >= greater than or equals in in check if a value is in another Note the in keyword can check if: int , float , str , list , DefaultValue or NoneValue is in a str any value is in a list Added in 0.22.0-beta DefaultValue is new in 0.22.0-beta. Logical operators There is one logical operator that isn't here in Python. There is a list: Nougaro Python Comments and and boolean 'and' (binary operator) or or boolean 'or' (binary operator) xor ^ boolean 'exclusive or' (binary operator) not not boolean 'not' (inverter) (unary operator)","title":"Operators"},{"location":"1.1/Language/05operators/#operators","text":"","title":"Operators"},{"location":"1.1/Language/05operators/#mathematical-operators","text":"Here all the mathematical operators in Nougaro (ordered by priority): Nougaro Python Comments ^ ** power * * multiplication % % modulo / / division // // floor division + + addition - - substraction & & bitwise and | | bitwise or ^^ ^ bitwise xor ~ ~ bitwise not It respects operation priority and you can use parenthesis.","title":"Mathematical operators"},{"location":"1.1/Language/05operators/#examples","text":"3 * 4 returns 12 4 / 2 returns 2 1 + 1 returns 2 3 - 4 returns -1 10 % 7 returns 3 10 % 3 returns 1 10 // 7 returns 1 10 // 3 returns 3 5 ^ 2 returns 25 62 & 35 returns 34 ~1 returns -2 and ~-2 returns 1 5 + 5 * 3 + 2 returns 22 (5 + 5) * (3 + 2) returns 50","title":"Examples"},{"location":"1.1/Language/05operators/#test-operators","text":"They are exactly same as Python ones: Nougaro Python Comments == == equals to != != different than < < less than <= <= less than or equals > > greater than >= >= greater than or equals in in check if a value is in another Note the in keyword can check if: int , float , str , list , DefaultValue or NoneValue is in a str any value is in a list Added in 0.22.0-beta DefaultValue is new in 0.22.0-beta.","title":"Test operators"},{"location":"1.1/Language/05operators/#logical-operators","text":"There is one logical operator that isn't here in Python. There is a list: Nougaro Python Comments and and boolean 'and' (binary operator) or or boolean 'or' (binary operator) xor ^ boolean 'exclusive or' (binary operator) not not boolean 'not' (inverter) (unary operator)","title":"Logical operators"},{"location":"1.1/Language/06values/","text":"Values Here is the list of the value types in Nougaro: int ( integers ). Internal type: int float ( floats ). Internal type: float str ( strings ). Internal type: str list ( lists ). Internal type: list NoneType ( None ). Internal type: NoneValue function . Internal type: func or method . module . Internal type: module constructor . Internal type: constructor object . Internal type: depends on the class\u2019 name, and it is <class> if the class has no name. Note Internal value types are base value (type: BaseValue ) and default value (type: DefaultValue ) Added in 0.22.0-beta DefaultValue is new in 0.22.0-beta. Changed in 0.22.0-beta Before 0.22.0-beta, a distinction was made between func (user-defined function or function in a module written in Nougaro) and built-in func (built-in function or function in a module written in Python). Numbers Numbers represents real-life numbers. The two types of numbers are int and float . To declare a number, you can use a number literal . Operations that can be used between two numbers are: addition, substraction, multiplication, power. If the second number is non-zero, division, modulo and floor division can be used. All these operations follow the mathematical logic (except for 0^0, that returns 1). Multiplication can be used between a integer (type int ) and a string or a list . For example, 3*\"str\" returns \"strstrstr\" , and 2*[1, 2] returns [1, 2, 1, 2] . In boolean context, a number is true if it is non-zero. Strings The type of a string is str . To declare a string, you can use a string literal The only operation that can be used between strings is addition, which concatenates the string with the other. For example, \"hello, \" + \"world!\" returns \"hello, world!\" . Multiplication can be used between a string and an integer (type int ). For example, \"str\"*3 returns \"strstrstr\" . In boolean context, a string is true if it contains at least one character. Lists Lists are a succession of values. To declare a list, you can use brackets ( [] ), and put every value separated by a comma ( , ) inside. They may be 0 values. To create a list with elements from another list (and other elements), you can use this syntax: [1, 2, *list_, 5] (which is [1, 2, 3, 4, 5] if list_ is [3, 4] ). The only operation that can be used between two lists is multiplication, which extends the first list with the content of the second list. This can also be achieved using extend(list1, list2) Addition can be used between a list and any other value to add an element to the list. Substraction can be used between a list and an integer (type int ) to pop (i.e. delete) an element by index. This supports negative numbers. The returned value is the list after the pop. This can be achieved with pop(list, index) , although this returns the popped value. Multiplication can be used between a list and an integer (type int ). For example, [1, 2]*2 returns [1, 2, 1, 2] . Division can be used between a list and an integer (type int ) to get an element by index. This supports negative numbers. This can be achieved using list(index) or get(list, index) . In boolean context, a list is true if it is not empty None None is a value to denote the absence of other values. It is accessible trought the None built-in variable. No operation can be used on None . In boolean context, None is false. Modules A module is a value containing various useful functions and constants. A list of modules can be found here . Importing modules is detailed here . The procedure to create your own module is detailed here . No operation can be used on modules. In boolean context, a module is true. Changed in 0.22.0-beta Prior to 0.22.0-beta, a module was false in boolean context.","title":"Values"},{"location":"1.1/Language/06values/#values","text":"Here is the list of the value types in Nougaro: int ( integers ). Internal type: int float ( floats ). Internal type: float str ( strings ). Internal type: str list ( lists ). Internal type: list NoneType ( None ). Internal type: NoneValue function . Internal type: func or method . module . Internal type: module constructor . Internal type: constructor object . Internal type: depends on the class\u2019 name, and it is <class> if the class has no name. Note Internal value types are base value (type: BaseValue ) and default value (type: DefaultValue ) Added in 0.22.0-beta DefaultValue is new in 0.22.0-beta. Changed in 0.22.0-beta Before 0.22.0-beta, a distinction was made between func (user-defined function or function in a module written in Nougaro) and built-in func (built-in function or function in a module written in Python).","title":"Values"},{"location":"1.1/Language/06values/#numbers","text":"Numbers represents real-life numbers. The two types of numbers are int and float . To declare a number, you can use a number literal . Operations that can be used between two numbers are: addition, substraction, multiplication, power. If the second number is non-zero, division, modulo and floor division can be used. All these operations follow the mathematical logic (except for 0^0, that returns 1). Multiplication can be used between a integer (type int ) and a string or a list . For example, 3*\"str\" returns \"strstrstr\" , and 2*[1, 2] returns [1, 2, 1, 2] . In boolean context, a number is true if it is non-zero.","title":"Numbers"},{"location":"1.1/Language/06values/#strings","text":"The type of a string is str . To declare a string, you can use a string literal The only operation that can be used between strings is addition, which concatenates the string with the other. For example, \"hello, \" + \"world!\" returns \"hello, world!\" . Multiplication can be used between a string and an integer (type int ). For example, \"str\"*3 returns \"strstrstr\" . In boolean context, a string is true if it contains at least one character.","title":"Strings"},{"location":"1.1/Language/06values/#lists","text":"Lists are a succession of values. To declare a list, you can use brackets ( [] ), and put every value separated by a comma ( , ) inside. They may be 0 values. To create a list with elements from another list (and other elements), you can use this syntax: [1, 2, *list_, 5] (which is [1, 2, 3, 4, 5] if list_ is [3, 4] ). The only operation that can be used between two lists is multiplication, which extends the first list with the content of the second list. This can also be achieved using extend(list1, list2) Addition can be used between a list and any other value to add an element to the list. Substraction can be used between a list and an integer (type int ) to pop (i.e. delete) an element by index. This supports negative numbers. The returned value is the list after the pop. This can be achieved with pop(list, index) , although this returns the popped value. Multiplication can be used between a list and an integer (type int ). For example, [1, 2]*2 returns [1, 2, 1, 2] . Division can be used between a list and an integer (type int ) to get an element by index. This supports negative numbers. This can be achieved using list(index) or get(list, index) . In boolean context, a list is true if it is not empty","title":"Lists"},{"location":"1.1/Language/06values/#none","text":"None is a value to denote the absence of other values. It is accessible trought the None built-in variable. No operation can be used on None . In boolean context, None is false.","title":"None"},{"location":"1.1/Language/06values/#modules","text":"A module is a value containing various useful functions and constants. A list of modules can be found here . Importing modules is detailed here . The procedure to create your own module is detailed here . No operation can be used on modules. In boolean context, a module is true. Changed in 0.22.0-beta Prior to 0.22.0-beta, a module was false in boolean context.","title":"Modules"},{"location":"1.1/Language/07variables/","text":"Variables Definition Use the syntax var identifier = value (see identifiers and values ) to assign the value value to the variable named identifier . The expression var identifier = value returns value . To assign the same value to multiple variables, you can use var variable1 = var variable2 = var variable3 = value . If you want to assign multiple values to multiple variables, you can use var variable1, variable2 = value1, value2 . This can be used to swap variables: var a, b = b, a . Except for keywords , there are no prohibited variable name. Edition You can edit variables by multiple ways: var a = value ; var a += value : same as var a = a + value ; var a ++ : same as var a += 1 ; var a -= value : same as var a = a - value ; var a -- : same as var a -= 1 ; var a *= value : same as var a = a * value ; var a /= value : same as var a = a / value ; var a ^= value : same as var a = a ^ value ; var a //= value : same as var a = a // value ; var a %= value : same as var a = a % value ; var a ||= value : same as var a = a or value ; var a &&= value : same as var a = a and value ; var a ^^^= value : same as var a = a xor value ; var a |= value : same as var a = a | value ; var a &= value : same as var a = a & value ; var a ^^= value : same as var a = a ^^ value ; var a === value : same as var a = a == value ; var a <== value : same as var a = a <= value ; var a <<= value : same as var a = a < value ; var a >== value : same as var a = a >= value ; var a >>= value : same as var a = a > value . Info For details about these operators, see this page . Note You can also edit multiple variables at the same time: var a, b += 1, 2 : same as var a += 1 ; var b += 2 var a, b ++ : same as var a, b += 1, 1 var a, b //= b, a : same as var c = a ; var a //= b ; var b //= c ; del c Access To access to a variable, you can: give the identifier: foo (returns the value of foo ) use the special syntax: foo ? bar ? a ? b (returns the value of foo if it is defined, otherwise the value of bar ... You can put as much ? identifier as you want.) Then, you can put an expression at the end, such as 2 . In this case, the value returned will be 2 if none of the given identifiers is defined. Deletion If you don't need a variable anymore, you can delete it with the del keyword: del identifier . Examples var foo = var bar = 12 while foo != bar - 1 then var bar -= 1 (see while loop ) Example for deletion Create a variable a , the delete it: nougaro> var a = 1 1 nougaro> del a But be careful! It can return errors: nougaro> var a = 1 1 nougaro> del a nougaro> del a Traceback (more recent call last): In file <stdin>, line 1, in <program>: del a ^ NotDefinedError: a is not defined.","title":"Variables"},{"location":"1.1/Language/07variables/#variables","text":"","title":"Variables"},{"location":"1.1/Language/07variables/#definition","text":"Use the syntax var identifier = value (see identifiers and values ) to assign the value value to the variable named identifier . The expression var identifier = value returns value . To assign the same value to multiple variables, you can use var variable1 = var variable2 = var variable3 = value . If you want to assign multiple values to multiple variables, you can use var variable1, variable2 = value1, value2 . This can be used to swap variables: var a, b = b, a . Except for keywords , there are no prohibited variable name.","title":"Definition"},{"location":"1.1/Language/07variables/#edition","text":"You can edit variables by multiple ways: var a = value ; var a += value : same as var a = a + value ; var a ++ : same as var a += 1 ; var a -= value : same as var a = a - value ; var a -- : same as var a -= 1 ; var a *= value : same as var a = a * value ; var a /= value : same as var a = a / value ; var a ^= value : same as var a = a ^ value ; var a //= value : same as var a = a // value ; var a %= value : same as var a = a % value ; var a ||= value : same as var a = a or value ; var a &&= value : same as var a = a and value ; var a ^^^= value : same as var a = a xor value ; var a |= value : same as var a = a | value ; var a &= value : same as var a = a & value ; var a ^^= value : same as var a = a ^^ value ; var a === value : same as var a = a == value ; var a <== value : same as var a = a <= value ; var a <<= value : same as var a = a < value ; var a >== value : same as var a = a >= value ; var a >>= value : same as var a = a > value . Info For details about these operators, see this page . Note You can also edit multiple variables at the same time: var a, b += 1, 2 : same as var a += 1 ; var b += 2 var a, b ++ : same as var a, b += 1, 1 var a, b //= b, a : same as var c = a ; var a //= b ; var b //= c ; del c","title":"Edition"},{"location":"1.1/Language/07variables/#access","text":"To access to a variable, you can: give the identifier: foo (returns the value of foo ) use the special syntax: foo ? bar ? a ? b (returns the value of foo if it is defined, otherwise the value of bar ... You can put as much ? identifier as you want.) Then, you can put an expression at the end, such as 2 . In this case, the value returned will be 2 if none of the given identifiers is defined.","title":"Access"},{"location":"1.1/Language/07variables/#deletion","text":"If you don't need a variable anymore, you can delete it with the del keyword: del identifier .","title":"Deletion"},{"location":"1.1/Language/07variables/#examples","text":"var foo = var bar = 12 while foo != bar - 1 then var bar -= 1 (see while loop )","title":"Examples"},{"location":"1.1/Language/07variables/#example-for-deletion","text":"Create a variable a , the delete it: nougaro> var a = 1 1 nougaro> del a But be careful! It can return errors: nougaro> var a = 1 1 nougaro> del a nougaro> del a Traceback (more recent call last): In file <stdin>, line 1, in <program>: del a ^ NotDefinedError: a is not defined.","title":"Example for deletion"},{"location":"1.1/Language/08tests/","text":"Test statements List There is the list of test keywords in Nougaro : Nougaro Python if if then : elif elif else else assert assert Syntax if <cond> then <expr> if <cond> then <expr> else <expr> if <cond> then <expr> elif <cond> then <expr> if <cond> then <expr> elif <cond> then <expr> else <expr> if <cond> then <expr> elif <cond> then <expr> elif <cond> then <expr> if <cond> then <expr> elif <cond> then <expr> elif <cond> then <expr> else <expr> etc. Multi-line : if <cond> then <some code here> end if <cond> then <some code here> else <some other code> end if <cond> then <some code here> else <some other code> end etc. Behaviour The condition is checked. If it is true, the expression in the if branch is executed. Otherwise, Nougaro checks for an elif branch. If it exists, it re-checks the condition, etc. If none of the conditions is true and that there is an else branch, the expression in the else branch is executed. If there is no else branch, nothing is executed. Dangling-else ambiguity When Nougaro encounters a 'dangling else', such as in this case: if a then if b then foo() else bar() then the else is attributed to the closest if . In this case, the else will be part of the if b . If you want the else to be part of the if a statement, simply use parenthesis: if a then (if b then foo()) else bar() Logicals constants Nougaro Python Comments True True equals to 1 False False equals to 0 Conditions Conditions can be any value , which will be interpreted in its boolean context. Conditions can also use test operators . For instance, a == b checks if a is equal to b , where a < b checks if a is strictly less than b .\u202fYou can chain multiple operators: a == b <= c != d checks if a is equal to b and if b is less than or equal to c and if c is different from d . Multiple conditions can be combined with boolean/logical operators . Here is the truth table of the logical operators: and a b a and b 0 0 0 0 1 0 1 0 0 1 1 1 or a b a or b 0 0 0 0 1 1 1 0 1 1 1 1 xor a b a xor b 0 0 0 0 1 1 1 0 1 1 1 0 not a not a 0 1 1 0 There is no priority amongst boolean operators, so for instance a and b or c xor d gives ((a and b) or c) xor d . After interpretation, a condition is always 0 or 1 ( False or True ). Examples if foo == bar then var foo = 12 if bar != foo then var foo = 12 else var bar = 13 * if foo > bar and 12 <= variable then var bar = variable elif foo < bar xor foo > variable then var foo = 3 end if foo > bar and 12 <= variable then var bar = variable elif foo < bar xor foo > variable then var foo = 3 else var foo = 12 end Assertions The assert keyword can be used to quickly check for a condition, and crash if the condition is not met. Its syntax is the following: assert (condition) assert (condition), \"error message.\" If (condition) is true, nothing happens and the program continues. However, if it is false, the program crashes with AssertionError with the error message specified in the code (or without any error message if no error message is specified.)","title":"Test statements"},{"location":"1.1/Language/08tests/#test-statements","text":"","title":"Test statements"},{"location":"1.1/Language/08tests/#list","text":"There is the list of test keywords in Nougaro : Nougaro Python if if then : elif elif else else assert assert","title":"List"},{"location":"1.1/Language/08tests/#syntax","text":"if <cond> then <expr> if <cond> then <expr> else <expr> if <cond> then <expr> elif <cond> then <expr> if <cond> then <expr> elif <cond> then <expr> else <expr> if <cond> then <expr> elif <cond> then <expr> elif <cond> then <expr> if <cond> then <expr> elif <cond> then <expr> elif <cond> then <expr> else <expr> etc. Multi-line : if <cond> then <some code here> end if <cond> then <some code here> else <some other code> end if <cond> then <some code here> else <some other code> end etc.","title":"Syntax"},{"location":"1.1/Language/08tests/#behaviour","text":"The condition is checked. If it is true, the expression in the if branch is executed. Otherwise, Nougaro checks for an elif branch. If it exists, it re-checks the condition, etc. If none of the conditions is true and that there is an else branch, the expression in the else branch is executed. If there is no else branch, nothing is executed.","title":"Behaviour"},{"location":"1.1/Language/08tests/#dangling-else-ambiguity","text":"When Nougaro encounters a 'dangling else', such as in this case: if a then if b then foo() else bar() then the else is attributed to the closest if . In this case, the else will be part of the if b . If you want the else to be part of the if a statement, simply use parenthesis: if a then (if b then foo()) else bar()","title":"Dangling-else ambiguity"},{"location":"1.1/Language/08tests/#logicals-constants","text":"Nougaro Python Comments True True equals to 1 False False equals to 0","title":"Logicals constants"},{"location":"1.1/Language/08tests/#conditions","text":"Conditions can be any value , which will be interpreted in its boolean context. Conditions can also use test operators . For instance, a == b checks if a is equal to b , where a < b checks if a is strictly less than b .\u202fYou can chain multiple operators: a == b <= c != d checks if a is equal to b and if b is less than or equal to c and if c is different from d . Multiple conditions can be combined with boolean/logical operators . Here is the truth table of the logical operators:","title":"Conditions"},{"location":"1.1/Language/08tests/#and","text":"a b a and b 0 0 0 0 1 0 1 0 0 1 1 1","title":"and"},{"location":"1.1/Language/08tests/#or","text":"a b a or b 0 0 0 0 1 1 1 0 1 1 1 1","title":"or"},{"location":"1.1/Language/08tests/#xor","text":"a b a xor b 0 0 0 0 1 1 1 0 1 1 1 0","title":"xor"},{"location":"1.1/Language/08tests/#not","text":"a not a 0 1 1 0 There is no priority amongst boolean operators, so for instance a and b or c xor d gives ((a and b) or c) xor d . After interpretation, a condition is always 0 or 1 ( False or True ).","title":"not"},{"location":"1.1/Language/08tests/#examples","text":"if foo == bar then var foo = 12 if bar != foo then var foo = 12 else var bar = 13 * if foo > bar and 12 <= variable then var bar = variable elif foo < bar xor foo > variable then var foo = 3 end if foo > bar and 12 <= variable then var bar = variable elif foo < bar xor foo > variable then var foo = 3 else var foo = 12 end","title":"Examples"},{"location":"1.1/Language/08tests/#assertions","text":"The assert keyword can be used to quickly check for a condition, and crash if the condition is not met. Its syntax is the following: assert (condition) assert (condition), \"error message.\" If (condition) is true, nothing happens and the program continues. However, if it is false, the program crashes with AssertionError with the error message specified in the code (or without any error message if no error message is specified.)","title":"Assertions"},{"location":"1.1/Language/09loops/","text":"Loops Loops are made to execute the same piece of code multiple times in a row. Here is a list of available loops in Nougaro: Nougaro Python C/C++ for for for while while while do ... then loop while (nothing) do ... while loop while True while (1) for The for loop can have two usages: browse every element in a list (or a str ), or iterate a certain number of times. for each To browse every element in a list (or a str ), use the following syntax: # One line for identifier in list then ... # Multiple lines for identifier in list then ... ... end For each element of the list, the variable identifier will be set to the corresponding element, and this variable can be used inside the loop. for i = ... to ... # One line for identifier = start_value to end_value then ... for identifier = start_value to end_value step step_value then ... # Multiple lines for identifier = start_value to end_value then ... ... end for identifier = start_value to end_value step step_value then ... ... end start_value , end_value and step_value are integers . If step_value is not specified, the default value is 0. This loop starts by setting the variable identifier to start_value , then executes the loop. It then adds step_value to identifier . If the value of identifier is greater than or equal to end_value , the loops stops without executing. Otherwise, it runs until this condition is reached. Note In for loops, the start value can be less than the end value. In that case, don\u2019t forget to give a negative step! while The while loop is used to repeat a piece of code as long as a condition is met. It has the following syntax: # One line while condition then ... # Multiple lines while condition then ... ... end do The do loop is used to execute a piece of code a first time, then repeat it as long as a condition is met. It has the following syntax: # One line do ... then loop while condition # Multiple lines do ... ... then loop while condition loop Added in 1.1.0 The loop loop was added in 1.1.0 The loop loop is an infinite loop. It has the following syntax: # One line loop ... # Multible lines loop ... ... end The loop loop stops whenever it encounters a break (like every other loop) Labels Added in 0.20.0-beta Labels were added in 0.20.0-beta. You can label a loop using for:label , while:label or do:label . Labels are identifiers . You can use labels with break and continue . break , continue Changed in 0.20.0-beta Prior to 0.20.0-beta, break and continue did append None to the return list. To re-enable this behaviour, you can enable appendNoneOnBreak or appendNoneOnContinue metas . Added in 0.20.0-beta Labels were added in 0.20.0-beta. The break statement completely stops the loop. If there is a returned list, the value is not added to this list. You can use break and return ... to return a specific value. The continue statement omit the code after it, and execute another time the loop like if the last time was ended. continue and break work normally at the first execution of a do body. continue:label will continue the loop that has this label. If you\u2019re in an :inner loop inside a :label loop, the :inner loop will break and the :label loop will continue. break:label will break the loop that has this label. If you\u2019re in an :inner loop inside a :label loop, the :inner AND the :label loop will break.","title":"Loops"},{"location":"1.1/Language/09loops/#loops","text":"Loops are made to execute the same piece of code multiple times in a row. Here is a list of available loops in Nougaro: Nougaro Python C/C++ for for for while while while do ... then loop while (nothing) do ... while loop while True while (1)","title":"Loops"},{"location":"1.1/Language/09loops/#for","text":"The for loop can have two usages: browse every element in a list (or a str ), or iterate a certain number of times.","title":"for"},{"location":"1.1/Language/09loops/#for-each","text":"To browse every element in a list (or a str ), use the following syntax: # One line for identifier in list then ... # Multiple lines for identifier in list then ... ... end For each element of the list, the variable identifier will be set to the corresponding element, and this variable can be used inside the loop.","title":"for each"},{"location":"1.1/Language/09loops/#for-i-to","text":"# One line for identifier = start_value to end_value then ... for identifier = start_value to end_value step step_value then ... # Multiple lines for identifier = start_value to end_value then ... ... end for identifier = start_value to end_value step step_value then ... ... end start_value , end_value and step_value are integers . If step_value is not specified, the default value is 0. This loop starts by setting the variable identifier to start_value , then executes the loop. It then adds step_value to identifier . If the value of identifier is greater than or equal to end_value , the loops stops without executing. Otherwise, it runs until this condition is reached. Note In for loops, the start value can be less than the end value. In that case, don\u2019t forget to give a negative step!","title":"for i = ... to ..."},{"location":"1.1/Language/09loops/#while","text":"The while loop is used to repeat a piece of code as long as a condition is met. It has the following syntax: # One line while condition then ... # Multiple lines while condition then ... ... end","title":"while"},{"location":"1.1/Language/09loops/#do","text":"The do loop is used to execute a piece of code a first time, then repeat it as long as a condition is met. It has the following syntax: # One line do ... then loop while condition # Multiple lines do ... ... then loop while condition","title":"do"},{"location":"1.1/Language/09loops/#loop","text":"Added in 1.1.0 The loop loop was added in 1.1.0 The loop loop is an infinite loop. It has the following syntax: # One line loop ... # Multible lines loop ... ... end The loop loop stops whenever it encounters a break (like every other loop)","title":"loop"},{"location":"1.1/Language/09loops/#labels","text":"Added in 0.20.0-beta Labels were added in 0.20.0-beta. You can label a loop using for:label , while:label or do:label . Labels are identifiers . You can use labels with break and continue .","title":"Labels"},{"location":"1.1/Language/09loops/#break-continue","text":"Changed in 0.20.0-beta Prior to 0.20.0-beta, break and continue did append None to the return list. To re-enable this behaviour, you can enable appendNoneOnBreak or appendNoneOnContinue metas . Added in 0.20.0-beta Labels were added in 0.20.0-beta. The break statement completely stops the loop. If there is a returned list, the value is not added to this list. You can use break and return ... to return a specific value. The continue statement omit the code after it, and execute another time the loop like if the last time was ended. continue and break work normally at the first execution of a do body. continue:label will continue the loop that has this label. If you\u2019re in an :inner loop inside a :label loop, the :inner loop will break and the :label loop will continue. break:label will break the loop that has this label. If you\u2019re in an :inner loop inside a :label loop, the :inner AND the :label loop will break.","title":"break, continue"},{"location":"1.1/Language/10functions/","text":"Functions Internal type: func . No operation can be used on functions. Functions are true in boolean context. Changed in 0.22.0-beta Prior to 0.22.0-beta, functions were false in boolean context. Definition To define a function, use the def keyword and an arrow: def name(param1, param2) -> <some code here> . You can omit the name, but in this case you have to call directly the function or to store it in a variable: (def (param1) -> <some code here>)(<arg1>) ; var somefunc = def (param1) -> <some code here> You can define multi-line functions: def name(param1, param2, param3) <some code here> end Note The arguments given and the variables created inside the function are deleted at the end of the function execution. Similarly, the variables created outside the function and before its definition are accessible inside the function, but modifications are not saved. Info There can be 0 parameters. Optional parameters Note Added in 0.22.0-beta To define optional parameters, use this syntax: def name(param1, param2, param3)(optional_param1=default_value, optional_param2=default_value) <some code here> end return statement In the code executed by your function, there can be the return statement. It stops the function. If a value is placed after the statement, the function will return this value when called. In the other cases, it will return None . Call Call a function using this syntax: func(arg1, arg2) You can store arguments in a list and use *list . E.g. func(*list_) , func(*[1, 2, 3]) . Optional arguments Note Added in 0.22.0-beta You can omit optional arguments, which will set them to their default value. In this case: def name(param1, param2, param3)(optional_param1=default_value, optional_param2=default_value) , if you want to keep optional_param1 to its default value but not optional_param2 , you can use: name(argument1, argument2, argument3, <default>, optional_argument2) (keep < and > around <default> ) Examples def foo(a, b) -> a*b - b def bar(a, b) -> (a-1)*b var c = 2 var d = 5 if foo(c, d) == bar(c, d) then var e = True else var e = False (In this case, e = 1) def foo(a, b) if a == 2 then return a + b else return b end end def foo(a, b)(should_return_none = False) if a == 2 then return a + b else if should_return_none then return return b end end foo(1, 5) # 5 foo(2, 5) # 7 foo(1, 5, <default>) # 5 foo(2, 5, <default>) # 7 foo(1, 5, True) # None foo(2, 5, True) # 7","title":"Functions"},{"location":"1.1/Language/10functions/#functions","text":"Internal type: func . No operation can be used on functions. Functions are true in boolean context. Changed in 0.22.0-beta Prior to 0.22.0-beta, functions were false in boolean context.","title":"Functions"},{"location":"1.1/Language/10functions/#definition","text":"To define a function, use the def keyword and an arrow: def name(param1, param2) -> <some code here> . You can omit the name, but in this case you have to call directly the function or to store it in a variable: (def (param1) -> <some code here>)(<arg1>) ; var somefunc = def (param1) -> <some code here> You can define multi-line functions: def name(param1, param2, param3) <some code here> end Note The arguments given and the variables created inside the function are deleted at the end of the function execution. Similarly, the variables created outside the function and before its definition are accessible inside the function, but modifications are not saved. Info There can be 0 parameters.","title":"Definition"},{"location":"1.1/Language/10functions/#optional-parameters","text":"Note Added in 0.22.0-beta To define optional parameters, use this syntax: def name(param1, param2, param3)(optional_param1=default_value, optional_param2=default_value) <some code here> end","title":"Optional parameters"},{"location":"1.1/Language/10functions/#return-statement","text":"In the code executed by your function, there can be the return statement. It stops the function. If a value is placed after the statement, the function will return this value when called. In the other cases, it will return None .","title":"return statement"},{"location":"1.1/Language/10functions/#call","text":"Call a function using this syntax: func(arg1, arg2) You can store arguments in a list and use *list . E.g. func(*list_) , func(*[1, 2, 3]) .","title":"Call"},{"location":"1.1/Language/10functions/#optional-arguments","text":"Note Added in 0.22.0-beta You can omit optional arguments, which will set them to their default value. In this case: def name(param1, param2, param3)(optional_param1=default_value, optional_param2=default_value) , if you want to keep optional_param1 to its default value but not optional_param2 , you can use: name(argument1, argument2, argument3, <default>, optional_argument2) (keep < and > around <default> )","title":"Optional arguments"},{"location":"1.1/Language/10functions/#examples","text":"def foo(a, b) -> a*b - b def bar(a, b) -> (a-1)*b var c = 2 var d = 5 if foo(c, d) == bar(c, d) then var e = True else var e = False (In this case, e = 1) def foo(a, b) if a == 2 then return a + b else return b end end def foo(a, b)(should_return_none = False) if a == 2 then return a + b else if should_return_none then return return b end end foo(1, 5) # 5 foo(2, 5) # 7 foo(1, 5, <default>) # 5 foo(2, 5, <default>) # 7 foo(1, 5, True) # None foo(2, 5, True) # 7","title":"Examples"},{"location":"1.1/Language/11attributes/","text":"Attributes Values in Nougaro can have attributes, i.e. subvalues that have a name. They can be set using the classical variable definition syntax: var variable.attribute = value They can be accessed using the dot-syntax: variable.attribute Note You can even access any name defined in the context of the value. For instance, variable.print references the print built-in function. Pro tip The next time you have a bug, document it. If it is documented, it is therefore not a bug.","title":"Attributes"},{"location":"1.1/Language/11attributes/#attributes","text":"Values in Nougaro can have attributes, i.e. subvalues that have a name. They can be set using the classical variable definition syntax: var variable.attribute = value They can be accessed using the dot-syntax: variable.attribute Note You can even access any name defined in the context of the value. For instance, variable.print references the print built-in function. Pro tip The next time you have a bug, document it. If it is documented, it is therefore not a bug.","title":"Attributes"},{"location":"1.1/Language/12classes/","text":"Classes and objects Note Added in 0.15-beta Nougaro is an object-oriented programming language, which means you can create objects using classes . Class definition To define a class, use this syntax: class Name ... end To create attributes , just use the basic var id = value syntax: class Name var a = 3 var b = 1 end To create methods , just use the basic def syntax . Access to object\u2019s attributes with this : class Name var a = 3 var b = 1 def increment_b(by) var this.b += 1 end def get_a() return this.a end end Methods are attributes themselves. Methods Internal type: method . No operation can be used on methods. Methods are true in boolean context. Changed in 0.22.0-beta Prior to 0.22.0-beta, methods were false in boolean context. Constructor value Internal type: constructor . No operation can be used on constructors. Constructors are false in boolean context. Inheritance To inherit from another class, use the class Name(Iherit) syntax: class ChildOfName(Name) var c = 3 def set_c(new_value) var this.c = new_value end def a_plus_b_plus_c() return this.get_a() + this.b + this.c end end Object Classes can be instanced into objects by calling them. Example: var instance = Name() instance.increment_b(10) assert instance.b == 11 Internal type: Name (depends on the class\u2019 name). No operation can be used on objects. Objects are false in boolean context. Example See the stack.noug example located in ./examples/ in the main Nougaro repository.","title":"Classes and objects"},{"location":"1.1/Language/12classes/#classes-and-objects","text":"Note Added in 0.15-beta Nougaro is an object-oriented programming language, which means you can create objects using classes .","title":"Classes and objects"},{"location":"1.1/Language/12classes/#class-definition","text":"To define a class, use this syntax: class Name ... end To create attributes , just use the basic var id = value syntax: class Name var a = 3 var b = 1 end To create methods , just use the basic def syntax . Access to object\u2019s attributes with this : class Name var a = 3 var b = 1 def increment_b(by) var this.b += 1 end def get_a() return this.a end end Methods are attributes themselves.","title":"Class definition"},{"location":"1.1/Language/12classes/#methods","text":"Internal type: method . No operation can be used on methods. Methods are true in boolean context. Changed in 0.22.0-beta Prior to 0.22.0-beta, methods were false in boolean context.","title":"Methods"},{"location":"1.1/Language/12classes/#constructor-value","text":"Internal type: constructor . No operation can be used on constructors. Constructors are false in boolean context.","title":"Constructor value"},{"location":"1.1/Language/12classes/#inheritance","text":"To inherit from another class, use the class Name(Iherit) syntax: class ChildOfName(Name) var c = 3 def set_c(new_value) var this.c = new_value end def a_plus_b_plus_c() return this.get_a() + this.b + this.c end end","title":"Inheritance"},{"location":"1.1/Language/12classes/#object","text":"Classes can be instanced into objects by calling them. Example: var instance = Name() instance.increment_b(10) assert instance.b == 11 Internal type: Name (depends on the class\u2019 name). No operation can be used on objects. Objects are false in boolean context.","title":"Object"},{"location":"1.1/Language/12classes/#example","text":"See the stack.noug example located in ./examples/ in the main Nougaro repository.","title":"Example"},{"location":"1.1/Language/13read_and_write_files/","text":"Read and write in files Read To read a file, use read \"path/to/file.ext\" or read \"path/to/file\" line_number . You can assign this value to a variable by using read \"file\" >> identifier line_number or var identifier = read \"file\" line_number . line_number is an integer and is optional. You can use \"<stdin>\" as file name to get a line of input from the user. It is exactly like the input built-in function . The read expression returns the content of the file (or of the line). Write To write in a file, use write \"sometext\" >> \"path/to/file.ext\" line_number . line_number is an integer and is optional. To overwrite the content when you write, replace >> by !>> . You can use \"<stdout>\" as file name to print a text in the console. It is exactly like the print built-in function . If you overwrite the contents of <stdout> , the console is cleared (exactly like the clear built-in function .) The write expression returns the text that was wrote in the file.","title":"Read and write in files"},{"location":"1.1/Language/13read_and_write_files/#read-and-write-in-files","text":"","title":"Read and write in files"},{"location":"1.1/Language/13read_and_write_files/#read","text":"To read a file, use read \"path/to/file.ext\" or read \"path/to/file\" line_number . You can assign this value to a variable by using read \"file\" >> identifier line_number or var identifier = read \"file\" line_number . line_number is an integer and is optional. You can use \"<stdin>\" as file name to get a line of input from the user. It is exactly like the input built-in function . The read expression returns the content of the file (or of the line).","title":"Read"},{"location":"1.1/Language/13read_and_write_files/#write","text":"To write in a file, use write \"sometext\" >> \"path/to/file.ext\" line_number . line_number is an integer and is optional. To overwrite the content when you write, replace >> by !>> . You can use \"<stdout>\" as file name to print a text in the console. It is exactly like the print built-in function . If you overwrite the contents of <stdout> , the console is cleared (exactly like the clear built-in function .) The write expression returns the text that was wrote in the file.","title":"Write"},{"location":"1.1/Language/14import/","text":"Import and export import and export are two keywords related to modules /libraries. Import The import keyword is used to import a module in the current code. It follows the syntax import name or import name as alias . It checks for name in Nougaro stardard library and in the current directory for a file named name.noug . dir.subdir.name looks for ./dir/subdir/name.noug . Note: the \u201ccurrent directory\u201d is the directory of the file that were executed. For instance, if the file foo.noug (in the directory project ) imported dir.bar , and that dir/bar.noug has import name , name is checked in the project directory. The \u201ccurrent directory\u201d is the working directory ( pwd ) if you launched an interactive session (shell). The import keyword created a module value with, as attributes, all the values exported by the module. Export The export keyword is used to export a value in a module, that will become an attribute of the module\u2019s value when imported. It follows the syntax export name or export expression as name . More in this page .","title":"Import and export"},{"location":"1.1/Language/14import/#import-and-export","text":"import and export are two keywords related to modules /libraries.","title":"Import and export"},{"location":"1.1/Language/14import/#import","text":"The import keyword is used to import a module in the current code. It follows the syntax import name or import name as alias . It checks for name in Nougaro stardard library and in the current directory for a file named name.noug . dir.subdir.name looks for ./dir/subdir/name.noug . Note: the \u201ccurrent directory\u201d is the directory of the file that were executed. For instance, if the file foo.noug (in the directory project ) imported dir.bar , and that dir/bar.noug has import name , name is checked in the project directory. The \u201ccurrent directory\u201d is the working directory ( pwd ) if you launched an interactive session (shell). The import keyword created a module value with, as attributes, all the values exported by the module.","title":"Import"},{"location":"1.1/Language/14import/#export","text":"The export keyword is used to export a value in a module, that will become an attribute of the module\u2019s value when imported. It follows the syntax export name or export expression as name . More in this page .","title":"Export"},{"location":"1.1/Language/15metas/","text":"Metas Note Added in 0.19.0-beta Metas are a way to use other (or old) functionnalities in Nougaro. They\u2019re used by adding @meta metaName or @meta metaName value at the beginning of a file or in an interactive shell. Note that, instead of @ , you can use any of those prefixes: #@ , %@ , @@ , -@ , $@ . appendNoneOnBreak Note Added in 0.20.0-beta If enabled, this meta forces a break statement to append None to the list returned by the loop . appendNoneOnContinue Note Added in 0.20.0-beta If enabled, this meta forces a continue statement to append None to the list returned by the loop . legacyAbs The legacyAbs meta lets you use the old syntax (in the prototype-1 version) for absolute value, which is |...| . However, this meta disables the bitwise or operation . Example: @meta legacyAbs print(|-1|) # 1 var a = 12 print(|-a|) # 12 nbspBetweenFrenchGuillemets The nbspBetweenFrenchGuillemets meta requires you, if you use the french string quotes ( \u00ab\u00bb ), to put a no-break space (or a narrow no-break space) after the \u00ab and before the \u00bb . Example: @meta nbspBetweenFrenchGuillemets print(\u00ab hello, world \u00bb) /* hello, world * note that the quotes aren\u2019t regular spaces */ setTheTestValueTo Sets __the_test_value__ to the str value given in the meta value If no value is given, it sets it to None .","title":"Metas"},{"location":"1.1/Language/15metas/#metas","text":"Note Added in 0.19.0-beta Metas are a way to use other (or old) functionnalities in Nougaro. They\u2019re used by adding @meta metaName or @meta metaName value at the beginning of a file or in an interactive shell. Note that, instead of @ , you can use any of those prefixes: #@ , %@ , @@ , -@ , $@ .","title":"Metas"},{"location":"1.1/Language/15metas/#appendnoneonbreak","text":"Note Added in 0.20.0-beta If enabled, this meta forces a break statement to append None to the list returned by the loop .","title":"appendNoneOnBreak"},{"location":"1.1/Language/15metas/#appendnoneoncontinue","text":"Note Added in 0.20.0-beta If enabled, this meta forces a continue statement to append None to the list returned by the loop .","title":"appendNoneOnContinue"},{"location":"1.1/Language/15metas/#legacyabs","text":"The legacyAbs meta lets you use the old syntax (in the prototype-1 version) for absolute value, which is |...| . However, this meta disables the bitwise or operation . Example: @meta legacyAbs print(|-1|) # 1 var a = 12 print(|-a|) # 12","title":"legacyAbs"},{"location":"1.1/Language/15metas/#nbspbetweenfrenchguillemets","text":"The nbspBetweenFrenchGuillemets meta requires you, if you use the french string quotes ( \u00ab\u00bb ), to put a no-break space (or a narrow no-break space) after the \u00ab and before the \u00bb . Example: @meta nbspBetweenFrenchGuillemets print(\u00ab hello, world \u00bb) /* hello, world * note that the quotes aren\u2019t regular spaces */","title":"nbspBetweenFrenchGuillemets"},{"location":"1.1/Language/15metas/#setthetestvalueto","text":"Sets __the_test_value__ to the str value given in the meta value If no value is given, it sets it to None .","title":"setTheTestValueTo"},{"location":"1.1/Language/16dollar_print/","text":"Dollar-print syntax The dollar-print syntax is the following: $indentifier It checks if identifier exists, and if so, it prits it. Otherwise, it prints $identifier . If no identifier is given, it prints $ .","title":"Dollar-print syntax"},{"location":"1.1/Language/16dollar_print/#dollar-print-syntax","text":"The dollar-print syntax is the following: $indentifier It checks if identifier exists, and if so, it prits it. Otherwise, it prints $identifier . If no identifier is given, it prints $ .","title":"Dollar-print syntax"},{"location":"1.1/stdlib/01builtin-variables/","text":"List of built-in variables Useful ones __args__ Note Added in 0.16.0-beta List of the command line arguments (type string). Examples (assuming your Nougaro command is noug ): noug -c \"print(__args__)\" -t d 78876876 -v tth prints [\"-c\", \"-t\", \"d\", \"78876876\", \"-v\", \"tth\"] noug examples/args.noug -t d 78876876 -v tth prints [\"examples/args.noug\", \"-t\", \"d\", \"78876876\", \"-v\", \"tth\"] (check out the contents of args.noug ) noug -c \"print(__args__)\" prints [\"-c\"] entering the shell then entering print(__args__) prints [] Nougaro informations Note This section is duplicated in this file __noug_version__ : string of the Nougaro version (e.g. \"0.15.0-beta\".) You can use the noug_version lib to have better informations. __data_version__ : the Nougaro data version, an internal version keeping track of changes in the config file directory structure __version_id__ : an ID increased at least once per version __python_version__ : string of the Python version (e.g. \"3.10.5\") __noug_dir__ : string of the absolute path of the directory where shell.(py/exe) is located. May be used with file I/O read and write statements. OS informations __os_name__ : name of the Operating System (e.g. \"Windows\", \"Linux\", \"Darwin\" \u2013 for macOS \u2013, \"Java\" \u2013 for Jython \u2013, \u2026) __os_release__ : release of the OS (e.g. \"10\" for Windows 10, \"Vista\" for Windows Vista.) __os_version__ : version of the OS (e.g. \"10.0.19044\" for Windows 10 build 19044.) Examples print(\"You use Nougaro version \" + __noug_version__ + \", interpreted with Python \" + __python_version__) print(\"You use \" + __os_name__ + \" \" + __os_release__ + \" \" + __os_version__) On the Jean Dubois' old computer, under Windows 10 21H2, it returns: You use Nougaro version alpha 0.8.1, interpreted with Python 3.10.5 You use Windows 10 10.0.19044 And under his Linux: You use nougaro version beta 0.14, interpreted with Python 3.11.4 You use Linux 6.2.0-27-generic #28-Ubuntu SMP PREEMPT_DYNAMIC Wed Jul 12 22:39:51 UTC 2023 Note that this code is in example.noug","title":"List of built-in variables"},{"location":"1.1/stdlib/01builtin-variables/#list-of-built-in-variables","text":"","title":"List of built-in variables"},{"location":"1.1/stdlib/01builtin-variables/#useful-ones","text":"","title":"Useful ones"},{"location":"1.1/stdlib/01builtin-variables/#__args__","text":"Note Added in 0.16.0-beta List of the command line arguments (type string). Examples (assuming your Nougaro command is noug ): noug -c \"print(__args__)\" -t d 78876876 -v tth prints [\"-c\", \"-t\", \"d\", \"78876876\", \"-v\", \"tth\"] noug examples/args.noug -t d 78876876 -v tth prints [\"examples/args.noug\", \"-t\", \"d\", \"78876876\", \"-v\", \"tth\"] (check out the contents of args.noug ) noug -c \"print(__args__)\" prints [\"-c\"] entering the shell then entering print(__args__) prints []","title":"__args__"},{"location":"1.1/stdlib/01builtin-variables/#nougaro-informations","text":"Note This section is duplicated in this file __noug_version__ : string of the Nougaro version (e.g. \"0.15.0-beta\".) You can use the noug_version lib to have better informations. __data_version__ : the Nougaro data version, an internal version keeping track of changes in the config file directory structure __version_id__ : an ID increased at least once per version __python_version__ : string of the Python version (e.g. \"3.10.5\") __noug_dir__ : string of the absolute path of the directory where shell.(py/exe) is located. May be used with file I/O read and write statements.","title":"Nougaro informations"},{"location":"1.1/stdlib/01builtin-variables/#os-informations","text":"__os_name__ : name of the Operating System (e.g. \"Windows\", \"Linux\", \"Darwin\" \u2013 for macOS \u2013, \"Java\" \u2013 for Jython \u2013, \u2026) __os_release__ : release of the OS (e.g. \"10\" for Windows 10, \"Vista\" for Windows Vista.) __os_version__ : version of the OS (e.g. \"10.0.19044\" for Windows 10 build 19044.)","title":"OS informations"},{"location":"1.1/stdlib/01builtin-variables/#examples","text":"print(\"You use Nougaro version \" + __noug_version__ + \", interpreted with Python \" + __python_version__) print(\"You use \" + __os_name__ + \" \" + __os_release__ + \" \" + __os_version__) On the Jean Dubois' old computer, under Windows 10 21H2, it returns: You use Nougaro version alpha 0.8.1, interpreted with Python 3.10.5 You use Windows 10 10.0.19044 And under his Linux: You use nougaro version beta 0.14, interpreted with Python 3.11.4 You use Linux 6.2.0-27-generic #28-Ubuntu SMP PREEMPT_DYNAMIC Wed Jul 12 22:39:51 UTC 2023 Note that this code is in example.noug","title":"Examples"},{"location":"1.1/stdlib/02builtin-functions/","text":"List of built-in functions Note In this page, type of parameters are noted using the param: type syntax (type can eventually be Any ), and optional parameters are noted between <> and their default value are specified with = . Also, *args tells that this function can take any number of arguments. Input/Output print Syntax: print(str: str) . Prints str in console. Returns None. Example: print(\"hello, world!\") . print_ret Syntax: print_ret(str: str) . Prints str in console and returns it. Example: print_ret(\"hello, world!\") . print_in_red Syntax: print_in_red(str: str) . Prints str in red in console. Returns None. Example: print_in_red(\"Error: this error is RED\") . print_in_red_ret Syntax: print_in_red_ret(str: str) . Prints str in red in console and returns it. Example: print_in_red_ret(\"Error: this error is RED and returned\") print_in_green Syntax: print_in_green(str: str) . Prints str in green in console. Returns None. Example: print_in_green(\"Info: this info is GREEN\") . print_in_green_ret Syntax: print_in_green_ret(str: str) . Prints str in green in console and returns it. Example: print_in_green_ret(\"Info: this info is GREEN and returned\") input Syntax: input(<text_to_display: str = \"\">) . Inputs a str. If text_to_display is specified, it is printed as a prompt. input_int Syntax: input_int(<text_to_display: str = \"\">) . Inputs an int. If text_to_display is specified, it is printed as a prompt. input_num Syntax: input_num(<text_to_display: str = \"\">) . Inputs an int or a float. If text_to_display is specified, it is printed as a prompt. Types Note Python isinstance() returns True if value is an object of the given type. type Syntax: type(value: Any) Returns a str of the internal type of the value. It can be str , int , float , list , func , module , ... is_int Syntax: is_int(value: Any) Returns True if value is an integer , False if it is not. Corresponds to isinstance(value, int) . is_float Syntax: is_float(value: Any) Returns True if value is a float , False if it is not. Corresponds to isinstance(value, float) . is_num Syntax: is_num(value: Any) Returns True if value is a number , False if it is not. Corresponds to isinstance(value, float) or isinstance(value, int) . is_str Syntax: is_str(value: Any) Returns True if value is a string , False if it is not. Corresponds to isinstance(value, str) . is_list Syntax: is_list(value: Any) Returns True if value is a list , False if it is not. Corresponds to isinstance(value, list) . is_func Syntax: is_func(value: Any) Returns True if value is a function , False if it is not. Corresponds to isinstance(value, BaseFunction) where BaseFunction is function, method and builtin function. is_module Syntax: is_module(value: Any) Returns True if value is a module , False if it is not. Corresponds to isinstance(value, module) . Example: import math; is_module(math) will be True , but is_module(3.2) will be False . is_none Syntax: is_none(value: Any) Returns True if value is None , False if it is not. Corresponds to isinstance(value, NoneValue) or value is None . is_constructor Added in 0.20.0-beta Syntax: is_constructor(value: Any) Returns True if value is a constructor , False if it is not. Corresponds to isinstance(value, Constructor) . is_object Added in 0.20.0-beta Syntax: is_object(value: Any) Returns True if value is an object , False if it is not. Corresponds to isinstance(value, object) . Note: in Nougaro, everything is not an object! Type conversions str Syntax: str(value: Any) Converts value to string (may return an error). int Syntax: int(value: Any) Converts value to int (may return an error). float Syntax: float(value: Any) Converts value to float (may return an error). list Syntax: list(value: Any) Converts value to list (may return an error). String and lists operators upper Syntax: upper(value: str) Returns upper-cased string. Example: upper('nougaro') returns 'NOUGARO' . lower Syntax: lower(value: str) Returns lower-cased string. Example: lower('NOUGARO') returns 'nougaro' . split Syntax: split(value: str, <char: str = \" \">) Returns splitted string. For example, split('a b c') returns ['a', 'b', 'c'] ; split('a b c', 'b') returns ['a ', ' c'] . startswith Syntax: startswith(value: str, substring: str) Returns True if value starts with substring . Example: \"nougaro\" starts with \"noug\" , but \"canal du midi\" does not start with \"minimes\" . endswith Syntax: endswith(value: str, substring: str) Returns True if value ends with substring . Example: \"nougaro\" ends with \"garo\" , but \"canal du midi\" does not end with \"minimes\" . len Syntax: len(value: list | str) Returns the number of elements in a list (i.e. its length), or the number of chars in a str. reverse Syntax: reverse(value: list | str) Reverses list or string value by reference and returns the result. Example: reverse([1, 2, 3]) is [3, 2, 1] . append Syntax: append(list: list, value: Any) Appends value at the end of the list. Returns a list. If the list is a variable, edits the variable. pop Syntax: pop(list: list, <index: int = -1>) : Deletes value at given index. Returns the popped element. If the list is a variable, edits the variable. If index is not given, the last element of the list is popped. insert Syntax: insert(list: list, value: Any, <index: int = -1>) Inserts value at the given index in the list. replace Syntax: replace(list: list, index: int, value: Any) Replaces value at the given index in the list. extend Syntax: extend(list1: list, list2: list, <remove_duplicates: int = False>) Appends to list1 the elements of list2 . Returns list1 . If list1 is a variable, edits the variable. If remove_duplicates is True, removes the list2 elements already in list1 before extending. get Syntax: get(list: list, index: int) Returns the element of the list at the given index. max Syntax: max(list: list, <ignore_not_num: int = False>) Returns the maximum element of the list. Ignores elements that are not numbers if ignore_not_num is True , otherwise crashes if such element exists. min Syntax: min(list: list, <ignore_not_num: int = False>) Returns the minimum element of the list. Ignores elements that are not numbers if ignore_not_num is True , otherwise crashes if such element exists. sort Syntax: sort(value: list, <mode: str = \"timsort\">) Sorts list value according to mode mode . Available modes are: timsort (default), stalin , sleep , miracle and panic . timsort is Python\u2019s default algorithm stalin sends to gulag values that are not sorted (i.e. pop them from the list). Example: [1, 4, 3, 7, 6, 10, 2, 5, 23] will be sorted as [1, 4, 7, 10, 23] . sleep sort take only a list of positive integers. It starts as many threads as elements in the list, and each thread waits for as much seconds as the element. For instance, when the list [5, 2, 3, 0] is passed in sleepsort, it starts by launching 4 threads that wait for 5, 2, 3 and 0 seconds. When a thread finishes to wait, it append its element to the list. Use the mode sleep-verbose to see what\u2019s happening. miracle sort literally waits for a miracle. It checks if the list is sorted, and if it is not, it checks again. If a cosmic ray (or another miracle ) flips the right bits in your RAM so the list is sorted, miraclesort will return the sorted list. panic sort checks if the list is sorted. If so, it returns it. If the list is not sorted, this causes an illegal hardware instruction (Unix and GNU/Linux) or a segfault (Windows). Number operators round Syntax: round(number: int | float, <n_digits: int = 0>) Rounds number to the closest number with n_digits decimals. n_digits may be 0 or negative, in which case the returned type is int . Changed in 0.22.0-beta The round built-in function previously returned int only when n_digits was 0 (now it is the case when n_digits \u2a7d 0) Characters and Unicode Note There\u2019s more in the unicodedata module. ord Syntax: ord(c: str) Returns an integer representing the Unicode code point of that c . c is a string with only one character. Ex: ord('a') returns 97 and ord('\u20ac') returns 8364 . chr Syntax: chr(i: int) Returns the string representing the character whose Unicode code point is the integer i . For example, chr(97) returns the string 'a' , and chr(8364) returns the string '\u20ac' . License __gpl__ Syntax: __gpl__(<print_in_term: int = False>) If print_in_term is True , prints the General Public License 3.0 in the terminal. Otherwise, it opens the GPL in the default system program. Files __path_exists__ Syntax: path_exists(path: str) Returns True ( 1 ) if the path exists, False ( 0 ) otherwise. Technical exit Syntax: exit(<stop_code: int | str = 0>) Just quits the interpreter. clear Syntax: clear() Clears the screen. Returns None . void Syntax: void(*args) Does nothing. Returns None . run Syntax: run(file_name: str) Executes the code in the file file_name . example Syntax: example(<example_name: str | None = None>, <return_example_value: int = False>) Executes the code in the file examples/(example_name).noug . If example_name is None , executes the code in the file example.noug . If return_example_value is True , returns the list value from the example execution. system_call Warning This function may be dangerous, because any system command can be executed. Syntax: system_call(cmd: str) Calls cmd . Prints the result of the command and returnt the stop code as str . __python__ Warning This function may be dangerous, because any Python code can be executed. Syntax: __python__(source: str) Runs Python\u2019s eval(source) . __is_keyword__ Syntax: __is_keyword__(word: str) Check if word is a valid Nougaro keyword . __is_valid_token_type__ Syntax: __is_valid_token_type__(tok_type: str) Checks if tok_type is a valid Nougaro token type, such as 'EE' or 'BITWISENOT'. __test__ Syntax: __test__(<should_print_ok: int = False>, <should_i_return: int = False>) Executes the test file for the Nougaro interpreter. If should_print_ok is True , prints \u201cOK\u201d each times a test was succesful. If should_i_return is true, returns the value of the interpreted file. __py_type__ Syntax: __py_type__(value) Returns the string of Python\u2019s type(value) . For instance, __py_type__(__py_type__) is \"<class 'src.runtime.values.functions.builtin_function.BuiltInFunction'>\" __how_many_lines_of_code__ Syntax: __how_many_lines_of_code__(<print_details: Any = True>) Lets you know how many lines of code there are in Nougaro. If print_details is True, details how many lines of code they are in each file. Mathematical functions Please refer to Math module .","title":"List of built-in functions"},{"location":"1.1/stdlib/02builtin-functions/#list-of-built-in-functions","text":"Note In this page, type of parameters are noted using the param: type syntax (type can eventually be Any ), and optional parameters are noted between <> and their default value are specified with = . Also, *args tells that this function can take any number of arguments.","title":"List of built-in functions"},{"location":"1.1/stdlib/02builtin-functions/#inputoutput","text":"","title":"Input/Output"},{"location":"1.1/stdlib/02builtin-functions/#print","text":"Syntax: print(str: str) . Prints str in console. Returns None. Example: print(\"hello, world!\") .","title":"print"},{"location":"1.1/stdlib/02builtin-functions/#print_ret","text":"Syntax: print_ret(str: str) . Prints str in console and returns it. Example: print_ret(\"hello, world!\") .","title":"print_ret"},{"location":"1.1/stdlib/02builtin-functions/#print_in_red","text":"Syntax: print_in_red(str: str) . Prints str in red in console. Returns None. Example: print_in_red(\"Error: this error is RED\") .","title":"print_in_red"},{"location":"1.1/stdlib/02builtin-functions/#print_in_red_ret","text":"Syntax: print_in_red_ret(str: str) . Prints str in red in console and returns it. Example: print_in_red_ret(\"Error: this error is RED and returned\")","title":"print_in_red_ret"},{"location":"1.1/stdlib/02builtin-functions/#print_in_green","text":"Syntax: print_in_green(str: str) . Prints str in green in console. Returns None. Example: print_in_green(\"Info: this info is GREEN\") .","title":"print_in_green"},{"location":"1.1/stdlib/02builtin-functions/#print_in_green_ret","text":"Syntax: print_in_green_ret(str: str) . Prints str in green in console and returns it. Example: print_in_green_ret(\"Info: this info is GREEN and returned\")","title":"print_in_green_ret"},{"location":"1.1/stdlib/02builtin-functions/#input","text":"Syntax: input(<text_to_display: str = \"\">) . Inputs a str. If text_to_display is specified, it is printed as a prompt.","title":"input"},{"location":"1.1/stdlib/02builtin-functions/#input_int","text":"Syntax: input_int(<text_to_display: str = \"\">) . Inputs an int. If text_to_display is specified, it is printed as a prompt.","title":"input_int"},{"location":"1.1/stdlib/02builtin-functions/#input_num","text":"Syntax: input_num(<text_to_display: str = \"\">) . Inputs an int or a float. If text_to_display is specified, it is printed as a prompt.","title":"input_num"},{"location":"1.1/stdlib/02builtin-functions/#types","text":"Note Python isinstance() returns True if value is an object of the given type.","title":"Types"},{"location":"1.1/stdlib/02builtin-functions/#type","text":"Syntax: type(value: Any) Returns a str of the internal type of the value. It can be str , int , float , list , func , module , ...","title":"type"},{"location":"1.1/stdlib/02builtin-functions/#is_int","text":"Syntax: is_int(value: Any) Returns True if value is an integer , False if it is not. Corresponds to isinstance(value, int) .","title":"is_int"},{"location":"1.1/stdlib/02builtin-functions/#is_float","text":"Syntax: is_float(value: Any) Returns True if value is a float , False if it is not. Corresponds to isinstance(value, float) .","title":"is_float"},{"location":"1.1/stdlib/02builtin-functions/#is_num","text":"Syntax: is_num(value: Any) Returns True if value is a number , False if it is not. Corresponds to isinstance(value, float) or isinstance(value, int) .","title":"is_num"},{"location":"1.1/stdlib/02builtin-functions/#is_str","text":"Syntax: is_str(value: Any) Returns True if value is a string , False if it is not. Corresponds to isinstance(value, str) .","title":"is_str"},{"location":"1.1/stdlib/02builtin-functions/#is_list","text":"Syntax: is_list(value: Any) Returns True if value is a list , False if it is not. Corresponds to isinstance(value, list) .","title":"is_list"},{"location":"1.1/stdlib/02builtin-functions/#is_func","text":"Syntax: is_func(value: Any) Returns True if value is a function , False if it is not. Corresponds to isinstance(value, BaseFunction) where BaseFunction is function, method and builtin function.","title":"is_func"},{"location":"1.1/stdlib/02builtin-functions/#is_module","text":"Syntax: is_module(value: Any) Returns True if value is a module , False if it is not. Corresponds to isinstance(value, module) . Example: import math; is_module(math) will be True , but is_module(3.2) will be False .","title":"is_module"},{"location":"1.1/stdlib/02builtin-functions/#is_none","text":"Syntax: is_none(value: Any) Returns True if value is None , False if it is not. Corresponds to isinstance(value, NoneValue) or value is None .","title":"is_none"},{"location":"1.1/stdlib/02builtin-functions/#is_constructor","text":"Added in 0.20.0-beta Syntax: is_constructor(value: Any) Returns True if value is a constructor , False if it is not. Corresponds to isinstance(value, Constructor) .","title":"is_constructor"},{"location":"1.1/stdlib/02builtin-functions/#is_object","text":"Added in 0.20.0-beta Syntax: is_object(value: Any) Returns True if value is an object , False if it is not. Corresponds to isinstance(value, object) . Note: in Nougaro, everything is not an object!","title":"is_object"},{"location":"1.1/stdlib/02builtin-functions/#type-conversions","text":"","title":"Type conversions"},{"location":"1.1/stdlib/02builtin-functions/#str","text":"Syntax: str(value: Any) Converts value to string (may return an error).","title":"str"},{"location":"1.1/stdlib/02builtin-functions/#int","text":"Syntax: int(value: Any) Converts value to int (may return an error).","title":"int"},{"location":"1.1/stdlib/02builtin-functions/#float","text":"Syntax: float(value: Any) Converts value to float (may return an error).","title":"float"},{"location":"1.1/stdlib/02builtin-functions/#list","text":"Syntax: list(value: Any) Converts value to list (may return an error).","title":"list"},{"location":"1.1/stdlib/02builtin-functions/#string-and-lists-operators","text":"","title":"String and lists operators"},{"location":"1.1/stdlib/02builtin-functions/#upper","text":"Syntax: upper(value: str) Returns upper-cased string. Example: upper('nougaro') returns 'NOUGARO' .","title":"upper"},{"location":"1.1/stdlib/02builtin-functions/#lower","text":"Syntax: lower(value: str) Returns lower-cased string. Example: lower('NOUGARO') returns 'nougaro' .","title":"lower"},{"location":"1.1/stdlib/02builtin-functions/#split","text":"Syntax: split(value: str, <char: str = \" \">) Returns splitted string. For example, split('a b c') returns ['a', 'b', 'c'] ; split('a b c', 'b') returns ['a ', ' c'] .","title":"split"},{"location":"1.1/stdlib/02builtin-functions/#startswith","text":"Syntax: startswith(value: str, substring: str) Returns True if value starts with substring . Example: \"nougaro\" starts with \"noug\" , but \"canal du midi\" does not start with \"minimes\" .","title":"startswith"},{"location":"1.1/stdlib/02builtin-functions/#endswith","text":"Syntax: endswith(value: str, substring: str) Returns True if value ends with substring . Example: \"nougaro\" ends with \"garo\" , but \"canal du midi\" does not end with \"minimes\" .","title":"endswith"},{"location":"1.1/stdlib/02builtin-functions/#len","text":"Syntax: len(value: list | str) Returns the number of elements in a list (i.e. its length), or the number of chars in a str.","title":"len"},{"location":"1.1/stdlib/02builtin-functions/#reverse","text":"Syntax: reverse(value: list | str) Reverses list or string value by reference and returns the result. Example: reverse([1, 2, 3]) is [3, 2, 1] .","title":"reverse"},{"location":"1.1/stdlib/02builtin-functions/#append","text":"Syntax: append(list: list, value: Any) Appends value at the end of the list. Returns a list. If the list is a variable, edits the variable.","title":"append"},{"location":"1.1/stdlib/02builtin-functions/#pop","text":"Syntax: pop(list: list, <index: int = -1>) : Deletes value at given index. Returns the popped element. If the list is a variable, edits the variable. If index is not given, the last element of the list is popped.","title":"pop"},{"location":"1.1/stdlib/02builtin-functions/#insert","text":"Syntax: insert(list: list, value: Any, <index: int = -1>) Inserts value at the given index in the list.","title":"insert"},{"location":"1.1/stdlib/02builtin-functions/#replace","text":"Syntax: replace(list: list, index: int, value: Any) Replaces value at the given index in the list.","title":"replace"},{"location":"1.1/stdlib/02builtin-functions/#extend","text":"Syntax: extend(list1: list, list2: list, <remove_duplicates: int = False>) Appends to list1 the elements of list2 . Returns list1 . If list1 is a variable, edits the variable. If remove_duplicates is True, removes the list2 elements already in list1 before extending.","title":"extend"},{"location":"1.1/stdlib/02builtin-functions/#get","text":"Syntax: get(list: list, index: int) Returns the element of the list at the given index.","title":"get"},{"location":"1.1/stdlib/02builtin-functions/#max","text":"Syntax: max(list: list, <ignore_not_num: int = False>) Returns the maximum element of the list. Ignores elements that are not numbers if ignore_not_num is True , otherwise crashes if such element exists.","title":"max"},{"location":"1.1/stdlib/02builtin-functions/#min","text":"Syntax: min(list: list, <ignore_not_num: int = False>) Returns the minimum element of the list. Ignores elements that are not numbers if ignore_not_num is True , otherwise crashes if such element exists.","title":"min"},{"location":"1.1/stdlib/02builtin-functions/#sort","text":"Syntax: sort(value: list, <mode: str = \"timsort\">) Sorts list value according to mode mode . Available modes are: timsort (default), stalin , sleep , miracle and panic . timsort is Python\u2019s default algorithm stalin sends to gulag values that are not sorted (i.e. pop them from the list). Example: [1, 4, 3, 7, 6, 10, 2, 5, 23] will be sorted as [1, 4, 7, 10, 23] . sleep sort take only a list of positive integers. It starts as many threads as elements in the list, and each thread waits for as much seconds as the element. For instance, when the list [5, 2, 3, 0] is passed in sleepsort, it starts by launching 4 threads that wait for 5, 2, 3 and 0 seconds. When a thread finishes to wait, it append its element to the list. Use the mode sleep-verbose to see what\u2019s happening. miracle sort literally waits for a miracle. It checks if the list is sorted, and if it is not, it checks again. If a cosmic ray (or another miracle ) flips the right bits in your RAM so the list is sorted, miraclesort will return the sorted list. panic sort checks if the list is sorted. If so, it returns it. If the list is not sorted, this causes an illegal hardware instruction (Unix and GNU/Linux) or a segfault (Windows).","title":"sort"},{"location":"1.1/stdlib/02builtin-functions/#number-operators","text":"","title":"Number operators"},{"location":"1.1/stdlib/02builtin-functions/#round","text":"Syntax: round(number: int | float, <n_digits: int = 0>) Rounds number to the closest number with n_digits decimals. n_digits may be 0 or negative, in which case the returned type is int . Changed in 0.22.0-beta The round built-in function previously returned int only when n_digits was 0 (now it is the case when n_digits \u2a7d 0)","title":"round"},{"location":"1.1/stdlib/02builtin-functions/#characters-and-unicode","text":"Note There\u2019s more in the unicodedata module.","title":"Characters and Unicode"},{"location":"1.1/stdlib/02builtin-functions/#ord","text":"Syntax: ord(c: str) Returns an integer representing the Unicode code point of that c . c is a string with only one character. Ex: ord('a') returns 97 and ord('\u20ac') returns 8364 .","title":"ord"},{"location":"1.1/stdlib/02builtin-functions/#chr","text":"Syntax: chr(i: int) Returns the string representing the character whose Unicode code point is the integer i . For example, chr(97) returns the string 'a' , and chr(8364) returns the string '\u20ac' .","title":"chr"},{"location":"1.1/stdlib/02builtin-functions/#license","text":"","title":"License"},{"location":"1.1/stdlib/02builtin-functions/#__gpl__","text":"Syntax: __gpl__(<print_in_term: int = False>) If print_in_term is True , prints the General Public License 3.0 in the terminal. Otherwise, it opens the GPL in the default system program.","title":"__gpl__"},{"location":"1.1/stdlib/02builtin-functions/#files","text":"","title":"Files"},{"location":"1.1/stdlib/02builtin-functions/#__path_exists__","text":"Syntax: path_exists(path: str) Returns True ( 1 ) if the path exists, False ( 0 ) otherwise.","title":"__path_exists__"},{"location":"1.1/stdlib/02builtin-functions/#technical","text":"","title":"Technical"},{"location":"1.1/stdlib/02builtin-functions/#exit","text":"Syntax: exit(<stop_code: int | str = 0>) Just quits the interpreter.","title":"exit"},{"location":"1.1/stdlib/02builtin-functions/#clear","text":"Syntax: clear() Clears the screen. Returns None .","title":"clear"},{"location":"1.1/stdlib/02builtin-functions/#void","text":"Syntax: void(*args) Does nothing. Returns None .","title":"void"},{"location":"1.1/stdlib/02builtin-functions/#run","text":"Syntax: run(file_name: str) Executes the code in the file file_name .","title":"run"},{"location":"1.1/stdlib/02builtin-functions/#example","text":"Syntax: example(<example_name: str | None = None>, <return_example_value: int = False>) Executes the code in the file examples/(example_name).noug . If example_name is None , executes the code in the file example.noug . If return_example_value is True , returns the list value from the example execution.","title":"example"},{"location":"1.1/stdlib/02builtin-functions/#system_call","text":"Warning This function may be dangerous, because any system command can be executed. Syntax: system_call(cmd: str) Calls cmd . Prints the result of the command and returnt the stop code as str .","title":"system_call"},{"location":"1.1/stdlib/02builtin-functions/#__python__","text":"Warning This function may be dangerous, because any Python code can be executed. Syntax: __python__(source: str) Runs Python\u2019s eval(source) .","title":"__python__"},{"location":"1.1/stdlib/02builtin-functions/#__is_keyword__","text":"Syntax: __is_keyword__(word: str) Check if word is a valid Nougaro keyword .","title":"__is_keyword__"},{"location":"1.1/stdlib/02builtin-functions/#__is_valid_token_type__","text":"Syntax: __is_valid_token_type__(tok_type: str) Checks if tok_type is a valid Nougaro token type, such as 'EE' or 'BITWISENOT'.","title":"__is_valid_token_type__"},{"location":"1.1/stdlib/02builtin-functions/#__test__","text":"Syntax: __test__(<should_print_ok: int = False>, <should_i_return: int = False>) Executes the test file for the Nougaro interpreter. If should_print_ok is True , prints \u201cOK\u201d each times a test was succesful. If should_i_return is true, returns the value of the interpreted file.","title":"__test__"},{"location":"1.1/stdlib/02builtin-functions/#__py_type__","text":"Syntax: __py_type__(value) Returns the string of Python\u2019s type(value) . For instance, __py_type__(__py_type__) is \"<class 'src.runtime.values.functions.builtin_function.BuiltInFunction'>\"","title":"__py_type__"},{"location":"1.1/stdlib/02builtin-functions/#__how_many_lines_of_code__","text":"Syntax: __how_many_lines_of_code__(<print_details: Any = True>) Lets you know how many lines of code there are in Nougaro. If print_details is True, details how many lines of code they are in each file.","title":"__how_many_lines_of_code__"},{"location":"1.1/stdlib/02builtin-functions/#mathematical-functions","text":"Please refer to Math module .","title":"Mathematical functions"},{"location":"1.1/stdlib/modules/","text":"Modules Modules allow you to spend less time coding, and often implement things that would be usually undoable in Nougaro. You can import a module using the import keyword. Here is the list of available Modules in Nougaro: Debug Hello (just prints \u201cHello, world!\u201d when imported) Lorem Math Noug Version Random Statistics Time Unicodedata Webbrowser","title":"Modules"},{"location":"1.1/stdlib/modules/#modules","text":"Modules allow you to spend less time coding, and often implement things that would be usually undoable in Nougaro. You can import a module using the import keyword. Here is the list of available Modules in Nougaro: Debug Hello (just prints \u201cHello, world!\u201d when imported) Lorem Math Noug Version Random Statistics Time Unicodedata Webbrowser","title":"Modules"},{"location":"1.1/stdlib/modules/debug/","text":"Debug Source code Debug is a lib that contains some debugging tools. Constants debug.is_debug_enabled : 1 if DEBUG mode is enabled, else 0 debug.should_print_context : 1 if PRINT CONTEXT debug option is enabled, else 0 debug.should_print_time (new in 0.20.0-beta): 1 if PRINT TIME debug option is enabled, else 0 Functions debug.debug_mode_enable Syntax: debug.debug_mode_enable Enables DEBUG mode. debug.enable Alias for debug.debug_mode_enable debug.debug_mode_disable Syntax: debug.debug_mode_disable Disables DEBUG mode. debug.disable Alias for debug.debug_mode_disable debug.print_context Syntax: debug.print_context Enables PRINT CONTEXT debug option. debug.stop_print_context Syntax: debug.stop_print_context Disables PRINT CONTEXT debug option. debug.print_time Added in 0.20.0-beta Syntax: debug.print_time Enables PRINT TIME debug option. debug.stop_print_time Added in 0.20.0-beta Syntax: debug.stop_print_time Disables PRINT TIME debug option. debug.enable_all Changed in 0.20.0-beta Now also enables PRINT TIME debug option. Syntax: debug.enable_all Enables DEBUG mode with all its options debug.disable_all Changed in 0.20.0-beta Now also disables PRINT TIME debug option. Syntax: debug.disable_all Disables DEBUG mode and all its options.","title":"Debug"},{"location":"1.1/stdlib/modules/debug/#debug","text":"Source code Debug is a lib that contains some debugging tools.","title":"Debug"},{"location":"1.1/stdlib/modules/debug/#constants","text":"debug.is_debug_enabled : 1 if DEBUG mode is enabled, else 0 debug.should_print_context : 1 if PRINT CONTEXT debug option is enabled, else 0 debug.should_print_time (new in 0.20.0-beta): 1 if PRINT TIME debug option is enabled, else 0","title":"Constants"},{"location":"1.1/stdlib/modules/debug/#functions","text":"","title":"Functions"},{"location":"1.1/stdlib/modules/debug/#debugdebug_mode_enable","text":"Syntax: debug.debug_mode_enable Enables DEBUG mode.","title":"debug.debug_mode_enable"},{"location":"1.1/stdlib/modules/debug/#debugenable","text":"Alias for debug.debug_mode_enable","title":"debug.enable"},{"location":"1.1/stdlib/modules/debug/#debugdebug_mode_disable","text":"Syntax: debug.debug_mode_disable Disables DEBUG mode.","title":"debug.debug_mode_disable"},{"location":"1.1/stdlib/modules/debug/#debugdisable","text":"Alias for debug.debug_mode_disable","title":"debug.disable"},{"location":"1.1/stdlib/modules/debug/#debugprint_context","text":"Syntax: debug.print_context Enables PRINT CONTEXT debug option.","title":"debug.print_context"},{"location":"1.1/stdlib/modules/debug/#debugstop_print_context","text":"Syntax: debug.stop_print_context Disables PRINT CONTEXT debug option.","title":"debug.stop_print_context"},{"location":"1.1/stdlib/modules/debug/#debugprint_time","text":"Added in 0.20.0-beta Syntax: debug.print_time Enables PRINT TIME debug option.","title":"debug.print_time"},{"location":"1.1/stdlib/modules/debug/#debugstop_print_time","text":"Added in 0.20.0-beta Syntax: debug.stop_print_time Disables PRINT TIME debug option.","title":"debug.stop_print_time"},{"location":"1.1/stdlib/modules/debug/#debugenable_all","text":"Changed in 0.20.0-beta Now also enables PRINT TIME debug option. Syntax: debug.enable_all Enables DEBUG mode with all its options","title":"debug.enable_all"},{"location":"1.1/stdlib/modules/debug/#debugdisable_all","text":"Changed in 0.20.0-beta Now also disables PRINT TIME debug option. Syntax: debug.disable_all Disables DEBUG mode and all its options.","title":"debug.disable_all"},{"location":"1.1/stdlib/modules/lorem/","text":"Lorem Source code Lorem is a lib to generate Lorem Ipsum texts (dummy texts). Function lorem.ipsum Syntax: lorem.ipsum(paragraphs: int) Generate a random Lorem Ipsum text (dummy text) with as many paragraphs as specified in paragraphs .","title":"Lorem"},{"location":"1.1/stdlib/modules/lorem/#lorem","text":"Source code Lorem is a lib to generate Lorem Ipsum texts (dummy texts).","title":"Lorem"},{"location":"1.1/stdlib/modules/lorem/#function","text":"","title":"Function"},{"location":"1.1/stdlib/modules/lorem/#loremipsum","text":"Syntax: lorem.ipsum(paragraphs: int) Generate a random Lorem Ipsum text (dummy text) with as many paragraphs as specified in paragraphs .","title":"lorem.ipsum"},{"location":"1.1/stdlib/modules/math/","text":"Math Source code The math module can be imported with the statement import math . The math module is used to do math. To do statistics, use the statistics module. Constants math.pi : Pi . \\pi = 3.141592653589793 math.tau : Tau . \\tau = 6.283185307179586 math.sqrt_pi : square root of pi ( math.sqrt(math.pi) ). \\sqrt\\pi = 1.7724538509055159 math.sqrt_tau : square root of tau ( math.sqrt(math.tau) ). \\sqrt\\tau = 2.5066282746310002 math.e : Euler's number . e = 2.718281828459045 Functions math.sqrt Syntax: math.sqrt(n) Returns \\sqrt{n} (square root of n ), n \\in \\mathbb{R}_+ math.isqrt Syntax: math.isqrt(n) Returns \\left\\lfloor\\sqrt{n}\\right\\rfloor (integer square root of n ), n \\in \\mathbb{N} math.root Syntax: math.root(n, k) Returns the \\sqrt[k]{n} ( k -th root of n ), n \\in \\mathbb{R}_+, k \\in \\mathbb{R} math.iroot Syntax: math.iroot(n, k) Returns \\left\\lfloor\\sqrt[k]{n}\\right\\rfloor (integer k -th root of n ), n \\in \\mathbb{R}_+, k \\in \\mathbb{R} math.degrees Syntax: math.degrees(angle) Transforms a radian angle to a degree angle. \\verb|angle| \\in \\mathbb{R} math.radians Syntax: math.radians(angle) Transform a degree angle to a radian angle. \\verb|angle| \\in \\mathbb{R} math.sin Syntax: math.sin(angle) Returns sine of an angle in radians. \\verb|angle| \\in \\mathbb{R} math.cos Syntax: math.cos(angle) Returns cosine of an angle in radians. \\verb|angle| \\in \\mathbb{R} math.tan Syntax: math.tan(angle) Returns tangent of an angle in radians. \\verb|angle| \\in \\mathbb{R} math.asin Syntax: math.asin(sin) Returns arcsine of an sin (result in radians). \\verb|sin| \\in [-1, 1] math.acos Syntax: math.acos(cos) Returns arccosine of an cos (result in radians). \\verb|cos| \\in [-1, 1] math.atan Syntax: math.atan(tan) Returns arctangent of an tan (result in radians). \\verb|tan| \\in \\mathbb{R} math.abs Syntax: math.abs(n) Returns \\left|n\\right| (absolute value of n ), n \\in \\mathbb{R} math.log Syntax: math.log(n, <base>) Returns the natural logarithm ( base = e ) of n if no base is given, or the logarithm of n in the given base. n, base \\in \\mathbb{R} math.log2 Syntax: math.log2(n) Same as math.log(n, 2) . n \\in \\mathbb{R} math.factorial Added in 0.19.0-beta Syntax: math.factorial(n) Returns n! ( factorial of n ). n \\in \\mathbb{N}","title":"Math"},{"location":"1.1/stdlib/modules/math/#math","text":"Source code The math module can be imported with the statement import math . The math module is used to do math. To do statistics, use the statistics module.","title":"Math"},{"location":"1.1/stdlib/modules/math/#constants","text":"math.pi : Pi . \\pi = 3.141592653589793 math.tau : Tau . \\tau = 6.283185307179586 math.sqrt_pi : square root of pi ( math.sqrt(math.pi) ). \\sqrt\\pi = 1.7724538509055159 math.sqrt_tau : square root of tau ( math.sqrt(math.tau) ). \\sqrt\\tau = 2.5066282746310002 math.e : Euler's number . e = 2.718281828459045","title":"Constants"},{"location":"1.1/stdlib/modules/math/#functions","text":"","title":"Functions"},{"location":"1.1/stdlib/modules/math/#mathsqrt","text":"Syntax: math.sqrt(n) Returns \\sqrt{n} (square root of n ), n \\in \\mathbb{R}_+","title":"math.sqrt"},{"location":"1.1/stdlib/modules/math/#mathisqrt","text":"Syntax: math.isqrt(n) Returns \\left\\lfloor\\sqrt{n}\\right\\rfloor (integer square root of n ), n \\in \\mathbb{N}","title":"math.isqrt"},{"location":"1.1/stdlib/modules/math/#mathroot","text":"Syntax: math.root(n, k) Returns the \\sqrt[k]{n} ( k -th root of n ), n \\in \\mathbb{R}_+, k \\in \\mathbb{R}","title":"math.root"},{"location":"1.1/stdlib/modules/math/#mathiroot","text":"Syntax: math.iroot(n, k) Returns \\left\\lfloor\\sqrt[k]{n}\\right\\rfloor (integer k -th root of n ), n \\in \\mathbb{R}_+, k \\in \\mathbb{R}","title":"math.iroot"},{"location":"1.1/stdlib/modules/math/#mathdegrees","text":"Syntax: math.degrees(angle) Transforms a radian angle to a degree angle. \\verb|angle| \\in \\mathbb{R}","title":"math.degrees"},{"location":"1.1/stdlib/modules/math/#mathradians","text":"Syntax: math.radians(angle) Transform a degree angle to a radian angle. \\verb|angle| \\in \\mathbb{R}","title":"math.radians"},{"location":"1.1/stdlib/modules/math/#mathsin","text":"Syntax: math.sin(angle) Returns sine of an angle in radians. \\verb|angle| \\in \\mathbb{R}","title":"math.sin"},{"location":"1.1/stdlib/modules/math/#mathcos","text":"Syntax: math.cos(angle) Returns cosine of an angle in radians. \\verb|angle| \\in \\mathbb{R}","title":"math.cos"},{"location":"1.1/stdlib/modules/math/#mathtan","text":"Syntax: math.tan(angle) Returns tangent of an angle in radians. \\verb|angle| \\in \\mathbb{R}","title":"math.tan"},{"location":"1.1/stdlib/modules/math/#mathasin","text":"Syntax: math.asin(sin) Returns arcsine of an sin (result in radians). \\verb|sin| \\in [-1, 1]","title":"math.asin"},{"location":"1.1/stdlib/modules/math/#mathacos","text":"Syntax: math.acos(cos) Returns arccosine of an cos (result in radians). \\verb|cos| \\in [-1, 1]","title":"math.acos"},{"location":"1.1/stdlib/modules/math/#mathatan","text":"Syntax: math.atan(tan) Returns arctangent of an tan (result in radians). \\verb|tan| \\in \\mathbb{R}","title":"math.atan"},{"location":"1.1/stdlib/modules/math/#mathabs","text":"Syntax: math.abs(n) Returns \\left|n\\right| (absolute value of n ), n \\in \\mathbb{R}","title":"math.abs"},{"location":"1.1/stdlib/modules/math/#mathlog","text":"Syntax: math.log(n, <base>) Returns the natural logarithm ( base = e ) of n if no base is given, or the logarithm of n in the given base. n, base \\in \\mathbb{R}","title":"math.log"},{"location":"1.1/stdlib/modules/math/#mathlog2","text":"Syntax: math.log2(n) Same as math.log(n, 2) . n \\in \\mathbb{R}","title":"math.log2"},{"location":"1.1/stdlib/modules/math/#mathfactorial","text":"Added in 0.19.0-beta Syntax: math.factorial(n) Returns n! ( factorial of n ). n \\in \\mathbb{N}","title":"math.factorial"},{"location":"1.1/stdlib/modules/noug_version/","text":"Noug Version Source code The noug_version module can be imported with the statement import noug_version . The noug_version module is used to have better informations about the current Nougaro version. Note Nougaro uses semantic versionning . We recommend you to read the whole semver specification. Constants Examples are given considering the version 3.14.15-rc.92 noug_version.major : integer of the MAJOR version ( 3 ) noug_version.minor : integer of the MINOR version ( 14 ) noug_version.patch : integer of the PATCH version ( 15 ) noug_version.phase : string of the PHASE name ( \"rc\" ). Usually alpha , beta , rc , stable . noug_version.release_serial : integer of the MINOR INDEV version ( 92 ). It resets when the phase switches back to stable . When the version is under the form 3.14.15-stable or 0.16.0-beta , this number is 0 . noug_version.version_list : list under the form [major, minor, patch, phase, release_serial] (in our example: [3, 14, 15, \"rc\", 92] ) Changed in 0.19.0 and 0.20.0 noug_version.release_serial is the new name for noug_version.phase_minor in 0.19.0-beta. noug_version.phase_minor has been removed in 0.20.0-beta. Functions noug_version.clean_version_for_gh Version history Added in 0.19.0-beta Changed in 0.23.0-beta: added optional parameters print_value and return_value . Syntax: noug_version.clean_version_for_gh(<print_value=False>, <return_value=True>) Generates a beautiful str for the GitHub issues or PRs. If print_value is true, it prints the value. If return_value is true, it returns the value. noug_version.clean_version_for_nuitka_under_windows Added in 0.23.0-beta Syntax: noug_version.clean_version_for_nuitka_under_windows(<print_value=False>, <return_value=True>) Generates a string under the form \"<major>.<minor>.<patch>\" , or \"<major>.<minor>.<patch>.<release_serial>\" if release_serial \u2260 0. This is meant to be passed as the --windows-product-version option of Ntuika. If print_value is true, it prints the value. If return_value is true, it returns the value.","title":"Noug Version"},{"location":"1.1/stdlib/modules/noug_version/#noug-version","text":"Source code The noug_version module can be imported with the statement import noug_version . The noug_version module is used to have better informations about the current Nougaro version. Note Nougaro uses semantic versionning . We recommend you to read the whole semver specification.","title":"Noug Version"},{"location":"1.1/stdlib/modules/noug_version/#constants","text":"Examples are given considering the version 3.14.15-rc.92 noug_version.major : integer of the MAJOR version ( 3 ) noug_version.minor : integer of the MINOR version ( 14 ) noug_version.patch : integer of the PATCH version ( 15 ) noug_version.phase : string of the PHASE name ( \"rc\" ). Usually alpha , beta , rc , stable . noug_version.release_serial : integer of the MINOR INDEV version ( 92 ). It resets when the phase switches back to stable . When the version is under the form 3.14.15-stable or 0.16.0-beta , this number is 0 . noug_version.version_list : list under the form [major, minor, patch, phase, release_serial] (in our example: [3, 14, 15, \"rc\", 92] ) Changed in 0.19.0 and 0.20.0 noug_version.release_serial is the new name for noug_version.phase_minor in 0.19.0-beta. noug_version.phase_minor has been removed in 0.20.0-beta.","title":"Constants"},{"location":"1.1/stdlib/modules/noug_version/#functions","text":"","title":"Functions"},{"location":"1.1/stdlib/modules/noug_version/#noug_versionclean_version_for_gh","text":"Version history Added in 0.19.0-beta Changed in 0.23.0-beta: added optional parameters print_value and return_value . Syntax: noug_version.clean_version_for_gh(<print_value=False>, <return_value=True>) Generates a beautiful str for the GitHub issues or PRs. If print_value is true, it prints the value. If return_value is true, it returns the value.","title":"noug_version.clean_version_for_gh"},{"location":"1.1/stdlib/modules/noug_version/#noug_versionclean_version_for_nuitka_under_windows","text":"Added in 0.23.0-beta Syntax: noug_version.clean_version_for_nuitka_under_windows(<print_value=False>, <return_value=True>) Generates a string under the form \"<major>.<minor>.<patch>\" , or \"<major>.<minor>.<patch>.<release_serial>\" if release_serial \u2260 0. This is meant to be passed as the --windows-product-version option of Ntuika. If print_value is true, it prints the value. If return_value is true, it returns the value.","title":"noug_version.clean_version_for_nuitka_under_windows"},{"location":"1.1/stdlib/modules/random/","text":"Random Source code The random module can be imported with the statement import random . The random module is used to generate random numbers. Functions random.randint Syntax: random.randint(a: int, b: int) Generates a random integer between a and b . a and b must be integers . The condition a <= b MUST be verified. random.random Syntax: random.random Generates a random floating number between 0.0000000000000000 and 1.0000000000000000. random.choice Syntax: random.choice(list) Returns a random element of the list . random.shuffle Syntax: random.shuffle(list) Shuffles (by reference) and returns list . random.seed Syntax: random.seed(int) Sets the seed to generate numbers to int .","title":"Random"},{"location":"1.1/stdlib/modules/random/#random","text":"Source code The random module can be imported with the statement import random . The random module is used to generate random numbers.","title":"Random"},{"location":"1.1/stdlib/modules/random/#functions","text":"","title":"Functions"},{"location":"1.1/stdlib/modules/random/#randomrandint","text":"Syntax: random.randint(a: int, b: int) Generates a random integer between a and b . a and b must be integers . The condition a <= b MUST be verified.","title":"random.randint"},{"location":"1.1/stdlib/modules/random/#randomrandom","text":"Syntax: random.random Generates a random floating number between 0.0000000000000000 and 1.0000000000000000.","title":"random.random"},{"location":"1.1/stdlib/modules/random/#randomchoice","text":"Syntax: random.choice(list) Returns a random element of the list .","title":"random.choice"},{"location":"1.1/stdlib/modules/random/#randomshuffle","text":"Syntax: random.shuffle(list) Shuffles (by reference) and returns list .","title":"random.shuffle"},{"location":"1.1/stdlib/modules/random/#randomseed","text":"Syntax: random.seed(int) Sets the seed to generate numbers to int .","title":"random.seed"},{"location":"1.1/stdlib/modules/statistics/","text":"Statistics Source code The statistics module can be imported with the statement import statistics . The statistics module is used to do statistics. To do math, use the math module. Functions statistics.mean Syntax: statistics.mean(list) Calculates the mean of a list of numbers. statistics.geometric_mean Syntax: statistics.geometric_mean(list) Calculates the geometric mean of a list of positive numbers. statistics.harmonic_mean Syntax: statistics.harmonic_mean Calculates the harmonic mean of a list of positive numbers. statistics.median Syntax: statistics.median(list) Calculates the median of a list of numbers. statistics.quantiles Syntax: statistics.quantiles(list, n=4, method='exclusive') Cuts a list of numbers in n parts and returns a list of the values where the list was cut, using exclusive or inclusive method. n and method are optional. Disclamer from the Python source code Notes on methods for computing quantiles There is no one perfect way to compute quantiles. Here we offer two methods that serve common needs. Most other packages surveyed offered at least one or both of these two, making them \"standard\" in the sense of \"widely-adopted and reproducible\". They are also easy to explain, easy to compute manually, and have straight-forward interpretations that aren't surprising. The default method is known as \"R6\", \"PERCENTILE.EXC\", or \"expected value of rank order statistics\". The alternative method is known as \"R7\", \"PERCENTILE.INC\", or \"mode of rank order statistics\". For sample data where there is a positive probability for values beyond the range of the data, the R6 exclusive method is a reasonable choice. Consider a random sample of nine values from a population with a uniform distribution from 0.0 to 1.0. The distribution of the third ranked sample point is described by betavariate(alpha=3, beta=7) which has mode=0.250, median=0.286, and mean=0.300. Only the latter (which corresponds with R6) gives the desired cut point with 30% of the population falling below that value, making it comparable to a result from an inv_cdf() function. The R6 exclusive method is also idempotent. For describing population data where the end points are known to be included in the data, the R7 inclusive method is a reasonable choice. Instead of the mean, it uses the mode of the beta distribution for the interior points. Per Hyndman & Fan, \"One nice property is that the vertices of Q7(p) divide the range into n - 1 intervals, and exactly 100p% of the intervals lie to the left of Q7(p) and 100(1 - p)% of the intervals lie to the right of Q7(p).\" If needed, other methods could be added. However, for now, the position is that fewer options make for easier choices and that external packages can be used for anything more advanced. statistics.scope(list) Syntax: statistics.scope(list) Calculates the scope of a list of numbers: max(list) - min(list) . statistics.mode(list) Syntax: statistics.mode(list) Calculates the mode of a list of numbers, i.e. the most common value. statistics.multimode(value) Syntax: statistics.multimode(value) Calculates the modes of a list or a str, i.e. the most common values. It returns a list.","title":"Statistics"},{"location":"1.1/stdlib/modules/statistics/#statistics","text":"Source code The statistics module can be imported with the statement import statistics . The statistics module is used to do statistics. To do math, use the math module.","title":"Statistics"},{"location":"1.1/stdlib/modules/statistics/#functions","text":"","title":"Functions"},{"location":"1.1/stdlib/modules/statistics/#statisticsmean","text":"Syntax: statistics.mean(list) Calculates the mean of a list of numbers.","title":"statistics.mean"},{"location":"1.1/stdlib/modules/statistics/#statisticsgeometric_mean","text":"Syntax: statistics.geometric_mean(list) Calculates the geometric mean of a list of positive numbers.","title":"statistics.geometric_mean"},{"location":"1.1/stdlib/modules/statistics/#statisticsharmonic_mean","text":"Syntax: statistics.harmonic_mean Calculates the harmonic mean of a list of positive numbers.","title":"statistics.harmonic_mean"},{"location":"1.1/stdlib/modules/statistics/#statisticsmedian","text":"Syntax: statistics.median(list) Calculates the median of a list of numbers.","title":"statistics.median"},{"location":"1.1/stdlib/modules/statistics/#statisticsquantiles","text":"Syntax: statistics.quantiles(list, n=4, method='exclusive') Cuts a list of numbers in n parts and returns a list of the values where the list was cut, using exclusive or inclusive method. n and method are optional. Disclamer from the Python source code","title":"statistics.quantiles"},{"location":"1.1/stdlib/modules/statistics/#notes-on-methods-for-computing-quantiles","text":"There is no one perfect way to compute quantiles. Here we offer two methods that serve common needs. Most other packages surveyed offered at least one or both of these two, making them \"standard\" in the sense of \"widely-adopted and reproducible\". They are also easy to explain, easy to compute manually, and have straight-forward interpretations that aren't surprising. The default method is known as \"R6\", \"PERCENTILE.EXC\", or \"expected value of rank order statistics\". The alternative method is known as \"R7\", \"PERCENTILE.INC\", or \"mode of rank order statistics\". For sample data where there is a positive probability for values beyond the range of the data, the R6 exclusive method is a reasonable choice. Consider a random sample of nine values from a population with a uniform distribution from 0.0 to 1.0. The distribution of the third ranked sample point is described by betavariate(alpha=3, beta=7) which has mode=0.250, median=0.286, and mean=0.300. Only the latter (which corresponds with R6) gives the desired cut point with 30% of the population falling below that value, making it comparable to a result from an inv_cdf() function. The R6 exclusive method is also idempotent. For describing population data where the end points are known to be included in the data, the R7 inclusive method is a reasonable choice. Instead of the mean, it uses the mode of the beta distribution for the interior points. Per Hyndman & Fan, \"One nice property is that the vertices of Q7(p) divide the range into n - 1 intervals, and exactly 100p% of the intervals lie to the left of Q7(p) and 100(1 - p)% of the intervals lie to the right of Q7(p).\" If needed, other methods could be added. However, for now, the position is that fewer options make for easier choices and that external packages can be used for anything more advanced.","title":"Notes on methods for computing quantiles"},{"location":"1.1/stdlib/modules/statistics/#statisticsscopelist","text":"Syntax: statistics.scope(list) Calculates the scope of a list of numbers: max(list) - min(list) .","title":"statistics.scope(list)"},{"location":"1.1/stdlib/modules/statistics/#statisticsmodelist","text":"Syntax: statistics.mode(list) Calculates the mode of a list of numbers, i.e. the most common value.","title":"statistics.mode(list)"},{"location":"1.1/stdlib/modules/statistics/#statisticsmultimodevalue","text":"Syntax: statistics.multimode(value) Calculates the modes of a list or a str, i.e. the most common values. It returns a list.","title":"statistics.multimode(value)"},{"location":"1.1/stdlib/modules/time/","text":"Time Source code The time module can be imported with the statement import time . The time module is used to sleep for seconds or milliseconds, and to know current time, timezone and system\u2019s epoch. Constants time.timezone : the timezone (number of seconds to add to GMT) Functions time.sleep Syntax: time.sleep(seconds) Pauses the program for seconds ( int or float ) and do nothing. Returns None . time.sleep_milliseconds Syntax: time.sleep_milliseconds(milliseconds) Pauses the program for milliseconds ( integer ) and do nothing. Returns None . time.time Syntax: time.time() Returns the float value of the time in seconds since the Epoch (system-dependent, check your epoch with time.epoch() ). time.epoch Syntax: time.epoch() Returns the str value of the Epoch of your system.","title":"Time"},{"location":"1.1/stdlib/modules/time/#time","text":"Source code The time module can be imported with the statement import time . The time module is used to sleep for seconds or milliseconds, and to know current time, timezone and system\u2019s epoch.","title":"Time"},{"location":"1.1/stdlib/modules/time/#constants","text":"time.timezone : the timezone (number of seconds to add to GMT)","title":"Constants"},{"location":"1.1/stdlib/modules/time/#functions","text":"","title":"Functions"},{"location":"1.1/stdlib/modules/time/#timesleep","text":"Syntax: time.sleep(seconds) Pauses the program for seconds ( int or float ) and do nothing. Returns None .","title":"time.sleep"},{"location":"1.1/stdlib/modules/time/#timesleep_milliseconds","text":"Syntax: time.sleep_milliseconds(milliseconds) Pauses the program for milliseconds ( integer ) and do nothing. Returns None .","title":"time.sleep_milliseconds"},{"location":"1.1/stdlib/modules/time/#timetime","text":"Syntax: time.time() Returns the float value of the time in seconds since the Epoch (system-dependent, check your epoch with time.epoch() ).","title":"time.time"},{"location":"1.1/stdlib/modules/time/#timeepoch","text":"Syntax: time.epoch() Returns the str value of the Epoch of your system.","title":"time.epoch"},{"location":"1.1/stdlib/modules/unicodedata/","text":"Unicodedata Source code Credits This is massively copied from python documentation of unicodedata , under the Python Software Foundation License Version 2 . \u00a9 Copyright 2001-2023, Python Software Foundation. This text has not been edited. The unicodedata module can be imported with the statement import unicodedata . The unicodedata provides access to the Unicode database. Constants unicodedata.unicodedata_version : the version of the Unicode database used in this module. Depends on Python version! Functions unicodedata.lookup Syntax: unicodedata.lookup(name) Look up character by name. If a character with the given name is found, return the corresponding character. If not found, NotDefinedError is raised. unicodedata.name Syntax: unicodedata.name(chr, <default>) Returns the name assigned to the character chr as a string. If no name is defined, default is returned, or, if not given, RunTimeError is raised. unicodedata.category Syntax: unicodedata.category(chr) Returns the general category assigned to the character chr as string. unicodedata.bidirectional Syntax: unicodedata.bidirectional(chr) Returns the bidirectional class assigned to the character chr as string. If no such value is defined, an empty string is returned. unicodedata.combining Syntax: unicodedata.combining(chr) Returns the canonical combining class assigned to the character chr as integer. Returns 0 if no combining class is defined. unicodedata.east_asian_width Syntax: unicodedata.east_asian_width(chr) Returns the east asian width assigned to the character chr as string. unicodedata.mirrored Syntax: unicodedata.mirrored(chr) Returns the mirrored property assigned to the character chr as integer. Returns 1 if the character has been identified as a \u201cmirrored\u201d character in bidirectional text, 0 otherwise. unicodedata.decomposition Syntax: unicodedata.decomposition(chr) Returns the character decomposition mapping assigned to the character chr as string. An empty string is returned in case no such mapping is defined. unicodedata.normalize Syntax: unicodedata.normalize(form, unistr) Returns the normal form form for the Unicode string unistr . Valid values for form are \u2018NFC\u2019, \u2018NFKC\u2019, \u2018NFD\u2019, and \u2018NFKD\u2019. The Unicode standard defines various normalization forms of a Unicode string, based on the definition of canonical equivalence and compatibility equivalence. In Unicode, several characters can be expressed in various way. For example, the character U+00C7 (LATIN CAPITAL LETTER C WITH CEDILLA) can also be expressed as the sequence U+0043 (LATIN CAPITAL LETTER C) U+0327 (COMBINING CEDILLA). For each character, there are two normal forms: normal form C and normal form D. Normal form D (NFD) is also known as canonical decomposition, and translates each character into its decomposed form. Normal form C (NFC) first applies a canonical decomposition, then composes pre-combined characters again. In addition to these two forms, there are two additional normal forms based on compatibility equivalence. In Unicode, certain characters are supported which normally would be unified with other characters. For example, U+2160 (ROMAN NUMERAL ONE) is really the same thing as U+0049 (LATIN CAPITAL LETTER I). However, it is supported in Unicode for compatibility with existing character sets (e.g. gb2312). The normal form KD (NFKD) will apply the compatibility decomposition, i.e. replace all compatibility characters with their equivalents. The normal form KC (NFKC) first applies the compatibility decomposition, followed by the canonical composition. Even if two unicode strings are normalized and look the same to a human reader, if one has combining characters and the other doesn\u2019t, they may not compare equal. unicodedata.is_normalized Syntax: unicodedata.is_normalized(form, unistr) Return whether the Unicode string unistr is in the normal form form . Valid values for form are \u2018NFC\u2019, \u2018NFKC\u2019, \u2018NFD\u2019, and \u2018NFKD\u2019.","title":"Unicodedata"},{"location":"1.1/stdlib/modules/unicodedata/#unicodedata","text":"Source code Credits This is massively copied from python documentation of unicodedata , under the Python Software Foundation License Version 2 . \u00a9 Copyright 2001-2023, Python Software Foundation. This text has not been edited. The unicodedata module can be imported with the statement import unicodedata . The unicodedata provides access to the Unicode database.","title":"Unicodedata"},{"location":"1.1/stdlib/modules/unicodedata/#constants","text":"unicodedata.unicodedata_version : the version of the Unicode database used in this module. Depends on Python version!","title":"Constants"},{"location":"1.1/stdlib/modules/unicodedata/#functions","text":"","title":"Functions"},{"location":"1.1/stdlib/modules/unicodedata/#unicodedatalookup","text":"Syntax: unicodedata.lookup(name) Look up character by name. If a character with the given name is found, return the corresponding character. If not found, NotDefinedError is raised.","title":"unicodedata.lookup"},{"location":"1.1/stdlib/modules/unicodedata/#unicodedataname","text":"Syntax: unicodedata.name(chr, <default>) Returns the name assigned to the character chr as a string. If no name is defined, default is returned, or, if not given, RunTimeError is raised.","title":"unicodedata.name"},{"location":"1.1/stdlib/modules/unicodedata/#unicodedatacategory","text":"Syntax: unicodedata.category(chr) Returns the general category assigned to the character chr as string.","title":"unicodedata.category"},{"location":"1.1/stdlib/modules/unicodedata/#unicodedatabidirectional","text":"Syntax: unicodedata.bidirectional(chr) Returns the bidirectional class assigned to the character chr as string. If no such value is defined, an empty string is returned.","title":"unicodedata.bidirectional"},{"location":"1.1/stdlib/modules/unicodedata/#unicodedatacombining","text":"Syntax: unicodedata.combining(chr) Returns the canonical combining class assigned to the character chr as integer. Returns 0 if no combining class is defined.","title":"unicodedata.combining"},{"location":"1.1/stdlib/modules/unicodedata/#unicodedataeast_asian_width","text":"Syntax: unicodedata.east_asian_width(chr) Returns the east asian width assigned to the character chr as string.","title":"unicodedata.east_asian_width"},{"location":"1.1/stdlib/modules/unicodedata/#unicodedatamirrored","text":"Syntax: unicodedata.mirrored(chr) Returns the mirrored property assigned to the character chr as integer. Returns 1 if the character has been identified as a \u201cmirrored\u201d character in bidirectional text, 0 otherwise.","title":"unicodedata.mirrored"},{"location":"1.1/stdlib/modules/unicodedata/#unicodedatadecomposition","text":"Syntax: unicodedata.decomposition(chr) Returns the character decomposition mapping assigned to the character chr as string. An empty string is returned in case no such mapping is defined.","title":"unicodedata.decomposition"},{"location":"1.1/stdlib/modules/unicodedata/#unicodedatanormalize","text":"Syntax: unicodedata.normalize(form, unistr) Returns the normal form form for the Unicode string unistr . Valid values for form are \u2018NFC\u2019, \u2018NFKC\u2019, \u2018NFD\u2019, and \u2018NFKD\u2019. The Unicode standard defines various normalization forms of a Unicode string, based on the definition of canonical equivalence and compatibility equivalence. In Unicode, several characters can be expressed in various way. For example, the character U+00C7 (LATIN CAPITAL LETTER C WITH CEDILLA) can also be expressed as the sequence U+0043 (LATIN CAPITAL LETTER C) U+0327 (COMBINING CEDILLA). For each character, there are two normal forms: normal form C and normal form D. Normal form D (NFD) is also known as canonical decomposition, and translates each character into its decomposed form. Normal form C (NFC) first applies a canonical decomposition, then composes pre-combined characters again. In addition to these two forms, there are two additional normal forms based on compatibility equivalence. In Unicode, certain characters are supported which normally would be unified with other characters. For example, U+2160 (ROMAN NUMERAL ONE) is really the same thing as U+0049 (LATIN CAPITAL LETTER I). However, it is supported in Unicode for compatibility with existing character sets (e.g. gb2312). The normal form KD (NFKD) will apply the compatibility decomposition, i.e. replace all compatibility characters with their equivalents. The normal form KC (NFKC) first applies the compatibility decomposition, followed by the canonical composition. Even if two unicode strings are normalized and look the same to a human reader, if one has combining characters and the other doesn\u2019t, they may not compare equal.","title":"unicodedata.normalize"},{"location":"1.1/stdlib/modules/unicodedata/#unicodedatais_normalized","text":"Syntax: unicodedata.is_normalized(form, unistr) Return whether the Unicode string unistr is in the normal form form . Valid values for form are \u2018NFC\u2019, \u2018NFKC\u2019, \u2018NFD\u2019, and \u2018NFKD\u2019.","title":"unicodedata.is_normalized"},{"location":"1.1/stdlib/modules/webbrowser/","text":"Webbrowser Source code Added in 0.19.0-beta The webbrowser module can be imported with the statement import webbrowser . Convenient web-browser controller. The webbrowser module allows you to open pages in the browser. Functions webbrowser.open Syntax: webbrowser.open(url, <new=0>, <autoraise=True>) Displays url using the default browser. If new is 0, the url is opened in the same browser window if possible. If new is 1, a new browser window is opened if possible. If new is 2, a new tab is opened if possible. If autoraise is True, the window is raised if possible (note that under many window managers this will occur regardless of the setting of this variable).","title":"Webbrowser"},{"location":"1.1/stdlib/modules/webbrowser/#webbrowser","text":"Source code Added in 0.19.0-beta The webbrowser module can be imported with the statement import webbrowser . Convenient web-browser controller. The webbrowser module allows you to open pages in the browser.","title":"Webbrowser"},{"location":"1.1/stdlib/modules/webbrowser/#functions","text":"","title":"Functions"},{"location":"1.1/stdlib/modules/webbrowser/#webbrowseropen","text":"Syntax: webbrowser.open(url, <new=0>, <autoraise=True>) Displays url using the default browser. If new is 0, the url is opened in the same browser window if possible. If new is 1, a new browser window is opened if possible. If new is 2, a new tab is opened if possible. If autoraise is True, the window is raised if possible (note that under many window managers this will occur regardless of the setting of this variable).","title":"webbrowser.open"},{"location":"1.2/","text":"Nougaro 1.2 documentation This is the official documentation for Nougaro version 1.2.0. Hello, world! Language reference: syntax, statements, \u2026 Basic syntax Number literals String literals Identifiers and keywords Operators Values Variables Tests ( if statement, assert ) Loops Functions Attributes Classes Read and write in files Import and export Metas Dollar-print Standard library reference: builtins, modules, \u2026 Built-in variables Built-in functions Modules Expanding Nougaro (for Python developers) Write libraries for Nougaro Internals","title":"Nougaro 1.2 documentation"},{"location":"1.2/#nougaro-12-documentation","text":"This is the official documentation for Nougaro version 1.2.0. Hello, world! Language reference: syntax, statements, \u2026 Basic syntax Number literals String literals Identifiers and keywords Operators Values Variables Tests ( if statement, assert ) Loops Functions Attributes Classes Read and write in files Import and export Metas Dollar-print Standard library reference: builtins, modules, \u2026 Built-in variables Built-in functions Modules Expanding Nougaro (for Python developers) Write libraries for Nougaro Internals","title":"Nougaro 1.2 documentation"},{"location":"1.2/hello_world/","text":"Hello, world! This is the \u201cHello, world!\u201d program in Nougaro. print(\"Hello, world!\") Alternatively: import hello If you want to use functionnal programming: def main() print(\"Hello, world!\") end main() If you want to use object-oriented programming: class Main def print_hello_world() print(\"Hello, world!\") end end Main().print_hello_world()","title":"Hello, world!"},{"location":"1.2/hello_world/#hello-world","text":"This is the \u201cHello, world!\u201d program in Nougaro. print(\"Hello, world!\") Alternatively: import hello If you want to use functionnal programming: def main() print(\"Hello, world!\") end main() If you want to use object-oriented programming: class Main def print_hello_world() print(\"Hello, world!\") end end Main().print_hello_world()","title":"Hello, world!"},{"location":"1.2/internals/","text":"Internals Features that had to be documented but that are mainly used for debugging purposes. Context variables __actual_context__ is the name of the function where the code is executed. May be <program> . __exec_from__ is the name of the parent of the function where the code is executed. If __actual_context__ is <program> , __exec_from__ is (shell) . If the code is inside a function foo that is directly in <program> , __exec_from__ is foo from <program> . If the code is inside a function bar executed from our foo (that is in <program> ), __exec_from__ is bar from foo . Base value __base_value__ is the base value (python class Value ). It is the parent class of all the other values. It is the only value to crash on == and != operators . Nougaro informations Note This section is duplicated in this file __noug_version__ : string of the Nougaro version (e.g. \"0.15.0-beta\".) You can use the noug_version lib to have better informations. __data_version__ : the Nougaro data version, an internal version keeping track of changes in the config file directory structure __version_id__ : an ID increased at least once per version __python_version__ : string of the Python version (e.g. \"3.10.5\") __noug_dir__ : string of the absolute path of the directory where shell.(py/exe/bin) is located. May be used with file I/O read and write statements. Symbol table __symbol_table__ : string of the internal \u201cp-formated\u201d symbols dictionnary.","title":"Internals"},{"location":"1.2/internals/#internals","text":"Features that had to be documented but that are mainly used for debugging purposes.","title":"Internals"},{"location":"1.2/internals/#context-variables","text":"__actual_context__ is the name of the function where the code is executed. May be <program> . __exec_from__ is the name of the parent of the function where the code is executed. If __actual_context__ is <program> , __exec_from__ is (shell) . If the code is inside a function foo that is directly in <program> , __exec_from__ is foo from <program> . If the code is inside a function bar executed from our foo (that is in <program> ), __exec_from__ is bar from foo .","title":"Context variables"},{"location":"1.2/internals/#base-value","text":"__base_value__ is the base value (python class Value ). It is the parent class of all the other values. It is the only value to crash on == and != operators .","title":"Base value"},{"location":"1.2/internals/#nougaro-informations","text":"Note This section is duplicated in this file __noug_version__ : string of the Nougaro version (e.g. \"0.15.0-beta\".) You can use the noug_version lib to have better informations. __data_version__ : the Nougaro data version, an internal version keeping track of changes in the config file directory structure __version_id__ : an ID increased at least once per version __python_version__ : string of the Python version (e.g. \"3.10.5\") __noug_dir__ : string of the absolute path of the directory where shell.(py/exe/bin) is located. May be used with file I/O read and write statements.","title":"Nougaro informations"},{"location":"1.2/internals/#symbol-table","text":"__symbol_table__ : string of the internal \u201cp-formated\u201d symbols dictionnary.","title":"Symbol table"},{"location":"1.2/Expanding/Write-libs/","text":"You are a Nougaro developer, and you want to write an amazing library to implement python amazing things in Nougaro? You're at the right place!! You have to options: either writting it in Nougaro (with limited resources), either writting it in Python (with unlimited resources). Write libs in Nougaro Requirements You need to know how to code in Nougaro. Start coding The file should be named nameofthelib.noug and be located in the lib_ folder in the Nougaro repository. Simply write all your code. If you want something to be accessible when imported, use one of those syntaxes : export identifier (as identifier) export (any expression) as identifier You can find examples of built-in modules written in Nougaro in the lib_ folder. Write libs in Python Warning Everything changed in 0.16.0-beta and in 0.19.0-beta Requirements You need to know how to code in Python. Don't worry, that's easy ;) Start coding The file should be named nameofthelib_.py (the \u201c_\u201d is VERY important!!) The file will be placed in the lib_ folder in the Nougaro repository. Paste this generic code in your file: # -*- coding:utf-8 -*- \"\"\" YourModuleName module YourModuleName is a module that do [...] and [...] and also [...]. \"\"\" # IMPORTS # nougaro modules imports from lib_.lib_to_make_libs import * # useful stuff to make libs. # built-in python imports # here put the useful python imports your module will need ;) __LIB_VERSION__ = 4 Note Lib versions depending on Nougaro versions: prior to 0.20.0: 1 0.20.0: 2 0.21.0: 3 since 0.22.0: 4 Lib with constants If your lib contains constants, you can add them to the code, outside any class. Use py2noug function imported from lib_to_make_libs to convert Python values to Nougaro values. Python types that can be converted into Nougaro values are: str , int , float , bool (which is converted to 0 or 1), list , tuple (converted into list), dict (converted into a list of lists, each sub-list is [key, value] ), None . Other types will return generic value Value , which you can't make anything with... Example: AMAZING_CONSTANT = py2noug(3, *default_pos()) # will be Number(3), type 'int' ANOTHER_AMAZING_CONSTANT = py2noug(\"Hello world :)\", *default_pos()) # will be String(\"Hello world :)\"), type 'str' ( py2noug and default_pos are imported from lib_to_make_libs ) Lib with functions If you want functions in your lib, paste this code in your file (replace the generic names/texts with appropriate things, except for function_name , as the class is actually a wrapper for all the functions in your module): class YourModuleName(ModuleFunction): \"\"\" YourModuleName Module \"\"\" functions: dict[str, builtin_function_dict] = {} def __init__(self, function_name: str): super().__init__(\"your_module_name\", function_name, \"https://link_to_report_bugs.com (not required)\", functions=self.functions) def copy(self): \"\"\"Return a copy of self\"\"\" copy = YourModuleName(self.name) return self.set_context_and_pos_to_a_copy(copy) def is_eq(self, other: Value): return isinstance(other, YourModuleName) and self.name == other.name Changed in 0.20.0-beta Prior to 0.20.0, the method is_eq was named get_comparison_eq and had this syntax: def get_comparison_eq(self, other: Value): if isinstance(other, YourModuleName): return Number(self.name == other.name, self.pos_start, other.pos_end).set_context(self.context), None return Number(False, self.pos_start, other.pos_end).set_context(self.context), None Then, to add a function, add a method in this class following this syntax: def execute_function_name(self, context: Context): \"\"\" Docstring (optional) \"\"\" assert context.symbol_table is not None ... functions[\"function_name\"] = { \"function\": execute_function_name, \"param_names\": [\"parameter_1\", \"parameter_2\"], \"optional_params\": [\"optional_parameter_1\"], \"should_respect_args_number\": True, # The two following values are used internally. # They are not documented, don\u2019t set them to True except if you know what you\u2019re doing. \"run_noug_dir\": False, \"noug_dir\": False } Changed in 0.22.0-beta Prior to 0.22.0-beta, the key \"run_noug_dir\" was called \"run_noug_dir_work_dir\" . keys param_names and optional_params should be of type list[str] . should_respect_args_number is a bool. It is True when the number of given arguments should match with the number of parameters, and False if not. You can then add code in your function. Get arguments To get the arguments given by the user in your functions, use context.symbol_table.getf(\"identifier\") Replace the identifier by the one you given to the parameter. If your parameter is optional and that the user didn\u2019t specified it, the default value is a Python None (not a Nougaro NoneValue ). Danger Please don\u2019t use .get symbol table method, it does NOT work in modules (even if it looks like) and should NOT be used. (The short explanation why is that this method looks for the name also in parent symbol table, so if an optional param is not given but the user defined a variable with that name, it will be taken as the value for that param, which is not what we want. We don\u2019t care about parent symbol table, so we just look in the current symbol table which only contains the parameters. The corresponding issue is #10 .) Values Important You often have to switch between Nougaro and Python values! To convert python to Nougaro values, use py2noug function. To convert Nougaro to python values, use noug2py . Both functions are imported from lib_to_make_libs . You reed a position with py2noug : you can simply put self.pos_start and self.pos_end or the position of any value you want. What to return? Values and errors. If you don't need to return anything, simply use return RTResult().success(NoneValue(*default_pos(), False)) . Return errors Oops! It crashed! How to say it to the user under a good shape? Simply use this syntax: return RTResult().failure(NameOfTheError( self.pos_start, self.pos_end, \"error message.\", context )) If the user gave you a value with an incorrect type, use: return RTResult().failure(RTTypeErrorF( bad_argument.pos_start, bad_argument.pos_end, \"first/second/third\u2026\", \"name of the module.name of the function\", \"type that should be found\", bad_argument, context )) Replace \"first/second/third\u2026\" by the actual index of the argument. If it is the first argument, put \"first\" , et c\u00e6tera. The error will print, for instance, second argument of builtin function 'name of the function' should be 'type that should be found', not 'type of (bad_argument)'. You can replace self by any Nougaro value, such as your arguments. For example, in the lib math : if value.value < 0: # we check if the value is greater than (or equal to) 0 return RTResult().failure(RTArithmeticError( value.pos_start, value.pos_end, \"first argument of the built-in function 'math.sqrt' must be greater than (or equal to) 0.\", exec_context, \"lib_.math_.Math.execute_math_sqrt\" )) All the errors available in a Module: RunTimeError : basic run-time error RTIndexError : IndexError RTArithmeticError : ArithmeticError RTNotDefinedError : NotDefinedError RTTypeErrorF : TypeError (you give a Number but you need a String) RTFileNotFoundError : FileNotFoundError RTAssertionError : AssertionError (not useful in libs...) RTAttributeError : AttributeError RTOverflowError : OverflowError RTRecursionError : RecursionError (new in 0.20.0) PythonError : PythonError: an error due to Python. Don\u2019t put a str error message: pass directly the Python Exception. Return values To return a Nougaro value, use return RTResult().success(value) To return a Python value, use return RTResult().success(py2noug(value, self.pos_start, self.pos_end)) WHAT_TO_IMPORT : DO NOT forget that one!! When you have finished coding your amazing lib, create the WHAT_TO_IMPORT dict. It tells to the Nougaro Interpreter what should be imported and with which name. Follow this syntax: WHAT_TO_IMPORT = { \"name_of_a_constant\": IDENTIFIER, \"name_of_a_function\": YourModuleName('function_name'), } The function name is what you specified as the key of the functions dictionary. Custom errors To use a custom error in your code, simply copy-paste this code: class YourErrorName(RunTimeError): \"\"\"YourErrorName is an error that can be triggered ONLY via functions in this module.\"\"\" def __init__(self, pos_start: Position, pos_end: Position, details: str, context: Context, origin_file: str = \"lib_.(nameofthelib)_\"): super().__init__(pos_start, pos_end, details, context, rt_error=False, error_name=\"YourErrorName\", origin_file=origin_file) Then, call it like any other errors (like this ) Note: origin_file is used for debugging. To trigger it, you can run: nougaro> import debug;debug.enable() DEBUG mode is now ENABLED. [<module debug>, None] nougaro> (anything that throws an error) Example: nougaro> import debug;debug.enable() DEBUG mode is now ENABLED. [<module debug>, None] nougaro> thisisnotdefined [identifier:\"thisisnotdefined\", end of file] list:[(var_access:[identifier:\"thisisnotdefined\"], False)] (from src.runtime.interpreter.Interpreter.visit_VarAccessNode (is NOT lib and close match in symbol table)) Traceback (most recent call last): In file <stdin>, line 1, in <program>: thisisnotdefined ^^^^^^^^^^^^^^^^ NotDefinedError: name 'thisisnotdefined' is not defined. Did you mean 'is_none'? nougaro> this is a syntax error [identifier:\"this\", identifier:\"is\", identifier:\"a\", identifier:\"syntax\", identifier:\"error\", end of file] (from src.parser.parser.Parser.statements) In file <stdin>, line 1: this is a syntax error ^^ InvalidSyntaxError: unexpected token: identifier:\"is\". nougaro> Here, origin_file is src.runtime.interpreter.Interpreter.visit_VarAccessNode and src.parser.parser.Parser.parse . Example: RTStatisticsError in built-in lib statistics class RTStatisticsError(RunTimeError): \"\"\"StatisticsError is an error that can be triggered ONLY via functions in this module.\"\"\" def __init__(self, pos_start: Position, pos_end: Position, details: str, context: Context, origin_file: str = \"lib_.statistics_\"): super().__init__(pos_start, pos_end, details, context, rt_error=False, error_name=\"StatisticsError\", origin_file=origin_file) Examples You can read builtin files stored in lib_ folder to make you a good idea of what a nice-coded lib is ;) Here you go! If you think that your lib is absolutely awesome, you can open a PR to submit your idea. The best ideas will be implemented into vanilla Nougaro! If you think that this document is incomplete, that it didn\u2019t help you, or just to find some help, open an issue .","title":"Write libs"},{"location":"1.2/Expanding/Write-libs/#write-libs-in-nougaro","text":"","title":"Write libs in Nougaro"},{"location":"1.2/Expanding/Write-libs/#requirements","text":"You need to know how to code in Nougaro.","title":"Requirements"},{"location":"1.2/Expanding/Write-libs/#start-coding","text":"The file should be named nameofthelib.noug and be located in the lib_ folder in the Nougaro repository. Simply write all your code. If you want something to be accessible when imported, use one of those syntaxes : export identifier (as identifier) export (any expression) as identifier You can find examples of built-in modules written in Nougaro in the lib_ folder.","title":"Start coding"},{"location":"1.2/Expanding/Write-libs/#write-libs-in-python","text":"Warning Everything changed in 0.16.0-beta and in 0.19.0-beta","title":"Write libs in Python"},{"location":"1.2/Expanding/Write-libs/#requirements_1","text":"You need to know how to code in Python. Don't worry, that's easy ;)","title":"Requirements"},{"location":"1.2/Expanding/Write-libs/#start-coding_1","text":"The file should be named nameofthelib_.py (the \u201c_\u201d is VERY important!!) The file will be placed in the lib_ folder in the Nougaro repository. Paste this generic code in your file: # -*- coding:utf-8 -*- \"\"\" YourModuleName module YourModuleName is a module that do [...] and [...] and also [...]. \"\"\" # IMPORTS # nougaro modules imports from lib_.lib_to_make_libs import * # useful stuff to make libs. # built-in python imports # here put the useful python imports your module will need ;) __LIB_VERSION__ = 4 Note Lib versions depending on Nougaro versions: prior to 0.20.0: 1 0.20.0: 2 0.21.0: 3 since 0.22.0: 4","title":"Start coding"},{"location":"1.2/Expanding/Write-libs/#lib-with-constants","text":"If your lib contains constants, you can add them to the code, outside any class. Use py2noug function imported from lib_to_make_libs to convert Python values to Nougaro values. Python types that can be converted into Nougaro values are: str , int , float , bool (which is converted to 0 or 1), list , tuple (converted into list), dict (converted into a list of lists, each sub-list is [key, value] ), None . Other types will return generic value Value , which you can't make anything with... Example: AMAZING_CONSTANT = py2noug(3, *default_pos()) # will be Number(3), type 'int' ANOTHER_AMAZING_CONSTANT = py2noug(\"Hello world :)\", *default_pos()) # will be String(\"Hello world :)\"), type 'str' ( py2noug and default_pos are imported from lib_to_make_libs )","title":"Lib with constants"},{"location":"1.2/Expanding/Write-libs/#lib-with-functions","text":"If you want functions in your lib, paste this code in your file (replace the generic names/texts with appropriate things, except for function_name , as the class is actually a wrapper for all the functions in your module): class YourModuleName(ModuleFunction): \"\"\" YourModuleName Module \"\"\" functions: dict[str, builtin_function_dict] = {} def __init__(self, function_name: str): super().__init__(\"your_module_name\", function_name, \"https://link_to_report_bugs.com (not required)\", functions=self.functions) def copy(self): \"\"\"Return a copy of self\"\"\" copy = YourModuleName(self.name) return self.set_context_and_pos_to_a_copy(copy) def is_eq(self, other: Value): return isinstance(other, YourModuleName) and self.name == other.name Changed in 0.20.0-beta Prior to 0.20.0, the method is_eq was named get_comparison_eq and had this syntax: def get_comparison_eq(self, other: Value): if isinstance(other, YourModuleName): return Number(self.name == other.name, self.pos_start, other.pos_end).set_context(self.context), None return Number(False, self.pos_start, other.pos_end).set_context(self.context), None Then, to add a function, add a method in this class following this syntax: def execute_function_name(self, context: Context): \"\"\" Docstring (optional) \"\"\" assert context.symbol_table is not None ... functions[\"function_name\"] = { \"function\": execute_function_name, \"param_names\": [\"parameter_1\", \"parameter_2\"], \"optional_params\": [\"optional_parameter_1\"], \"should_respect_args_number\": True, # The two following values are used internally. # They are not documented, don\u2019t set them to True except if you know what you\u2019re doing. \"run_noug_dir\": False, \"noug_dir\": False } Changed in 0.22.0-beta Prior to 0.22.0-beta, the key \"run_noug_dir\" was called \"run_noug_dir_work_dir\" . keys param_names and optional_params should be of type list[str] . should_respect_args_number is a bool. It is True when the number of given arguments should match with the number of parameters, and False if not. You can then add code in your function.","title":"Lib with functions"},{"location":"1.2/Expanding/Write-libs/#get-arguments","text":"To get the arguments given by the user in your functions, use context.symbol_table.getf(\"identifier\") Replace the identifier by the one you given to the parameter. If your parameter is optional and that the user didn\u2019t specified it, the default value is a Python None (not a Nougaro NoneValue ). Danger Please don\u2019t use .get symbol table method, it does NOT work in modules (even if it looks like) and should NOT be used. (The short explanation why is that this method looks for the name also in parent symbol table, so if an optional param is not given but the user defined a variable with that name, it will be taken as the value for that param, which is not what we want. We don\u2019t care about parent symbol table, so we just look in the current symbol table which only contains the parameters. The corresponding issue is #10 .)","title":"Get arguments"},{"location":"1.2/Expanding/Write-libs/#values","text":"Important You often have to switch between Nougaro and Python values! To convert python to Nougaro values, use py2noug function. To convert Nougaro to python values, use noug2py . Both functions are imported from lib_to_make_libs . You reed a position with py2noug : you can simply put self.pos_start and self.pos_end or the position of any value you want.","title":"Values"},{"location":"1.2/Expanding/Write-libs/#what-to-return-values-and-errors","text":"If you don't need to return anything, simply use return RTResult().success(NoneValue(*default_pos(), False)) .","title":"What to return? Values and errors."},{"location":"1.2/Expanding/Write-libs/#return-errors","text":"Oops! It crashed! How to say it to the user under a good shape? Simply use this syntax: return RTResult().failure(NameOfTheError( self.pos_start, self.pos_end, \"error message.\", context )) If the user gave you a value with an incorrect type, use: return RTResult().failure(RTTypeErrorF( bad_argument.pos_start, bad_argument.pos_end, \"first/second/third\u2026\", \"name of the module.name of the function\", \"type that should be found\", bad_argument, context )) Replace \"first/second/third\u2026\" by the actual index of the argument. If it is the first argument, put \"first\" , et c\u00e6tera. The error will print, for instance, second argument of builtin function 'name of the function' should be 'type that should be found', not 'type of (bad_argument)'. You can replace self by any Nougaro value, such as your arguments. For example, in the lib math : if value.value < 0: # we check if the value is greater than (or equal to) 0 return RTResult().failure(RTArithmeticError( value.pos_start, value.pos_end, \"first argument of the built-in function 'math.sqrt' must be greater than (or equal to) 0.\", exec_context, \"lib_.math_.Math.execute_math_sqrt\" )) All the errors available in a Module: RunTimeError : basic run-time error RTIndexError : IndexError RTArithmeticError : ArithmeticError RTNotDefinedError : NotDefinedError RTTypeErrorF : TypeError (you give a Number but you need a String) RTFileNotFoundError : FileNotFoundError RTAssertionError : AssertionError (not useful in libs...) RTAttributeError : AttributeError RTOverflowError : OverflowError RTRecursionError : RecursionError (new in 0.20.0) PythonError : PythonError: an error due to Python. Don\u2019t put a str error message: pass directly the Python Exception.","title":"Return errors"},{"location":"1.2/Expanding/Write-libs/#return-values","text":"To return a Nougaro value, use return RTResult().success(value) To return a Python value, use return RTResult().success(py2noug(value, self.pos_start, self.pos_end))","title":"Return values"},{"location":"1.2/Expanding/Write-libs/#what_to_import-do-not-forget-that-one","text":"When you have finished coding your amazing lib, create the WHAT_TO_IMPORT dict. It tells to the Nougaro Interpreter what should be imported and with which name. Follow this syntax: WHAT_TO_IMPORT = { \"name_of_a_constant\": IDENTIFIER, \"name_of_a_function\": YourModuleName('function_name'), } The function name is what you specified as the key of the functions dictionary.","title":"WHAT_TO_IMPORT : DO NOT forget that one!!"},{"location":"1.2/Expanding/Write-libs/#custom-errors","text":"To use a custom error in your code, simply copy-paste this code: class YourErrorName(RunTimeError): \"\"\"YourErrorName is an error that can be triggered ONLY via functions in this module.\"\"\" def __init__(self, pos_start: Position, pos_end: Position, details: str, context: Context, origin_file: str = \"lib_.(nameofthelib)_\"): super().__init__(pos_start, pos_end, details, context, rt_error=False, error_name=\"YourErrorName\", origin_file=origin_file) Then, call it like any other errors (like this ) Note: origin_file is used for debugging. To trigger it, you can run: nougaro> import debug;debug.enable() DEBUG mode is now ENABLED. [<module debug>, None] nougaro> (anything that throws an error) Example: nougaro> import debug;debug.enable() DEBUG mode is now ENABLED. [<module debug>, None] nougaro> thisisnotdefined [identifier:\"thisisnotdefined\", end of file] list:[(var_access:[identifier:\"thisisnotdefined\"], False)] (from src.runtime.interpreter.Interpreter.visit_VarAccessNode (is NOT lib and close match in symbol table)) Traceback (most recent call last): In file <stdin>, line 1, in <program>: thisisnotdefined ^^^^^^^^^^^^^^^^ NotDefinedError: name 'thisisnotdefined' is not defined. Did you mean 'is_none'? nougaro> this is a syntax error [identifier:\"this\", identifier:\"is\", identifier:\"a\", identifier:\"syntax\", identifier:\"error\", end of file] (from src.parser.parser.Parser.statements) In file <stdin>, line 1: this is a syntax error ^^ InvalidSyntaxError: unexpected token: identifier:\"is\". nougaro> Here, origin_file is src.runtime.interpreter.Interpreter.visit_VarAccessNode and src.parser.parser.Parser.parse .","title":"Custom errors"},{"location":"1.2/Expanding/Write-libs/#example-rtstatisticserror-in-built-in-lib-statistics","text":"class RTStatisticsError(RunTimeError): \"\"\"StatisticsError is an error that can be triggered ONLY via functions in this module.\"\"\" def __init__(self, pos_start: Position, pos_end: Position, details: str, context: Context, origin_file: str = \"lib_.statistics_\"): super().__init__(pos_start, pos_end, details, context, rt_error=False, error_name=\"StatisticsError\", origin_file=origin_file)","title":"Example: RTStatisticsError in built-in lib statistics"},{"location":"1.2/Expanding/Write-libs/#examples","text":"You can read builtin files stored in lib_ folder to make you a good idea of what a nice-coded lib is ;)","title":"Examples"},{"location":"1.2/Expanding/Write-libs/#here-you-go","text":"If you think that your lib is absolutely awesome, you can open a PR to submit your idea. The best ideas will be implemented into vanilla Nougaro! If you think that this document is incomplete, that it didn\u2019t help you, or just to find some help, open an issue .","title":"Here you go!"},{"location":"1.2/Language/01syntax/","text":"Very basic syntax This document covers the basic syntax of Nougaro. Comments There are two types of comments in Nougaro: single-line comments and multi-line comments. Single-line comments Single-line comments start with # and end with a new line. They can start at the beginning of a line or after some code. Example: # this is a single-line comment foo(bar) # this calls the function foo with the argument bar Multi-line comments Multi-line comments start with /* and end with */ . They can start and stop at any point in the code. Example: /* this is a multi line comment */ print(\"hello\") /* this is also a multi line comment*/ Multi-line comments can also be only on one line: print(\"hello\") /* this is a multi-line comment that is only on one line */ Multi-line comments are simply ignored, which mean you can do things such as: print( /* this is a comment */ \"hello\" /* this is another comment */) print(/* this is actually a comment*/ \"hello\") Multi-line comments can be nested: /* comment /* comment-inside comment*/ /* /* comment-ception */ */ comment */ NOUGAROIGNORE comments Added in 0.22.0-beta These comments start and end with ..NOUGAROIGNORE or .. NOUGAROIGNORE , where . is any character among #@/%!$; . There should be nothing else on the NOUGAROIGNORE line. Example: file examples/fizzbuzz.cpp.c.py.noug (polyglott file using C/C++ comments, Python docstrings and Nougaro NOUGAROIGNORE comments). Lines Line are separated by a newline or a semicolon ( ; ). a b is equivalent to a ; b . Line joining If you don\u2019t have enough space on your line, you can join two \u201creal lines\u201d to form a Nougaro line, using a backspace. Example: var fruits = [\\ \"banana\", \\ \"apple\", \\ \"raspberry\", \\ \"pineapple\" \\ ] Blank lines Blank lines are ignored. Indentation Indentation is optional, as (mostly) every statement ends with end . Whitespaces Whitespaces are ignored everywhere (except in string literals and to differentiate things such as foobar and foo bar , or += and + = ).","title":"Very basic syntax"},{"location":"1.2/Language/01syntax/#very-basic-syntax","text":"This document covers the basic syntax of Nougaro.","title":"Very basic syntax"},{"location":"1.2/Language/01syntax/#comments","text":"There are two types of comments in Nougaro: single-line comments and multi-line comments.","title":"Comments"},{"location":"1.2/Language/01syntax/#single-line-comments","text":"Single-line comments start with # and end with a new line. They can start at the beginning of a line or after some code. Example: # this is a single-line comment foo(bar) # this calls the function foo with the argument bar","title":"Single-line comments"},{"location":"1.2/Language/01syntax/#multi-line-comments","text":"Multi-line comments start with /* and end with */ . They can start and stop at any point in the code. Example: /* this is a multi line comment */ print(\"hello\") /* this is also a multi line comment*/ Multi-line comments can also be only on one line: print(\"hello\") /* this is a multi-line comment that is only on one line */ Multi-line comments are simply ignored, which mean you can do things such as: print( /* this is a comment */ \"hello\" /* this is another comment */) print(/* this is actually a comment*/ \"hello\") Multi-line comments can be nested: /* comment /* comment-inside comment*/ /* /* comment-ception */ */ comment */","title":"Multi-line comments"},{"location":"1.2/Language/01syntax/#nougaroignore-comments","text":"Added in 0.22.0-beta These comments start and end with ..NOUGAROIGNORE or .. NOUGAROIGNORE , where . is any character among #@/%!$; . There should be nothing else on the NOUGAROIGNORE line. Example: file examples/fizzbuzz.cpp.c.py.noug (polyglott file using C/C++ comments, Python docstrings and Nougaro NOUGAROIGNORE comments).","title":"NOUGAROIGNORE comments"},{"location":"1.2/Language/01syntax/#lines","text":"Line are separated by a newline or a semicolon ( ; ). a b is equivalent to a ; b .","title":"Lines"},{"location":"1.2/Language/01syntax/#line-joining","text":"If you don\u2019t have enough space on your line, you can join two \u201creal lines\u201d to form a Nougaro line, using a backspace. Example: var fruits = [\\ \"banana\", \\ \"apple\", \\ \"raspberry\", \\ \"pineapple\" \\ ]","title":"Line joining"},{"location":"1.2/Language/01syntax/#blank-lines","text":"Blank lines are ignored.","title":"Blank lines"},{"location":"1.2/Language/01syntax/#indentation","text":"Indentation is optional, as (mostly) every statement ends with end .","title":"Indentation"},{"location":"1.2/Language/01syntax/#whitespaces","text":"Whitespaces are ignored everywhere (except in string literals and to differentiate things such as foobar and foo bar , or += and + = ).","title":"Whitespaces"},{"location":"1.2/Language/02number_literals/","text":"Number literals Here\u2019s all the different ways to write a number in Nougaro: 123 12.3 123e2 12.3e2 123e-2 123e+2 12.3e-2 12.3e+2 Note You can put + or - in front of the number to specify its sign. Example: -123 . Other bases: 0b01110 (base 2, binary) 0o17403 (base 8, octal) 0x4EF1A (base 16, hexadecimal) 0b10e30 0o70e30 Note 0xA0e30 will be interpreted as the hexadecimal number A0E30 ( 3*16^1 + 15*16^2 + 10*16^4 ) and not as 0xA0 * 10^30 _ in numbers Note You can put as much underscores ( _ ) as you want in a number literal, as long as the underscore are not at the beginning or at the end of the literal, or around the dot in floating-point numbers (ex: 10_694_254 is the same as 10694254 , 10_ is not valid, 12._3 is not valid and 12_._3 isn\u2019t either.)","title":"Number literals"},{"location":"1.2/Language/02number_literals/#number-literals","text":"Here\u2019s all the different ways to write a number in Nougaro: 123 12.3 123e2 12.3e2 123e-2 123e+2 12.3e-2 12.3e+2 Note You can put + or - in front of the number to specify its sign. Example: -123 . Other bases: 0b01110 (base 2, binary) 0o17403 (base 8, octal) 0x4EF1A (base 16, hexadecimal) 0b10e30 0o70e30 Note 0xA0e30 will be interpreted as the hexadecimal number A0E30 ( 3*16^1 + 15*16^2 + 10*16^4 ) and not as 0xA0 * 10^30","title":"Number literals"},{"location":"1.2/Language/02number_literals/#_-in-numbers","text":"Note You can put as much underscores ( _ ) as you want in a number literal, as long as the underscore are not at the beginning or at the end of the literal, or around the dot in floating-point numbers (ex: 10_694_254 is the same as 10694254 , 10_ is not valid, 12._3 is not valid and 12_._3 isn\u2019t either.)","title":"_ in numbers"},{"location":"1.2/Language/03string_literals/","text":"String literals String literals are delimited by \"\" , '' or \u00ab\u00bb . Examples: \"hello\" 'hello' \u00abhello\u00bb Escape characters: \\' : ' \\\" : \" \\\u00bb : \u00bb \\n : backline \\t : tab \\\\ : backslash \\xAA : unicode character number AA (hex) \\uAAAA : unicode character number AAAA (hex) \\UAAAAAAAA : unicode character number AAAAAAAA (hex) \\N{NAME} : unicode character with name NAME. Returns SyntaxError if it doesn\u2019t exist. Note The backslash isn\u2019t left if the next character is not recognised (example: \"\\/\" is the same as \"/\" , and not \"\\\\/\" ) Examples: 'I\\'m a string literal' \"He said: \\\"'I'm a string literal'\\\"\" \"\\\\ backslashes, \\t tabs and \\n backlines\" \u00abThis string has a \\N{NO BREAK SPACE}\u00bb \"\\N{Latin Small Letter C with Cedilla}: \\xe7\" \"\\N{Greek Small Letter Eta with Dasia and Oxia and Ypogegrammeni}: \\u1F95\" \"This is Person Shrugging (\ud83e\udd37): \\U0001f937\" Note You can use the meta nbspBetweenFrenchGuillemets to be forced to use a no-break-space or a narrow-no-break-space after \u00ab and before \u00bb . These NBSP are not counted in the string and this does not affect the other string delimiters.","title":"String literals"},{"location":"1.2/Language/03string_literals/#string-literals","text":"String literals are delimited by \"\" , '' or \u00ab\u00bb . Examples: \"hello\" 'hello' \u00abhello\u00bb Escape characters: \\' : ' \\\" : \" \\\u00bb : \u00bb \\n : backline \\t : tab \\\\ : backslash \\xAA : unicode character number AA (hex) \\uAAAA : unicode character number AAAA (hex) \\UAAAAAAAA : unicode character number AAAAAAAA (hex) \\N{NAME} : unicode character with name NAME. Returns SyntaxError if it doesn\u2019t exist. Note The backslash isn\u2019t left if the next character is not recognised (example: \"\\/\" is the same as \"/\" , and not \"\\\\/\" ) Examples: 'I\\'m a string literal' \"He said: \\\"'I'm a string literal'\\\"\" \"\\\\ backslashes, \\t tabs and \\n backlines\" \u00abThis string has a \\N{NO BREAK SPACE}\u00bb \"\\N{Latin Small Letter C with Cedilla}: \\xe7\" \"\\N{Greek Small Letter Eta with Dasia and Oxia and Ypogegrammeni}: \\u1F95\" \"This is Person Shrugging (\ud83e\udd37): \\U0001f937\" Note You can use the meta nbspBetweenFrenchGuillemets to be forced to use a no-break-space or a narrow-no-break-space after \u00ab and before \u00bb . These NBSP are not counted in the string and this does not affect the other string delimiters.","title":"String literals"},{"location":"1.2/Language/04identifiers_and_keywords/","text":"Identifiers and keywords Identifiers (variable names) can be composed of the 26 characters of the ASCII alphabet ( a to z \u202fthen A to Z ), in lower and upper case, the underscore _ and digits ( 0 to 9 ). Note An identifier can not start with a digit. Keywords The following identifiers are reserved and can not be used as variable names: and as assert break class continue def del do elif else end export for if import in loop not or read return step then to var while write xor","title":"Identifiers and keywords"},{"location":"1.2/Language/04identifiers_and_keywords/#identifiers-and-keywords","text":"Identifiers (variable names) can be composed of the 26 characters of the ASCII alphabet ( a to z \u202fthen A to Z ), in lower and upper case, the underscore _ and digits ( 0 to 9 ). Note An identifier can not start with a digit.","title":"Identifiers and keywords"},{"location":"1.2/Language/04identifiers_and_keywords/#keywords","text":"The following identifiers are reserved and can not be used as variable names: and as assert break class continue def del do elif else end export for if import in loop not or read return step then to var while write xor","title":"Keywords"},{"location":"1.2/Language/05operators/","text":"Operators Mathematical operators Here all the mathematical operators in Nougaro (ordered by priority): Nougaro Python Comments ^ ** power * * multiplication % % modulo / / division // // floor division + + addition - - substraction & & bitwise and | | bitwise or ^^ ^ bitwise xor ~ ~ bitwise not It respects operation priority and you can use parenthesis. Examples 3 * 4 returns 12 4 / 2 returns 2 1 + 1 returns 2 3 - 4 returns -1 10 % 7 returns 3 10 % 3 returns 1 10 // 7 returns 1 10 // 3 returns 3 5 ^ 2 returns 25 62 & 35 returns 34 ~1 returns -2 and ~-2 returns 1 5 + 5 * 3 + 2 returns 22 (5 + 5) * (3 + 2) returns 50 Test operators They are exactly same as Python ones: Nougaro Python Comments == == equals to != != different than < < less than <= <= less than or equals > > greater than >= >= greater than or equals in in check if a value is in another Note the in keyword can check if: int , float , str , list , DefaultValue or NoneValue is in a str any value is in a list Added in 0.22.0-beta DefaultValue is new in 0.22.0-beta. Logical operators There is one logical operator that isn't here in Python. There is a list: Nougaro Python Comments and and boolean 'and' (binary operator) or or boolean 'or' (binary operator) xor ^ boolean 'exclusive or' (binary operator) not not boolean 'not' (inverter) (unary operator)","title":"Operators"},{"location":"1.2/Language/05operators/#operators","text":"","title":"Operators"},{"location":"1.2/Language/05operators/#mathematical-operators","text":"Here all the mathematical operators in Nougaro (ordered by priority): Nougaro Python Comments ^ ** power * * multiplication % % modulo / / division // // floor division + + addition - - substraction & & bitwise and | | bitwise or ^^ ^ bitwise xor ~ ~ bitwise not It respects operation priority and you can use parenthesis.","title":"Mathematical operators"},{"location":"1.2/Language/05operators/#examples","text":"3 * 4 returns 12 4 / 2 returns 2 1 + 1 returns 2 3 - 4 returns -1 10 % 7 returns 3 10 % 3 returns 1 10 // 7 returns 1 10 // 3 returns 3 5 ^ 2 returns 25 62 & 35 returns 34 ~1 returns -2 and ~-2 returns 1 5 + 5 * 3 + 2 returns 22 (5 + 5) * (3 + 2) returns 50","title":"Examples"},{"location":"1.2/Language/05operators/#test-operators","text":"They are exactly same as Python ones: Nougaro Python Comments == == equals to != != different than < < less than <= <= less than or equals > > greater than >= >= greater than or equals in in check if a value is in another Note the in keyword can check if: int , float , str , list , DefaultValue or NoneValue is in a str any value is in a list Added in 0.22.0-beta DefaultValue is new in 0.22.0-beta.","title":"Test operators"},{"location":"1.2/Language/05operators/#logical-operators","text":"There is one logical operator that isn't here in Python. There is a list: Nougaro Python Comments and and boolean 'and' (binary operator) or or boolean 'or' (binary operator) xor ^ boolean 'exclusive or' (binary operator) not not boolean 'not' (inverter) (unary operator)","title":"Logical operators"},{"location":"1.2/Language/06values/","text":"Values Here is the list of the value types in Nougaro: int ( integers ). Internal type: int float ( floats ). Internal type: float str ( strings ). Internal type: str list ( lists ). Internal type: list NoneType ( None ). Internal type: NoneValue function . Internal type: func or method . module . Internal type: module constructor . Internal type: constructor object . Internal type: depends on the class\u2019 name, and it is <class> if the class has no name. Note Internal value types are base value (type: BaseValue ) and default value (type: DefaultValue ) Added in 0.22.0-beta DefaultValue is new in 0.22.0-beta. Changed in 0.22.0-beta Before 0.22.0-beta, a distinction was made between func (user-defined function or function in a module written in Nougaro) and built-in func (built-in function or function in a module written in Python). Numbers Numbers represents real-life numbers. The two types of numbers are int and float . To declare a number, you can use a number literal . Operations that can be used between two numbers are: addition, substraction, multiplication, power. If the second number is non-zero, division, modulo and floor division can be used. All these operations follow the mathematical logic (except for 0^0, that returns 1). Multiplication can be used between a integer (type int ) and a string or a list . For example, 3*\"str\" returns \"strstrstr\" , and 2*[1, 2] returns [1, 2, 1, 2] . In boolean context, a number is true if it is non-zero. Strings The type of a string is str . To declare a string, you can use a string literal The only operation that can be used between strings is addition, which concatenates the string with the other. For example, \"hello, \" + \"world!\" returns \"hello, world!\" . Multiplication can be used between a string and an integer (type int ). For example, \"str\"*3 returns \"strstrstr\" . In boolean context, a string is true if it contains at least one character. Lists Lists are a succession of values. To declare a list, you can use brackets ( [] ), and put every value separated by a comma ( , ) inside. They may be 0 values. To create a list with elements from another list (and other elements), you can use this syntax: [1, 2, *list_, 5] (which is [1, 2, 3, 4, 5] if list_ is [3, 4] ). The only operation that can be used between two lists is multiplication, which extends the first list with the content of the second list. This can also be achieved using extend(list1, list2) Addition can be used between a list and any other value to add an element to the list. Substraction can be used between a list and an integer (type int ) to pop (i.e. delete) an element by index. This supports negative numbers. The returned value is the list after the pop. This can be achieved with pop(list, index) , although this returns the popped value. Multiplication can be used between a list and an integer (type int ). For example, [1, 2]*2 returns [1, 2, 1, 2] . Division can be used between a list and an integer (type int ) to get an element by index. This supports negative numbers. This can be achieved using list(index) or get(list, index) . In boolean context, a list is true if it is not empty None None is a value to denote the absence of other values. It is accessible trought the None built-in variable. No operation can be used on None . In boolean context, None is false. Modules A module is a value containing various useful functions and constants. A list of modules can be found here . Importing modules is detailed here . The procedure to create your own module is detailed here . No operation can be used on modules. In boolean context, a module is true. Changed in 0.22.0-beta Prior to 0.22.0-beta, a module was false in boolean context.","title":"Values"},{"location":"1.2/Language/06values/#values","text":"Here is the list of the value types in Nougaro: int ( integers ). Internal type: int float ( floats ). Internal type: float str ( strings ). Internal type: str list ( lists ). Internal type: list NoneType ( None ). Internal type: NoneValue function . Internal type: func or method . module . Internal type: module constructor . Internal type: constructor object . Internal type: depends on the class\u2019 name, and it is <class> if the class has no name. Note Internal value types are base value (type: BaseValue ) and default value (type: DefaultValue ) Added in 0.22.0-beta DefaultValue is new in 0.22.0-beta. Changed in 0.22.0-beta Before 0.22.0-beta, a distinction was made between func (user-defined function or function in a module written in Nougaro) and built-in func (built-in function or function in a module written in Python).","title":"Values"},{"location":"1.2/Language/06values/#numbers","text":"Numbers represents real-life numbers. The two types of numbers are int and float . To declare a number, you can use a number literal . Operations that can be used between two numbers are: addition, substraction, multiplication, power. If the second number is non-zero, division, modulo and floor division can be used. All these operations follow the mathematical logic (except for 0^0, that returns 1). Multiplication can be used between a integer (type int ) and a string or a list . For example, 3*\"str\" returns \"strstrstr\" , and 2*[1, 2] returns [1, 2, 1, 2] . In boolean context, a number is true if it is non-zero.","title":"Numbers"},{"location":"1.2/Language/06values/#strings","text":"The type of a string is str . To declare a string, you can use a string literal The only operation that can be used between strings is addition, which concatenates the string with the other. For example, \"hello, \" + \"world!\" returns \"hello, world!\" . Multiplication can be used between a string and an integer (type int ). For example, \"str\"*3 returns \"strstrstr\" . In boolean context, a string is true if it contains at least one character.","title":"Strings"},{"location":"1.2/Language/06values/#lists","text":"Lists are a succession of values. To declare a list, you can use brackets ( [] ), and put every value separated by a comma ( , ) inside. They may be 0 values. To create a list with elements from another list (and other elements), you can use this syntax: [1, 2, *list_, 5] (which is [1, 2, 3, 4, 5] if list_ is [3, 4] ). The only operation that can be used between two lists is multiplication, which extends the first list with the content of the second list. This can also be achieved using extend(list1, list2) Addition can be used between a list and any other value to add an element to the list. Substraction can be used between a list and an integer (type int ) to pop (i.e. delete) an element by index. This supports negative numbers. The returned value is the list after the pop. This can be achieved with pop(list, index) , although this returns the popped value. Multiplication can be used between a list and an integer (type int ). For example, [1, 2]*2 returns [1, 2, 1, 2] . Division can be used between a list and an integer (type int ) to get an element by index. This supports negative numbers. This can be achieved using list(index) or get(list, index) . In boolean context, a list is true if it is not empty","title":"Lists"},{"location":"1.2/Language/06values/#none","text":"None is a value to denote the absence of other values. It is accessible trought the None built-in variable. No operation can be used on None . In boolean context, None is false.","title":"None"},{"location":"1.2/Language/06values/#modules","text":"A module is a value containing various useful functions and constants. A list of modules can be found here . Importing modules is detailed here . The procedure to create your own module is detailed here . No operation can be used on modules. In boolean context, a module is true. Changed in 0.22.0-beta Prior to 0.22.0-beta, a module was false in boolean context.","title":"Modules"},{"location":"1.2/Language/07variables/","text":"Variables Definition Use the syntax var identifier = value (see identifiers and values ) to assign the value value to the variable named identifier . The expression var identifier = value returns value . To assign the same value to multiple variables, you can use var variable1 = var variable2 = var variable3 = value . If you want to assign multiple values to multiple variables, you can use var variable1, variable2 = value1, value2 . This can be used to swap variables: var a, b = b, a . Except for keywords , there are no prohibited variable name. Edition You can edit variables by multiple ways: var a = value ; var a += value : same as var a = a + value ; var a ++ : same as var a += 1 ; var a -= value : same as var a = a - value ; var a -- : same as var a -= 1 ; var a *= value : same as var a = a * value ; var a /= value : same as var a = a / value ; var a ^= value : same as var a = a ^ value ; var a //= value : same as var a = a // value ; var a %= value : same as var a = a % value ; var a ||= value : same as var a = a or value ; var a &&= value : same as var a = a and value ; var a ^^^= value : same as var a = a xor value ; var a |= value : same as var a = a | value ; var a &= value : same as var a = a & value ; var a ^^= value : same as var a = a ^^ value ; var a === value : same as var a = a == value ; var a <== value : same as var a = a <= value ; var a <<= value : same as var a = a < value ; var a >== value : same as var a = a >= value ; var a >>= value : same as var a = a > value . Info For details about these operators, see this page . Note You can also edit multiple variables at the same time: var a, b += 1, 2 : same as var a += 1 ; var b += 2 var a, b ++ : same as var a, b += 1, 1 var a, b //= b, a : same as var c = a ; var a //= b ; var b //= c ; del c Access To access to a variable, you can: give the identifier: foo (returns the value of foo ) use the special syntax: foo ? bar ? a ? b (returns the value of foo if it is defined, otherwise the value of bar ... You can put as much ? identifier as you want.) Then, you can put an expression at the end, such as 2 . In this case, the value returned will be 2 if none of the given identifiers is defined. Deletion If you don't need a variable anymore, you can delete it with the del keyword: del identifier . Examples var foo = var bar = 12 while foo != bar - 1 then var bar -= 1 (see while loop ) Example for deletion Create a variable a , the delete it: nougaro> var a = 1 1 nougaro> del a But be careful! It can return errors: nougaro> var a = 1 1 nougaro> del a nougaro> del a Traceback (more recent call last): In file <stdin>, line 1, in <program>: del a ^ NotDefinedError: a is not defined.","title":"Variables"},{"location":"1.2/Language/07variables/#variables","text":"","title":"Variables"},{"location":"1.2/Language/07variables/#definition","text":"Use the syntax var identifier = value (see identifiers and values ) to assign the value value to the variable named identifier . The expression var identifier = value returns value . To assign the same value to multiple variables, you can use var variable1 = var variable2 = var variable3 = value . If you want to assign multiple values to multiple variables, you can use var variable1, variable2 = value1, value2 . This can be used to swap variables: var a, b = b, a . Except for keywords , there are no prohibited variable name.","title":"Definition"},{"location":"1.2/Language/07variables/#edition","text":"You can edit variables by multiple ways: var a = value ; var a += value : same as var a = a + value ; var a ++ : same as var a += 1 ; var a -= value : same as var a = a - value ; var a -- : same as var a -= 1 ; var a *= value : same as var a = a * value ; var a /= value : same as var a = a / value ; var a ^= value : same as var a = a ^ value ; var a //= value : same as var a = a // value ; var a %= value : same as var a = a % value ; var a ||= value : same as var a = a or value ; var a &&= value : same as var a = a and value ; var a ^^^= value : same as var a = a xor value ; var a |= value : same as var a = a | value ; var a &= value : same as var a = a & value ; var a ^^= value : same as var a = a ^^ value ; var a === value : same as var a = a == value ; var a <== value : same as var a = a <= value ; var a <<= value : same as var a = a < value ; var a >== value : same as var a = a >= value ; var a >>= value : same as var a = a > value . Info For details about these operators, see this page . Note You can also edit multiple variables at the same time: var a, b += 1, 2 : same as var a += 1 ; var b += 2 var a, b ++ : same as var a, b += 1, 1 var a, b //= b, a : same as var c = a ; var a //= b ; var b //= c ; del c","title":"Edition"},{"location":"1.2/Language/07variables/#access","text":"To access to a variable, you can: give the identifier: foo (returns the value of foo ) use the special syntax: foo ? bar ? a ? b (returns the value of foo if it is defined, otherwise the value of bar ... You can put as much ? identifier as you want.) Then, you can put an expression at the end, such as 2 . In this case, the value returned will be 2 if none of the given identifiers is defined.","title":"Access"},{"location":"1.2/Language/07variables/#deletion","text":"If you don't need a variable anymore, you can delete it with the del keyword: del identifier .","title":"Deletion"},{"location":"1.2/Language/07variables/#examples","text":"var foo = var bar = 12 while foo != bar - 1 then var bar -= 1 (see while loop )","title":"Examples"},{"location":"1.2/Language/07variables/#example-for-deletion","text":"Create a variable a , the delete it: nougaro> var a = 1 1 nougaro> del a But be careful! It can return errors: nougaro> var a = 1 1 nougaro> del a nougaro> del a Traceback (more recent call last): In file <stdin>, line 1, in <program>: del a ^ NotDefinedError: a is not defined.","title":"Example for deletion"},{"location":"1.2/Language/08tests/","text":"Test statements List There is the list of test keywords in Nougaro : Nougaro Python if if then : elif elif else else assert assert Syntax if <cond> then <expr> if <cond> then <expr> else <expr> if <cond> then <expr> elif <cond> then <expr> if <cond> then <expr> elif <cond> then <expr> else <expr> if <cond> then <expr> elif <cond> then <expr> elif <cond> then <expr> if <cond> then <expr> elif <cond> then <expr> elif <cond> then <expr> else <expr> etc. Multi-line : if <cond> then <some code here> end if <cond> then <some code here> else <some other code> end if <cond> then <some code here> else <some other code> end etc. Behaviour The condition is checked. If it is true, the expression in the if branch is executed. Otherwise, Nougaro checks for an elif branch. If it exists, it re-checks the condition, etc. If none of the conditions is true and that there is an else branch, the expression in the else branch is executed. If there is no else branch, nothing is executed. Dangling-else ambiguity When Nougaro encounters a 'dangling else', such as in this case: if a then if b then foo() else bar() then the else is attributed to the closest if . In this case, the else will be part of the if b . If you want the else to be part of the if a statement, simply use parenthesis: if a then (if b then foo()) else bar() Logicals constants Nougaro Python Comments True True equals to 1 False False equals to 0 Conditions Conditions can be any value , which will be interpreted in its boolean context. Conditions can also use test operators . For instance, a == b checks if a is equal to b , where a < b checks if a is strictly less than b .\u202fYou can chain multiple operators: a == b <= c != d checks if a is equal to b and if b is less than or equal to c and if c is different from d . Multiple conditions can be combined with boolean/logical operators . Here is the truth table of the logical operators: and a b a and b 0 0 0 0 1 0 1 0 0 1 1 1 or a b a or b 0 0 0 0 1 1 1 0 1 1 1 1 xor a b a xor b 0 0 0 0 1 1 1 0 1 1 1 0 not a not a 0 1 1 0 There is no priority amongst boolean operators, so for instance a and b or c xor d gives ((a and b) or c) xor d . After interpretation, a condition is always 0 or 1 ( False or True ). Examples if foo == bar then var foo = 12 if bar != foo then var foo = 12 else var bar = 13 * if foo > bar and 12 <= variable then var bar = variable elif foo < bar xor foo > variable then var foo = 3 end if foo > bar and 12 <= variable then var bar = variable elif foo < bar xor foo > variable then var foo = 3 else var foo = 12 end Assertions The assert keyword can be used to quickly check for a condition, and crash if the condition is not met. Its syntax is the following: assert (condition) assert (condition), \"error message.\" assert (condition), [\"A list error\", \"message, because\", \"why not\"] If (condition) is true, nothing happens and the program continues. However, if it is false, the program crashes with AssertionError with the error message specified in the code (or without any error message if no error message is specified.) Starting from 1.2.0, any value can be passed as an error message (previously, only strs were valid error messages)","title":"Test statements"},{"location":"1.2/Language/08tests/#test-statements","text":"","title":"Test statements"},{"location":"1.2/Language/08tests/#list","text":"There is the list of test keywords in Nougaro : Nougaro Python if if then : elif elif else else assert assert","title":"List"},{"location":"1.2/Language/08tests/#syntax","text":"if <cond> then <expr> if <cond> then <expr> else <expr> if <cond> then <expr> elif <cond> then <expr> if <cond> then <expr> elif <cond> then <expr> else <expr> if <cond> then <expr> elif <cond> then <expr> elif <cond> then <expr> if <cond> then <expr> elif <cond> then <expr> elif <cond> then <expr> else <expr> etc. Multi-line : if <cond> then <some code here> end if <cond> then <some code here> else <some other code> end if <cond> then <some code here> else <some other code> end etc.","title":"Syntax"},{"location":"1.2/Language/08tests/#behaviour","text":"The condition is checked. If it is true, the expression in the if branch is executed. Otherwise, Nougaro checks for an elif branch. If it exists, it re-checks the condition, etc. If none of the conditions is true and that there is an else branch, the expression in the else branch is executed. If there is no else branch, nothing is executed.","title":"Behaviour"},{"location":"1.2/Language/08tests/#dangling-else-ambiguity","text":"When Nougaro encounters a 'dangling else', such as in this case: if a then if b then foo() else bar() then the else is attributed to the closest if . In this case, the else will be part of the if b . If you want the else to be part of the if a statement, simply use parenthesis: if a then (if b then foo()) else bar()","title":"Dangling-else ambiguity"},{"location":"1.2/Language/08tests/#logicals-constants","text":"Nougaro Python Comments True True equals to 1 False False equals to 0","title":"Logicals constants"},{"location":"1.2/Language/08tests/#conditions","text":"Conditions can be any value , which will be interpreted in its boolean context. Conditions can also use test operators . For instance, a == b checks if a is equal to b , where a < b checks if a is strictly less than b .\u202fYou can chain multiple operators: a == b <= c != d checks if a is equal to b and if b is less than or equal to c and if c is different from d . Multiple conditions can be combined with boolean/logical operators . Here is the truth table of the logical operators:","title":"Conditions"},{"location":"1.2/Language/08tests/#and","text":"a b a and b 0 0 0 0 1 0 1 0 0 1 1 1","title":"and"},{"location":"1.2/Language/08tests/#or","text":"a b a or b 0 0 0 0 1 1 1 0 1 1 1 1","title":"or"},{"location":"1.2/Language/08tests/#xor","text":"a b a xor b 0 0 0 0 1 1 1 0 1 1 1 0","title":"xor"},{"location":"1.2/Language/08tests/#not","text":"a not a 0 1 1 0 There is no priority amongst boolean operators, so for instance a and b or c xor d gives ((a and b) or c) xor d . After interpretation, a condition is always 0 or 1 ( False or True ).","title":"not"},{"location":"1.2/Language/08tests/#examples","text":"if foo == bar then var foo = 12 if bar != foo then var foo = 12 else var bar = 13 * if foo > bar and 12 <= variable then var bar = variable elif foo < bar xor foo > variable then var foo = 3 end if foo > bar and 12 <= variable then var bar = variable elif foo < bar xor foo > variable then var foo = 3 else var foo = 12 end","title":"Examples"},{"location":"1.2/Language/08tests/#assertions","text":"The assert keyword can be used to quickly check for a condition, and crash if the condition is not met. Its syntax is the following: assert (condition) assert (condition), \"error message.\" assert (condition), [\"A list error\", \"message, because\", \"why not\"] If (condition) is true, nothing happens and the program continues. However, if it is false, the program crashes with AssertionError with the error message specified in the code (or without any error message if no error message is specified.) Starting from 1.2.0, any value can be passed as an error message (previously, only strs were valid error messages)","title":"Assertions"},{"location":"1.2/Language/09loops/","text":"Loops Loops are made to execute the same piece of code multiple times in a row. Here is a list of available loops in Nougaro: Nougaro Python C/C++ for for for while while while do ... then loop while (nothing) do ... while loop while True while (1) for The for loop can have two usages: browse every element in a list (or a str ), or iterate a certain number of times. for each To browse every element in a list (or a str ), use the following syntax: # One line for identifier in list then ... # Multiple lines for identifier in list then ... ... end For each element of the list, the variable identifier will be set to the corresponding element, and this variable can be used inside the loop. for i = ... to ... # One line for identifier = start_value to end_value then ... for identifier = start_value to end_value step step_value then ... # Multiple lines for identifier = start_value to end_value then ... ... end for identifier = start_value to end_value step step_value then ... ... end start_value , end_value and step_value are integers . If step_value is not specified, the default value is 0. This loop starts by setting the variable identifier to start_value , then executes the loop. It then adds step_value to identifier . If the value of identifier is greater than or equal to end_value , the loops stops without executing. Otherwise, it runs until this condition is reached. Note In for loops, the start value can be less than the end value. In that case, don\u2019t forget to give a negative step! while The while loop is used to repeat a piece of code as long as a condition is met. It has the following syntax: # One line while condition then ... # Multiple lines while condition then ... ... end do The do loop is used to execute a piece of code a first time, then repeat it as long as a condition is met. It has the following syntax: # One line do ... then loop while condition # Multiple lines do ... ... then loop while condition loop Added in 1.1.0 The loop loop was added in 1.1.0 The loop loop is an infinite loop. It has the following syntax: # One line loop ... # Multible lines loop ... ... end The loop loop stops whenever it encounters a break (like every other loop) Labels Added in 0.20.0-beta Labels were added in 0.20.0-beta. You can label a loop using for:label , while:label or do:label . Labels are identifiers . You can use labels with break and continue . break , continue Changed in 0.20.0-beta Prior to 0.20.0-beta, break and continue did append None to the return list. To re-enable this behaviour, you can enable appendNoneOnBreak or appendNoneOnContinue metas . Added in 0.20.0-beta Labels were added in 0.20.0-beta. The break statement completely stops the loop. If there is a returned list, the value is not added to this list. You can use break and return ... to return a specific value. The continue statement omit the code after it, and execute another time the loop like if the last time was ended. continue and break work normally at the first execution of a do body. continue:label will continue the loop that has this label. If you\u2019re in an :inner loop inside a :label loop, the :inner loop will break and the :label loop will continue. break:label will break the loop that has this label. If you\u2019re in an :inner loop inside a :label loop, the :inner AND the :label loop will break.","title":"Loops"},{"location":"1.2/Language/09loops/#loops","text":"Loops are made to execute the same piece of code multiple times in a row. Here is a list of available loops in Nougaro: Nougaro Python C/C++ for for for while while while do ... then loop while (nothing) do ... while loop while True while (1)","title":"Loops"},{"location":"1.2/Language/09loops/#for","text":"The for loop can have two usages: browse every element in a list (or a str ), or iterate a certain number of times.","title":"for"},{"location":"1.2/Language/09loops/#for-each","text":"To browse every element in a list (or a str ), use the following syntax: # One line for identifier in list then ... # Multiple lines for identifier in list then ... ... end For each element of the list, the variable identifier will be set to the corresponding element, and this variable can be used inside the loop.","title":"for each"},{"location":"1.2/Language/09loops/#for-i-to","text":"# One line for identifier = start_value to end_value then ... for identifier = start_value to end_value step step_value then ... # Multiple lines for identifier = start_value to end_value then ... ... end for identifier = start_value to end_value step step_value then ... ... end start_value , end_value and step_value are integers . If step_value is not specified, the default value is 0. This loop starts by setting the variable identifier to start_value , then executes the loop. It then adds step_value to identifier . If the value of identifier is greater than or equal to end_value , the loops stops without executing. Otherwise, it runs until this condition is reached. Note In for loops, the start value can be less than the end value. In that case, don\u2019t forget to give a negative step!","title":"for i = ... to ..."},{"location":"1.2/Language/09loops/#while","text":"The while loop is used to repeat a piece of code as long as a condition is met. It has the following syntax: # One line while condition then ... # Multiple lines while condition then ... ... end","title":"while"},{"location":"1.2/Language/09loops/#do","text":"The do loop is used to execute a piece of code a first time, then repeat it as long as a condition is met. It has the following syntax: # One line do ... then loop while condition # Multiple lines do ... ... then loop while condition","title":"do"},{"location":"1.2/Language/09loops/#loop","text":"Added in 1.1.0 The loop loop was added in 1.1.0 The loop loop is an infinite loop. It has the following syntax: # One line loop ... # Multible lines loop ... ... end The loop loop stops whenever it encounters a break (like every other loop)","title":"loop"},{"location":"1.2/Language/09loops/#labels","text":"Added in 0.20.0-beta Labels were added in 0.20.0-beta. You can label a loop using for:label , while:label or do:label . Labels are identifiers . You can use labels with break and continue .","title":"Labels"},{"location":"1.2/Language/09loops/#break-continue","text":"Changed in 0.20.0-beta Prior to 0.20.0-beta, break and continue did append None to the return list. To re-enable this behaviour, you can enable appendNoneOnBreak or appendNoneOnContinue metas . Added in 0.20.0-beta Labels were added in 0.20.0-beta. The break statement completely stops the loop. If there is a returned list, the value is not added to this list. You can use break and return ... to return a specific value. The continue statement omit the code after it, and execute another time the loop like if the last time was ended. continue and break work normally at the first execution of a do body. continue:label will continue the loop that has this label. If you\u2019re in an :inner loop inside a :label loop, the :inner loop will break and the :label loop will continue. break:label will break the loop that has this label. If you\u2019re in an :inner loop inside a :label loop, the :inner AND the :label loop will break.","title":"break, continue"},{"location":"1.2/Language/10functions/","text":"Functions Internal type: func . No operation can be used on functions. Functions are true in boolean context. Changed in 0.22.0-beta Prior to 0.22.0-beta, functions were false in boolean context. Definition To define a function, use the def keyword and an arrow: def name(param1, param2) -> <some code here> . You can omit the name, but in this case you have to call directly the function or to store it in a variable: (def (param1) -> <some code here>)(<arg1>) ; var somefunc = def (param1) -> <some code here> You can define multi-line functions: def name(param1, param2, param3) <some code here> end Note The arguments given and the variables created inside the function are deleted at the end of the function execution. Similarly, the variables created outside the function and before its definition are accessible inside the function, but modifications are not saved. Info There can be 0 parameters. Optional parameters Note Added in 0.22.0-beta To define optional parameters, use this syntax: def name(param1, param2, param3)(optional_param1=default_value, optional_param2=default_value) <some code here> end return statement In the code executed by your function, there can be the return statement. It stops the function. If a value is placed after the statement, the function will return this value when called. In the other cases, it will return None . Call Call a function using this syntax: func(arg1, arg2) You can store arguments in a list and use *list . E.g. func(*list_) , func(*[1, 2, 3]) . Optional arguments Note Added in 0.22.0-beta You can omit optional arguments, which will set them to their default value. In this case: def name(param1, param2, param3)(optional_param1=default_value, optional_param2=default_value) , if you want to keep optional_param1 to its default value but not optional_param2 , you can use: name(argument1, argument2, argument3, <default>, optional_argument2) (keep < and > around <default> ) Examples def foo(a, b) -> a*b - b def bar(a, b) -> (a-1)*b var c = 2 var d = 5 if foo(c, d) == bar(c, d) then var e = True else var e = False (In this case, e = 1) def foo(a, b) if a == 2 then return a + b else return b end end def foo(a, b)(should_return_none = False) if a == 2 then return a + b else if should_return_none then return return b end end foo(1, 5) # 5 foo(2, 5) # 7 foo(1, 5, <default>) # 5 foo(2, 5, <default>) # 7 foo(1, 5, True) # None foo(2, 5, True) # 7","title":"Functions"},{"location":"1.2/Language/10functions/#functions","text":"Internal type: func . No operation can be used on functions. Functions are true in boolean context. Changed in 0.22.0-beta Prior to 0.22.0-beta, functions were false in boolean context.","title":"Functions"},{"location":"1.2/Language/10functions/#definition","text":"To define a function, use the def keyword and an arrow: def name(param1, param2) -> <some code here> . You can omit the name, but in this case you have to call directly the function or to store it in a variable: (def (param1) -> <some code here>)(<arg1>) ; var somefunc = def (param1) -> <some code here> You can define multi-line functions: def name(param1, param2, param3) <some code here> end Note The arguments given and the variables created inside the function are deleted at the end of the function execution. Similarly, the variables created outside the function and before its definition are accessible inside the function, but modifications are not saved. Info There can be 0 parameters.","title":"Definition"},{"location":"1.2/Language/10functions/#optional-parameters","text":"Note Added in 0.22.0-beta To define optional parameters, use this syntax: def name(param1, param2, param3)(optional_param1=default_value, optional_param2=default_value) <some code here> end","title":"Optional parameters"},{"location":"1.2/Language/10functions/#return-statement","text":"In the code executed by your function, there can be the return statement. It stops the function. If a value is placed after the statement, the function will return this value when called. In the other cases, it will return None .","title":"return statement"},{"location":"1.2/Language/10functions/#call","text":"Call a function using this syntax: func(arg1, arg2) You can store arguments in a list and use *list . E.g. func(*list_) , func(*[1, 2, 3]) .","title":"Call"},{"location":"1.2/Language/10functions/#optional-arguments","text":"Note Added in 0.22.0-beta You can omit optional arguments, which will set them to their default value. In this case: def name(param1, param2, param3)(optional_param1=default_value, optional_param2=default_value) , if you want to keep optional_param1 to its default value but not optional_param2 , you can use: name(argument1, argument2, argument3, <default>, optional_argument2) (keep < and > around <default> )","title":"Optional arguments"},{"location":"1.2/Language/10functions/#examples","text":"def foo(a, b) -> a*b - b def bar(a, b) -> (a-1)*b var c = 2 var d = 5 if foo(c, d) == bar(c, d) then var e = True else var e = False (In this case, e = 1) def foo(a, b) if a == 2 then return a + b else return b end end def foo(a, b)(should_return_none = False) if a == 2 then return a + b else if should_return_none then return return b end end foo(1, 5) # 5 foo(2, 5) # 7 foo(1, 5, <default>) # 5 foo(2, 5, <default>) # 7 foo(1, 5, True) # None foo(2, 5, True) # 7","title":"Examples"},{"location":"1.2/Language/11attributes/","text":"Attributes Values in Nougaro can have attributes, i.e. subvalues that have a name. They can be set using the classical variable definition syntax: var variable.attribute = value They can be accessed using the dot-syntax: variable.attribute Note You can even access any name defined in the context of the value. For instance, variable.print references the print built-in function. Pro tip The next time you have a bug, document it. If it is documented, it is therefore not a bug.","title":"Attributes"},{"location":"1.2/Language/11attributes/#attributes","text":"Values in Nougaro can have attributes, i.e. subvalues that have a name. They can be set using the classical variable definition syntax: var variable.attribute = value They can be accessed using the dot-syntax: variable.attribute Note You can even access any name defined in the context of the value. For instance, variable.print references the print built-in function. Pro tip The next time you have a bug, document it. If it is documented, it is therefore not a bug.","title":"Attributes"},{"location":"1.2/Language/12classes/","text":"Classes and objects Note Added in 0.15-beta Nougaro is an object-oriented programming language, which means you can create objects using classes . Class definition To define a class, use this syntax: class Name ... end To create attributes , just use the basic var id = value syntax: class Name var a = 3 var b = 1 end To create methods , just use the basic def syntax . Access to object\u2019s attributes with this : class Name var a = 3 var b = 1 def increment_b(by) var this.b += 1 end def get_a() return this.a end end Methods are attributes themselves. Methods Internal type: method . No operation can be used on methods. Methods are true in boolean context. Changed in 0.22.0-beta Prior to 0.22.0-beta, methods were false in boolean context. Constructor value Internal type: constructor . No operation can be used on constructors. Constructors are false in boolean context. Inheritance To inherit from another class, use the class Name(Iherit) syntax: class ChildOfName(Name) var c = 3 def set_c(new_value) var this.c = new_value end def a_plus_b_plus_c() return this.get_a() + this.b + this.c end end Object Classes can be instanced into objects by calling them. Example: var instance = Name() instance.increment_b(10) assert instance.b == 11 Internal type: Name (depends on the class\u2019 name). No operation can be used on objects. Objects are false in boolean context. Example See the stack.noug example located in ./examples/ in the main Nougaro repository.","title":"Classes and objects"},{"location":"1.2/Language/12classes/#classes-and-objects","text":"Note Added in 0.15-beta Nougaro is an object-oriented programming language, which means you can create objects using classes .","title":"Classes and objects"},{"location":"1.2/Language/12classes/#class-definition","text":"To define a class, use this syntax: class Name ... end To create attributes , just use the basic var id = value syntax: class Name var a = 3 var b = 1 end To create methods , just use the basic def syntax . Access to object\u2019s attributes with this : class Name var a = 3 var b = 1 def increment_b(by) var this.b += 1 end def get_a() return this.a end end Methods are attributes themselves.","title":"Class definition"},{"location":"1.2/Language/12classes/#methods","text":"Internal type: method . No operation can be used on methods. Methods are true in boolean context. Changed in 0.22.0-beta Prior to 0.22.0-beta, methods were false in boolean context.","title":"Methods"},{"location":"1.2/Language/12classes/#constructor-value","text":"Internal type: constructor . No operation can be used on constructors. Constructors are false in boolean context.","title":"Constructor value"},{"location":"1.2/Language/12classes/#inheritance","text":"To inherit from another class, use the class Name(Iherit) syntax: class ChildOfName(Name) var c = 3 def set_c(new_value) var this.c = new_value end def a_plus_b_plus_c() return this.get_a() + this.b + this.c end end","title":"Inheritance"},{"location":"1.2/Language/12classes/#object","text":"Classes can be instanced into objects by calling them. Example: var instance = Name() instance.increment_b(10) assert instance.b == 11 Internal type: Name (depends on the class\u2019 name). No operation can be used on objects. Objects are false in boolean context.","title":"Object"},{"location":"1.2/Language/12classes/#example","text":"See the stack.noug example located in ./examples/ in the main Nougaro repository.","title":"Example"},{"location":"1.2/Language/13read_and_write_files/","text":"Read and write in files Read To read a file, use read \"path/to/file.ext\" or read \"path/to/file\" line_number . You can assign this value to a variable by using read \"file\" >> identifier line_number or var identifier = read \"file\" line_number . line_number is an integer and is optional. You can use \"<stdin>\" as file name to get a line of input from the user. It is exactly like the input built-in function . The read expression returns the content of the file (or of the line). Write To write in a file, use write \"sometext\" >> \"path/to/file.ext\" line_number . line_number is an integer and is optional. To overwrite the content when you write, replace >> by !>> . You can use \"<stdout>\" as file name to print a text in the console. It is exactly like the print built-in function . If you overwrite the contents of <stdout> , the console is cleared (exactly like the clear built-in function .) The write expression returns the text that was wrote in the file.","title":"Read and write in files"},{"location":"1.2/Language/13read_and_write_files/#read-and-write-in-files","text":"","title":"Read and write in files"},{"location":"1.2/Language/13read_and_write_files/#read","text":"To read a file, use read \"path/to/file.ext\" or read \"path/to/file\" line_number . You can assign this value to a variable by using read \"file\" >> identifier line_number or var identifier = read \"file\" line_number . line_number is an integer and is optional. You can use \"<stdin>\" as file name to get a line of input from the user. It is exactly like the input built-in function . The read expression returns the content of the file (or of the line).","title":"Read"},{"location":"1.2/Language/13read_and_write_files/#write","text":"To write in a file, use write \"sometext\" >> \"path/to/file.ext\" line_number . line_number is an integer and is optional. To overwrite the content when you write, replace >> by !>> . You can use \"<stdout>\" as file name to print a text in the console. It is exactly like the print built-in function . If you overwrite the contents of <stdout> , the console is cleared (exactly like the clear built-in function .) The write expression returns the text that was wrote in the file.","title":"Write"},{"location":"1.2/Language/14import/","text":"Import and export import and export are two keywords related to modules /libraries. Import The import keyword is used to import a module in the current code. It follows the syntax import name or import name as alias . It checks for name in Nougaro stardard library and in the current directory for a file named name.noug . dir.subdir.name looks for ./dir/subdir/name.noug . Note: the \u201ccurrent directory\u201d is the directory of the file that were executed. For instance, if the file foo.noug (in the directory project ) imported dir.bar , and that dir/bar.noug has import name , name is checked in the project directory. The \u201ccurrent directory\u201d is the working directory ( pwd ) if you launched an interactive session (shell). The import keyword created a module value with, as attributes, all the values exported by the module. Export The export keyword is used to export a value in a module, that will become an attribute of the module\u2019s value when imported. It follows the syntax export name or export expression as name . More in this page .","title":"Import and export"},{"location":"1.2/Language/14import/#import-and-export","text":"import and export are two keywords related to modules /libraries.","title":"Import and export"},{"location":"1.2/Language/14import/#import","text":"The import keyword is used to import a module in the current code. It follows the syntax import name or import name as alias . It checks for name in Nougaro stardard library and in the current directory for a file named name.noug . dir.subdir.name looks for ./dir/subdir/name.noug . Note: the \u201ccurrent directory\u201d is the directory of the file that were executed. For instance, if the file foo.noug (in the directory project ) imported dir.bar , and that dir/bar.noug has import name , name is checked in the project directory. The \u201ccurrent directory\u201d is the working directory ( pwd ) if you launched an interactive session (shell). The import keyword created a module value with, as attributes, all the values exported by the module.","title":"Import"},{"location":"1.2/Language/14import/#export","text":"The export keyword is used to export a value in a module, that will become an attribute of the module\u2019s value when imported. It follows the syntax export name or export expression as name . More in this page .","title":"Export"},{"location":"1.2/Language/15metas/","text":"Metas Note Added in 0.19.0-beta Metas are a way to use other (or old) functionnalities in Nougaro. They\u2019re used by adding @meta metaName or @meta metaName value at the beginning of a file or in an interactive shell. Note that, instead of @ , you can use any of those prefixes: #@ , %@ , @@ , -@ , $@ . appendNoneOnBreak Note Added in 0.20.0-beta If enabled, this meta forces a break statement to append None to the list returned by the loop . appendNoneOnContinue Note Added in 0.20.0-beta If enabled, this meta forces a continue statement to append None to the list returned by the loop . legacyAbs The legacyAbs meta lets you use the old syntax (in the prototype-1 version) for absolute value, which is |...| . However, this meta disables the bitwise or operation . Example: @meta legacyAbs print(|-1|) # 1 var a = 12 print(|-a|) # 12 nbspBetweenFrenchGuillemets The nbspBetweenFrenchGuillemets meta requires you, if you use the french string quotes ( \u00ab\u00bb ), to put a no-break space (or a narrow no-break space) after the \u00ab and before the \u00bb . Example: @meta nbspBetweenFrenchGuillemets print(\u00ab hello, world \u00bb) /* hello, world * note that the quotes aren\u2019t regular spaces */ setTheTestValueTo Sets __the_test_value__ to the str value given in the meta value If no value is given, it sets it to None .","title":"Metas"},{"location":"1.2/Language/15metas/#metas","text":"Note Added in 0.19.0-beta Metas are a way to use other (or old) functionnalities in Nougaro. They\u2019re used by adding @meta metaName or @meta metaName value at the beginning of a file or in an interactive shell. Note that, instead of @ , you can use any of those prefixes: #@ , %@ , @@ , -@ , $@ .","title":"Metas"},{"location":"1.2/Language/15metas/#appendnoneonbreak","text":"Note Added in 0.20.0-beta If enabled, this meta forces a break statement to append None to the list returned by the loop .","title":"appendNoneOnBreak"},{"location":"1.2/Language/15metas/#appendnoneoncontinue","text":"Note Added in 0.20.0-beta If enabled, this meta forces a continue statement to append None to the list returned by the loop .","title":"appendNoneOnContinue"},{"location":"1.2/Language/15metas/#legacyabs","text":"The legacyAbs meta lets you use the old syntax (in the prototype-1 version) for absolute value, which is |...| . However, this meta disables the bitwise or operation . Example: @meta legacyAbs print(|-1|) # 1 var a = 12 print(|-a|) # 12","title":"legacyAbs"},{"location":"1.2/Language/15metas/#nbspbetweenfrenchguillemets","text":"The nbspBetweenFrenchGuillemets meta requires you, if you use the french string quotes ( \u00ab\u00bb ), to put a no-break space (or a narrow no-break space) after the \u00ab and before the \u00bb . Example: @meta nbspBetweenFrenchGuillemets print(\u00ab hello, world \u00bb) /* hello, world * note that the quotes aren\u2019t regular spaces */","title":"nbspBetweenFrenchGuillemets"},{"location":"1.2/Language/15metas/#setthetestvalueto","text":"Sets __the_test_value__ to the str value given in the meta value If no value is given, it sets it to None .","title":"setTheTestValueTo"},{"location":"1.2/Language/16dollar_print/","text":"Dollar-print syntax The dollar-print syntax is the following: $indentifier It checks if identifier exists, and if so, it prits it. Otherwise, it prints $identifier . If no identifier is given, it prints $ . Since 1.2.0, a space can be inserted between $ and identifier .","title":"Dollar-print syntax"},{"location":"1.2/Language/16dollar_print/#dollar-print-syntax","text":"The dollar-print syntax is the following: $indentifier It checks if identifier exists, and if so, it prits it. Otherwise, it prints $identifier . If no identifier is given, it prints $ . Since 1.2.0, a space can be inserted between $ and identifier .","title":"Dollar-print syntax"},{"location":"1.2/stdlib/01builtin-variables/","text":"List of built-in variables Useful ones __args__ Note Added in 0.16.0-beta List of the command line arguments (type string). Examples (assuming your Nougaro command is noug ): noug -c \"print(__args__)\" -t d 78876876 -v tth prints [\"-c\", \"-t\", \"d\", \"78876876\", \"-v\", \"tth\"] noug examples/args.noug -t d 78876876 -v tth prints [\"examples/args.noug\", \"-t\", \"d\", \"78876876\", \"-v\", \"tth\"] (check out the contents of args.noug ) noug -c \"print(__args__)\" prints [\"-c\"] entering the shell then entering print(__args__) prints [] Nougaro informations Note This section is duplicated in this file __noug_version__ : string of the Nougaro version (e.g. \"0.15.0-beta\".) You can use the noug_version lib to have better informations. __data_version__ : the Nougaro data version, an internal version keeping track of changes in the config file directory structure __version_id__ : an ID increased at least once per version __python_version__ : string of the Python version (e.g. \"3.10.5\") __noug_dir__ : string of the absolute path of the directory where shell.(py/exe) is located. May be used with file I/O read and write statements. OS informations __os_name__ : name of the Operating System (e.g. \"Windows\", \"Linux\", \"Darwin\" \u2013 for macOS \u2013, \"Java\" \u2013 for Jython \u2013, \u2026) __os_release__ : release of the OS (e.g. \"10\" for Windows 10, \"Vista\" for Windows Vista.) __os_version__ : version of the OS (e.g. \"10.0.19044\" for Windows 10 build 19044.) Examples print(\"You use Nougaro version \" + __noug_version__ + \", interpreted with Python \" + __python_version__) print(\"You use \" + __os_name__ + \" \" + __os_release__ + \" \" + __os_version__) On the Jean Dubois' old computer, under Windows 10 21H2, it returns: You use Nougaro version alpha 0.8.1, interpreted with Python 3.10.5 You use Windows 10 10.0.19044 And under his Linux: You use nougaro version beta 0.14, interpreted with Python 3.11.4 You use Linux 6.2.0-27-generic #28-Ubuntu SMP PREEMPT_DYNAMIC Wed Jul 12 22:39:51 UTC 2023 Note that this code is in example.noug","title":"List of built-in variables"},{"location":"1.2/stdlib/01builtin-variables/#list-of-built-in-variables","text":"","title":"List of built-in variables"},{"location":"1.2/stdlib/01builtin-variables/#useful-ones","text":"","title":"Useful ones"},{"location":"1.2/stdlib/01builtin-variables/#__args__","text":"Note Added in 0.16.0-beta List of the command line arguments (type string). Examples (assuming your Nougaro command is noug ): noug -c \"print(__args__)\" -t d 78876876 -v tth prints [\"-c\", \"-t\", \"d\", \"78876876\", \"-v\", \"tth\"] noug examples/args.noug -t d 78876876 -v tth prints [\"examples/args.noug\", \"-t\", \"d\", \"78876876\", \"-v\", \"tth\"] (check out the contents of args.noug ) noug -c \"print(__args__)\" prints [\"-c\"] entering the shell then entering print(__args__) prints []","title":"__args__"},{"location":"1.2/stdlib/01builtin-variables/#nougaro-informations","text":"Note This section is duplicated in this file __noug_version__ : string of the Nougaro version (e.g. \"0.15.0-beta\".) You can use the noug_version lib to have better informations. __data_version__ : the Nougaro data version, an internal version keeping track of changes in the config file directory structure __version_id__ : an ID increased at least once per version __python_version__ : string of the Python version (e.g. \"3.10.5\") __noug_dir__ : string of the absolute path of the directory where shell.(py/exe) is located. May be used with file I/O read and write statements.","title":"Nougaro informations"},{"location":"1.2/stdlib/01builtin-variables/#os-informations","text":"__os_name__ : name of the Operating System (e.g. \"Windows\", \"Linux\", \"Darwin\" \u2013 for macOS \u2013, \"Java\" \u2013 for Jython \u2013, \u2026) __os_release__ : release of the OS (e.g. \"10\" for Windows 10, \"Vista\" for Windows Vista.) __os_version__ : version of the OS (e.g. \"10.0.19044\" for Windows 10 build 19044.)","title":"OS informations"},{"location":"1.2/stdlib/01builtin-variables/#examples","text":"print(\"You use Nougaro version \" + __noug_version__ + \", interpreted with Python \" + __python_version__) print(\"You use \" + __os_name__ + \" \" + __os_release__ + \" \" + __os_version__) On the Jean Dubois' old computer, under Windows 10 21H2, it returns: You use Nougaro version alpha 0.8.1, interpreted with Python 3.10.5 You use Windows 10 10.0.19044 And under his Linux: You use nougaro version beta 0.14, interpreted with Python 3.11.4 You use Linux 6.2.0-27-generic #28-Ubuntu SMP PREEMPT_DYNAMIC Wed Jul 12 22:39:51 UTC 2023 Note that this code is in example.noug","title":"Examples"},{"location":"1.2/stdlib/02builtin-functions/","text":"List of built-in functions Note In this page, type of parameters are noted using the param: type syntax (type can eventually be Any ), and optional parameters are noted between <> and their default value are specified with = . Also, *args tells that this function can take any number of arguments. Input/Output print Syntax: print(str: str) . Prints str in console. Returns None. Example: print(\"hello, world!\") . print_ret Syntax: print_ret(str: str) . Prints str in console and returns it. Example: print_ret(\"hello, world!\") . print_in_red Syntax: print_in_red(str: str) . Prints str in red in console. Returns None. Example: print_in_red(\"Error: this error is RED\") . print_in_red_ret Syntax: print_in_red_ret(str: str) . Prints str in red in console and returns it. Example: print_in_red_ret(\"Error: this error is RED and returned\") print_in_green Syntax: print_in_green(str: str) . Prints str in green in console. Returns None. Example: print_in_green(\"Info: this info is GREEN\") . print_in_green_ret Syntax: print_in_green_ret(str: str) . Prints str in green in console and returns it. Example: print_in_green_ret(\"Info: this info is GREEN and returned\") input Syntax: input(<text_to_display: str = \"\">) . Inputs a str. If text_to_display is specified, it is printed as a prompt. input_int Syntax: input_int(<text_to_display: str = \"\">) . Inputs an int. If text_to_display is specified, it is printed as a prompt. input_num Syntax: input_num(<text_to_display: str = \"\">) . Inputs an int or a float. If text_to_display is specified, it is printed as a prompt. Types Note Python isinstance() returns True if value is an object of the given type. type Syntax: type(value: Any) Returns a str of the internal type of the value. It can be str , int , float , list , func , module , ... is_int Syntax: is_int(value: Any) Returns True if value is an integer , False if it is not. Corresponds to isinstance(value, int) . is_float Syntax: is_float(value: Any) Returns True if value is a float , False if it is not. Corresponds to isinstance(value, float) . is_num Syntax: is_num(value: Any) Returns True if value is a number , False if it is not. Corresponds to isinstance(value, float) or isinstance(value, int) . is_str Syntax: is_str(value: Any) Returns True if value is a string , False if it is not. Corresponds to isinstance(value, str) . is_list Syntax: is_list(value: Any) Returns True if value is a list , False if it is not. Corresponds to isinstance(value, list) . is_func Syntax: is_func(value: Any) Returns True if value is a function , False if it is not. Corresponds to isinstance(value, BaseFunction) where BaseFunction is function, method and builtin function. is_module Syntax: is_module(value: Any) Returns True if value is a module , False if it is not. Corresponds to isinstance(value, module) . Example: import math; is_module(math) will be True , but is_module(3.2) will be False . is_none Syntax: is_none(value: Any) Returns True if value is None , False if it is not. Corresponds to isinstance(value, NoneValue) or value is None . is_constructor Added in 0.20.0-beta Syntax: is_constructor(value: Any) Returns True if value is a constructor , False if it is not. Corresponds to isinstance(value, Constructor) . is_object Added in 0.20.0-beta Syntax: is_object(value: Any) Returns True if value is an object , False if it is not. Corresponds to isinstance(value, object) . Note: in Nougaro, everything is not an object! Type conversions str Syntax: str(value: Any) Converts value to string (may return an error). int Syntax: int(value: Any) Converts value to int (may return an error). float Syntax: float(value: Any) Converts value to float (may return an error). Note that float(\"inf\") is infinity and float(\"nan\") is not a number. list Syntax: list(value: Any) Converts value to list (may return an error). String and lists operators upper Syntax: upper(value: str) Returns upper-cased string. Example: upper('nougaro') returns 'NOUGARO' . lower Syntax: lower(value: str) Returns lower-cased string. Example: lower('NOUGARO') returns 'nougaro' . split Syntax: split(value: str, <char: str = \" \">) Returns splitted string. For example, split('a b c') returns ['a', 'b', 'c'] ; split('a b c', 'b') returns ['a ', ' c'] . startswith Syntax: startswith(value: str, substring: str) Returns True if value starts with substring . Example: \"nougaro\" starts with \"noug\" , but \"canal du midi\" does not start with \"minimes\" . endswith Syntax: endswith(value: str, substring: str) Returns True if value ends with substring . Example: \"nougaro\" ends with \"garo\" , but \"canal du midi\" does not end with \"minimes\" . len Syntax: len(value: list | str) Returns the number of elements in a list (i.e. its length), or the number of chars in a str. reverse Syntax: reverse(value: list | str) Reverses list or string value by reference and returns the result. Example: reverse([1, 2, 3]) is [3, 2, 1] . append Syntax: append(list: list, value: Any) Appends value at the end of the list. Returns a list. If the list is a variable, edits the variable. pop Syntax: pop(list: list, <index: int = -1>) : Deletes value at given index. Returns the popped element. If the list is a variable, edits the variable. If index is not given, the last element of the list is popped. insert Syntax: insert(list: list, value: Any, <index: int = -1>) Inserts value at the given index in the list. replace Syntax: replace(list: list, index: int, value: Any) Replaces value at the given index in the list. extend Syntax: extend(list1: list, list2: list, <remove_duplicates: int = False>) Appends to list1 the elements of list2 . Returns list1 . If list1 is a variable, edits the variable. If remove_duplicates is True, removes the list2 elements already in list1 before extending. get Syntax: get(list: list, index: int) Returns the element of the list at the given index. max Syntax: max(list: list, <ignore_not_num: int = False>) Returns the maximum element of the list. Ignores elements that are not numbers if ignore_not_num is True , otherwise crashes if such element exists. min Syntax: min(list: list, <ignore_not_num: int = False>) Returns the minimum element of the list. Ignores elements that are not numbers if ignore_not_num is True , otherwise crashes if such element exists. sort Syntax: sort(value: list, <mode: str = \"timsort\">) Note Slowsort and bogosort were added in 1.2.0 Sorts list value according to mode mode . Lefts the original list unchanged and returns a new list. Available modes are: timsort (default), bogo , miracle , panic , sleep , slow and stalin . timsort is Python\u2019s default algorithm bogo sort randomly shuffles the list until it is sorted. May take an infinite amount of time! miracle sort literally waits for a miracle. It checks if the list is sorted, and if it is not, it checks again. If a cosmic ray (or another miracle ) flips the right bits in your RAM so the list is sorted, miraclesort will return the sorted list. panic sort checks if the list is sorted. If so, it returns it. If the list is not sorted, this causes an illegal hardware instruction (Unix and GNU/Linux) or a segfault (Windows). sleep sort take only a list of positive integers. It starts as many threads as elements in the list, and each thread waits for as much seconds as the element. For instance, when the list [5, 2, 3, 0] is passed in sleepsort, it starts by launching 4 threads that wait for 5, 2, 3 and 0 seconds. When a thread finishes to wait, it append its element to the list. Use the mode sleep-verbose to see what\u2019s happening. slow sort really sorts the list, but is very slow (even the best case is worst than bubble sort). See the wikipedia page about slowsort. stalin sends to gulag values that are not sorted (i.e. pop them from the list). Example: [1, 4, 3, 7, 6, 10, 2, 5, 23] will be sorted as [1, 4, 7, 10, 23] . Number operators round Syntax: round(number: int | float, <n_digits: int = 0>) Rounds number to the closest number with n_digits decimals. n_digits may be 0 or negative, in which case the returned type is int . Changed in 0.22.0-beta The round built-in function previously returned int only when n_digits was 0 (now it is the case when n_digits \u2a7d 0) Characters and Unicode Note There\u2019s more in the unicodedata module. ord Syntax: ord(c: str) Returns an integer representing the Unicode code point of that c . c is a string with only one character. Ex: ord('a') returns 97 and ord('\u20ac') returns 8364 . chr Syntax: chr(i: int) Returns the string representing the character whose Unicode code point is the integer i . For example, chr(97) returns the string 'a' , and chr(8364) returns the string '\u20ac' . License __gpl__ Syntax: __gpl__(<print_in_term: int = False>) If print_in_term is True , prints the General Public License 3.0 in the terminal. Otherwise, it opens the GPL in the default system program. Files __path_exists__ Syntax: path_exists(path: str) Returns True ( 1 ) if the path exists, False ( 0 ) otherwise. Technical exit Syntax: exit(<stop_code: int | str = 0>) Just quits the interpreter. clear Syntax: clear() Clears the screen. Returns None . void Syntax: void(*args) Does nothing. Returns None . run Syntax: run(file_name: str) Executes the code in the file file_name . example Syntax: example(<example_name: str | None = None>, <return_example_value: int = False>) Executes the code in the file examples/(example_name).noug . If example_name is None , executes the code in the file example.noug . If return_example_value is True , returns the list value from the example execution. system_call Warning This function may be dangerous, because any system command can be executed. Syntax: system_call(cmd: str) Calls cmd . Prints the result of the command and returnt the stop code as str . __python__ Warning This function may be dangerous, because any Python code can be executed. Syntax: __python__(source: str) Runs Python\u2019s eval(source) . __is_keyword__ Syntax: __is_keyword__(word: str) Check if word is a valid Nougaro keyword . __is_valid_token_type__ Syntax: __is_valid_token_type__(tok_type: str) Checks if tok_type is a valid Nougaro token type, such as 'EE' or 'BITWISENOT'. __test__ Syntax: __test__(<should_print_ok: int = False>, <should_i_return: int = False>) Executes the test file for the Nougaro interpreter. If should_print_ok is True , prints \u201cOK\u201d each times a test was succesful. If should_i_return is true, returns the value of the interpreted file. __py_type__ Syntax: __py_type__(value) Returns the string of Python\u2019s type(value) . For instance, __py_type__(__py_type__) is \"<class 'src.runtime.values.functions.builtin_function.BuiltInFunction'>\" __how_many_lines_of_code__ Syntax: __how_many_lines_of_code__(<print_details: Any = True>) Lets you know how many lines of code there are in Nougaro. If print_details is True, details how many lines of code they are in each file. Mathematical functions Please refer to Math module .","title":"List of built-in functions"},{"location":"1.2/stdlib/02builtin-functions/#list-of-built-in-functions","text":"Note In this page, type of parameters are noted using the param: type syntax (type can eventually be Any ), and optional parameters are noted between <> and their default value are specified with = . Also, *args tells that this function can take any number of arguments.","title":"List of built-in functions"},{"location":"1.2/stdlib/02builtin-functions/#inputoutput","text":"","title":"Input/Output"},{"location":"1.2/stdlib/02builtin-functions/#print","text":"Syntax: print(str: str) . Prints str in console. Returns None. Example: print(\"hello, world!\") .","title":"print"},{"location":"1.2/stdlib/02builtin-functions/#print_ret","text":"Syntax: print_ret(str: str) . Prints str in console and returns it. Example: print_ret(\"hello, world!\") .","title":"print_ret"},{"location":"1.2/stdlib/02builtin-functions/#print_in_red","text":"Syntax: print_in_red(str: str) . Prints str in red in console. Returns None. Example: print_in_red(\"Error: this error is RED\") .","title":"print_in_red"},{"location":"1.2/stdlib/02builtin-functions/#print_in_red_ret","text":"Syntax: print_in_red_ret(str: str) . Prints str in red in console and returns it. Example: print_in_red_ret(\"Error: this error is RED and returned\")","title":"print_in_red_ret"},{"location":"1.2/stdlib/02builtin-functions/#print_in_green","text":"Syntax: print_in_green(str: str) . Prints str in green in console. Returns None. Example: print_in_green(\"Info: this info is GREEN\") .","title":"print_in_green"},{"location":"1.2/stdlib/02builtin-functions/#print_in_green_ret","text":"Syntax: print_in_green_ret(str: str) . Prints str in green in console and returns it. Example: print_in_green_ret(\"Info: this info is GREEN and returned\")","title":"print_in_green_ret"},{"location":"1.2/stdlib/02builtin-functions/#input","text":"Syntax: input(<text_to_display: str = \"\">) . Inputs a str. If text_to_display is specified, it is printed as a prompt.","title":"input"},{"location":"1.2/stdlib/02builtin-functions/#input_int","text":"Syntax: input_int(<text_to_display: str = \"\">) . Inputs an int. If text_to_display is specified, it is printed as a prompt.","title":"input_int"},{"location":"1.2/stdlib/02builtin-functions/#input_num","text":"Syntax: input_num(<text_to_display: str = \"\">) . Inputs an int or a float. If text_to_display is specified, it is printed as a prompt.","title":"input_num"},{"location":"1.2/stdlib/02builtin-functions/#types","text":"Note Python isinstance() returns True if value is an object of the given type.","title":"Types"},{"location":"1.2/stdlib/02builtin-functions/#type","text":"Syntax: type(value: Any) Returns a str of the internal type of the value. It can be str , int , float , list , func , module , ...","title":"type"},{"location":"1.2/stdlib/02builtin-functions/#is_int","text":"Syntax: is_int(value: Any) Returns True if value is an integer , False if it is not. Corresponds to isinstance(value, int) .","title":"is_int"},{"location":"1.2/stdlib/02builtin-functions/#is_float","text":"Syntax: is_float(value: Any) Returns True if value is a float , False if it is not. Corresponds to isinstance(value, float) .","title":"is_float"},{"location":"1.2/stdlib/02builtin-functions/#is_num","text":"Syntax: is_num(value: Any) Returns True if value is a number , False if it is not. Corresponds to isinstance(value, float) or isinstance(value, int) .","title":"is_num"},{"location":"1.2/stdlib/02builtin-functions/#is_str","text":"Syntax: is_str(value: Any) Returns True if value is a string , False if it is not. Corresponds to isinstance(value, str) .","title":"is_str"},{"location":"1.2/stdlib/02builtin-functions/#is_list","text":"Syntax: is_list(value: Any) Returns True if value is a list , False if it is not. Corresponds to isinstance(value, list) .","title":"is_list"},{"location":"1.2/stdlib/02builtin-functions/#is_func","text":"Syntax: is_func(value: Any) Returns True if value is a function , False if it is not. Corresponds to isinstance(value, BaseFunction) where BaseFunction is function, method and builtin function.","title":"is_func"},{"location":"1.2/stdlib/02builtin-functions/#is_module","text":"Syntax: is_module(value: Any) Returns True if value is a module , False if it is not. Corresponds to isinstance(value, module) . Example: import math; is_module(math) will be True , but is_module(3.2) will be False .","title":"is_module"},{"location":"1.2/stdlib/02builtin-functions/#is_none","text":"Syntax: is_none(value: Any) Returns True if value is None , False if it is not. Corresponds to isinstance(value, NoneValue) or value is None .","title":"is_none"},{"location":"1.2/stdlib/02builtin-functions/#is_constructor","text":"Added in 0.20.0-beta Syntax: is_constructor(value: Any) Returns True if value is a constructor , False if it is not. Corresponds to isinstance(value, Constructor) .","title":"is_constructor"},{"location":"1.2/stdlib/02builtin-functions/#is_object","text":"Added in 0.20.0-beta Syntax: is_object(value: Any) Returns True if value is an object , False if it is not. Corresponds to isinstance(value, object) . Note: in Nougaro, everything is not an object!","title":"is_object"},{"location":"1.2/stdlib/02builtin-functions/#type-conversions","text":"","title":"Type conversions"},{"location":"1.2/stdlib/02builtin-functions/#str","text":"Syntax: str(value: Any) Converts value to string (may return an error).","title":"str"},{"location":"1.2/stdlib/02builtin-functions/#int","text":"Syntax: int(value: Any) Converts value to int (may return an error).","title":"int"},{"location":"1.2/stdlib/02builtin-functions/#float","text":"Syntax: float(value: Any) Converts value to float (may return an error). Note that float(\"inf\") is infinity and float(\"nan\") is not a number.","title":"float"},{"location":"1.2/stdlib/02builtin-functions/#list","text":"Syntax: list(value: Any) Converts value to list (may return an error).","title":"list"},{"location":"1.2/stdlib/02builtin-functions/#string-and-lists-operators","text":"","title":"String and lists operators"},{"location":"1.2/stdlib/02builtin-functions/#upper","text":"Syntax: upper(value: str) Returns upper-cased string. Example: upper('nougaro') returns 'NOUGARO' .","title":"upper"},{"location":"1.2/stdlib/02builtin-functions/#lower","text":"Syntax: lower(value: str) Returns lower-cased string. Example: lower('NOUGARO') returns 'nougaro' .","title":"lower"},{"location":"1.2/stdlib/02builtin-functions/#split","text":"Syntax: split(value: str, <char: str = \" \">) Returns splitted string. For example, split('a b c') returns ['a', 'b', 'c'] ; split('a b c', 'b') returns ['a ', ' c'] .","title":"split"},{"location":"1.2/stdlib/02builtin-functions/#startswith","text":"Syntax: startswith(value: str, substring: str) Returns True if value starts with substring . Example: \"nougaro\" starts with \"noug\" , but \"canal du midi\" does not start with \"minimes\" .","title":"startswith"},{"location":"1.2/stdlib/02builtin-functions/#endswith","text":"Syntax: endswith(value: str, substring: str) Returns True if value ends with substring . Example: \"nougaro\" ends with \"garo\" , but \"canal du midi\" does not end with \"minimes\" .","title":"endswith"},{"location":"1.2/stdlib/02builtin-functions/#len","text":"Syntax: len(value: list | str) Returns the number of elements in a list (i.e. its length), or the number of chars in a str.","title":"len"},{"location":"1.2/stdlib/02builtin-functions/#reverse","text":"Syntax: reverse(value: list | str) Reverses list or string value by reference and returns the result. Example: reverse([1, 2, 3]) is [3, 2, 1] .","title":"reverse"},{"location":"1.2/stdlib/02builtin-functions/#append","text":"Syntax: append(list: list, value: Any) Appends value at the end of the list. Returns a list. If the list is a variable, edits the variable.","title":"append"},{"location":"1.2/stdlib/02builtin-functions/#pop","text":"Syntax: pop(list: list, <index: int = -1>) : Deletes value at given index. Returns the popped element. If the list is a variable, edits the variable. If index is not given, the last element of the list is popped.","title":"pop"},{"location":"1.2/stdlib/02builtin-functions/#insert","text":"Syntax: insert(list: list, value: Any, <index: int = -1>) Inserts value at the given index in the list.","title":"insert"},{"location":"1.2/stdlib/02builtin-functions/#replace","text":"Syntax: replace(list: list, index: int, value: Any) Replaces value at the given index in the list.","title":"replace"},{"location":"1.2/stdlib/02builtin-functions/#extend","text":"Syntax: extend(list1: list, list2: list, <remove_duplicates: int = False>) Appends to list1 the elements of list2 . Returns list1 . If list1 is a variable, edits the variable. If remove_duplicates is True, removes the list2 elements already in list1 before extending.","title":"extend"},{"location":"1.2/stdlib/02builtin-functions/#get","text":"Syntax: get(list: list, index: int) Returns the element of the list at the given index.","title":"get"},{"location":"1.2/stdlib/02builtin-functions/#max","text":"Syntax: max(list: list, <ignore_not_num: int = False>) Returns the maximum element of the list. Ignores elements that are not numbers if ignore_not_num is True , otherwise crashes if such element exists.","title":"max"},{"location":"1.2/stdlib/02builtin-functions/#min","text":"Syntax: min(list: list, <ignore_not_num: int = False>) Returns the minimum element of the list. Ignores elements that are not numbers if ignore_not_num is True , otherwise crashes if such element exists.","title":"min"},{"location":"1.2/stdlib/02builtin-functions/#sort","text":"Syntax: sort(value: list, <mode: str = \"timsort\">) Note Slowsort and bogosort were added in 1.2.0 Sorts list value according to mode mode . Lefts the original list unchanged and returns a new list. Available modes are: timsort (default), bogo , miracle , panic , sleep , slow and stalin . timsort is Python\u2019s default algorithm bogo sort randomly shuffles the list until it is sorted. May take an infinite amount of time! miracle sort literally waits for a miracle. It checks if the list is sorted, and if it is not, it checks again. If a cosmic ray (or another miracle ) flips the right bits in your RAM so the list is sorted, miraclesort will return the sorted list. panic sort checks if the list is sorted. If so, it returns it. If the list is not sorted, this causes an illegal hardware instruction (Unix and GNU/Linux) or a segfault (Windows). sleep sort take only a list of positive integers. It starts as many threads as elements in the list, and each thread waits for as much seconds as the element. For instance, when the list [5, 2, 3, 0] is passed in sleepsort, it starts by launching 4 threads that wait for 5, 2, 3 and 0 seconds. When a thread finishes to wait, it append its element to the list. Use the mode sleep-verbose to see what\u2019s happening. slow sort really sorts the list, but is very slow (even the best case is worst than bubble sort). See the wikipedia page about slowsort. stalin sends to gulag values that are not sorted (i.e. pop them from the list). Example: [1, 4, 3, 7, 6, 10, 2, 5, 23] will be sorted as [1, 4, 7, 10, 23] .","title":"sort"},{"location":"1.2/stdlib/02builtin-functions/#number-operators","text":"","title":"Number operators"},{"location":"1.2/stdlib/02builtin-functions/#round","text":"Syntax: round(number: int | float, <n_digits: int = 0>) Rounds number to the closest number with n_digits decimals. n_digits may be 0 or negative, in which case the returned type is int . Changed in 0.22.0-beta The round built-in function previously returned int only when n_digits was 0 (now it is the case when n_digits \u2a7d 0)","title":"round"},{"location":"1.2/stdlib/02builtin-functions/#characters-and-unicode","text":"Note There\u2019s more in the unicodedata module.","title":"Characters and Unicode"},{"location":"1.2/stdlib/02builtin-functions/#ord","text":"Syntax: ord(c: str) Returns an integer representing the Unicode code point of that c . c is a string with only one character. Ex: ord('a') returns 97 and ord('\u20ac') returns 8364 .","title":"ord"},{"location":"1.2/stdlib/02builtin-functions/#chr","text":"Syntax: chr(i: int) Returns the string representing the character whose Unicode code point is the integer i . For example, chr(97) returns the string 'a' , and chr(8364) returns the string '\u20ac' .","title":"chr"},{"location":"1.2/stdlib/02builtin-functions/#license","text":"","title":"License"},{"location":"1.2/stdlib/02builtin-functions/#__gpl__","text":"Syntax: __gpl__(<print_in_term: int = False>) If print_in_term is True , prints the General Public License 3.0 in the terminal. Otherwise, it opens the GPL in the default system program.","title":"__gpl__"},{"location":"1.2/stdlib/02builtin-functions/#files","text":"","title":"Files"},{"location":"1.2/stdlib/02builtin-functions/#__path_exists__","text":"Syntax: path_exists(path: str) Returns True ( 1 ) if the path exists, False ( 0 ) otherwise.","title":"__path_exists__"},{"location":"1.2/stdlib/02builtin-functions/#technical","text":"","title":"Technical"},{"location":"1.2/stdlib/02builtin-functions/#exit","text":"Syntax: exit(<stop_code: int | str = 0>) Just quits the interpreter.","title":"exit"},{"location":"1.2/stdlib/02builtin-functions/#clear","text":"Syntax: clear() Clears the screen. Returns None .","title":"clear"},{"location":"1.2/stdlib/02builtin-functions/#void","text":"Syntax: void(*args) Does nothing. Returns None .","title":"void"},{"location":"1.2/stdlib/02builtin-functions/#run","text":"Syntax: run(file_name: str) Executes the code in the file file_name .","title":"run"},{"location":"1.2/stdlib/02builtin-functions/#example","text":"Syntax: example(<example_name: str | None = None>, <return_example_value: int = False>) Executes the code in the file examples/(example_name).noug . If example_name is None , executes the code in the file example.noug . If return_example_value is True , returns the list value from the example execution.","title":"example"},{"location":"1.2/stdlib/02builtin-functions/#system_call","text":"Warning This function may be dangerous, because any system command can be executed. Syntax: system_call(cmd: str) Calls cmd . Prints the result of the command and returnt the stop code as str .","title":"system_call"},{"location":"1.2/stdlib/02builtin-functions/#__python__","text":"Warning This function may be dangerous, because any Python code can be executed. Syntax: __python__(source: str) Runs Python\u2019s eval(source) .","title":"__python__"},{"location":"1.2/stdlib/02builtin-functions/#__is_keyword__","text":"Syntax: __is_keyword__(word: str) Check if word is a valid Nougaro keyword .","title":"__is_keyword__"},{"location":"1.2/stdlib/02builtin-functions/#__is_valid_token_type__","text":"Syntax: __is_valid_token_type__(tok_type: str) Checks if tok_type is a valid Nougaro token type, such as 'EE' or 'BITWISENOT'.","title":"__is_valid_token_type__"},{"location":"1.2/stdlib/02builtin-functions/#__test__","text":"Syntax: __test__(<should_print_ok: int = False>, <should_i_return: int = False>) Executes the test file for the Nougaro interpreter. If should_print_ok is True , prints \u201cOK\u201d each times a test was succesful. If should_i_return is true, returns the value of the interpreted file.","title":"__test__"},{"location":"1.2/stdlib/02builtin-functions/#__py_type__","text":"Syntax: __py_type__(value) Returns the string of Python\u2019s type(value) . For instance, __py_type__(__py_type__) is \"<class 'src.runtime.values.functions.builtin_function.BuiltInFunction'>\"","title":"__py_type__"},{"location":"1.2/stdlib/02builtin-functions/#__how_many_lines_of_code__","text":"Syntax: __how_many_lines_of_code__(<print_details: Any = True>) Lets you know how many lines of code there are in Nougaro. If print_details is True, details how many lines of code they are in each file.","title":"__how_many_lines_of_code__"},{"location":"1.2/stdlib/02builtin-functions/#mathematical-functions","text":"Please refer to Math module .","title":"Mathematical functions"},{"location":"1.2/stdlib/modules/","text":"Modules Modules allow you to spend less time coding, and often implement things that would be usually undoable in Nougaro. You can import a module using the import keyword. Here is the list of available Modules in Nougaro: Debug Hello (just prints \u201cHello, world!\u201d when imported) Lorem Math Noug Version Random Statistics Time Unicodedata Webbrowser","title":"Modules"},{"location":"1.2/stdlib/modules/#modules","text":"Modules allow you to spend less time coding, and often implement things that would be usually undoable in Nougaro. You can import a module using the import keyword. Here is the list of available Modules in Nougaro: Debug Hello (just prints \u201cHello, world!\u201d when imported) Lorem Math Noug Version Random Statistics Time Unicodedata Webbrowser","title":"Modules"},{"location":"1.2/stdlib/modules/debug/","text":"Debug Source code Debug is a lib that contains some debugging tools. Constants debug.is_debug_enabled : 1 if DEBUG mode is enabled, else 0 debug.should_print_context : 1 if PRINT CONTEXT debug option is enabled, else 0 debug.should_print_time (new in 0.20.0-beta): 1 if PRINT TIME debug option is enabled, else 0 Functions debug.debug_mode_enable Syntax: debug.debug_mode_enable Enables DEBUG mode. debug.enable Alias for debug.debug_mode_enable debug.debug_mode_disable Syntax: debug.debug_mode_disable Disables DEBUG mode. debug.disable Alias for debug.debug_mode_disable debug.print_context Syntax: debug.print_context Enables PRINT CONTEXT debug option. debug.stop_print_context Syntax: debug.stop_print_context Disables PRINT CONTEXT debug option. debug.print_time Added in 0.20.0-beta Syntax: debug.print_time Enables PRINT TIME debug option. debug.stop_print_time Added in 0.20.0-beta Syntax: debug.stop_print_time Disables PRINT TIME debug option. debug.enable_all Changed in 0.20.0-beta Now also enables PRINT TIME debug option. Syntax: debug.enable_all Enables DEBUG mode with all its options debug.disable_all Changed in 0.20.0-beta Now also disables PRINT TIME debug option. Syntax: debug.disable_all Disables DEBUG mode and all its options.","title":"Debug"},{"location":"1.2/stdlib/modules/debug/#debug","text":"Source code Debug is a lib that contains some debugging tools.","title":"Debug"},{"location":"1.2/stdlib/modules/debug/#constants","text":"debug.is_debug_enabled : 1 if DEBUG mode is enabled, else 0 debug.should_print_context : 1 if PRINT CONTEXT debug option is enabled, else 0 debug.should_print_time (new in 0.20.0-beta): 1 if PRINT TIME debug option is enabled, else 0","title":"Constants"},{"location":"1.2/stdlib/modules/debug/#functions","text":"","title":"Functions"},{"location":"1.2/stdlib/modules/debug/#debugdebug_mode_enable","text":"Syntax: debug.debug_mode_enable Enables DEBUG mode.","title":"debug.debug_mode_enable"},{"location":"1.2/stdlib/modules/debug/#debugenable","text":"Alias for debug.debug_mode_enable","title":"debug.enable"},{"location":"1.2/stdlib/modules/debug/#debugdebug_mode_disable","text":"Syntax: debug.debug_mode_disable Disables DEBUG mode.","title":"debug.debug_mode_disable"},{"location":"1.2/stdlib/modules/debug/#debugdisable","text":"Alias for debug.debug_mode_disable","title":"debug.disable"},{"location":"1.2/stdlib/modules/debug/#debugprint_context","text":"Syntax: debug.print_context Enables PRINT CONTEXT debug option.","title":"debug.print_context"},{"location":"1.2/stdlib/modules/debug/#debugstop_print_context","text":"Syntax: debug.stop_print_context Disables PRINT CONTEXT debug option.","title":"debug.stop_print_context"},{"location":"1.2/stdlib/modules/debug/#debugprint_time","text":"Added in 0.20.0-beta Syntax: debug.print_time Enables PRINT TIME debug option.","title":"debug.print_time"},{"location":"1.2/stdlib/modules/debug/#debugstop_print_time","text":"Added in 0.20.0-beta Syntax: debug.stop_print_time Disables PRINT TIME debug option.","title":"debug.stop_print_time"},{"location":"1.2/stdlib/modules/debug/#debugenable_all","text":"Changed in 0.20.0-beta Now also enables PRINT TIME debug option. Syntax: debug.enable_all Enables DEBUG mode with all its options","title":"debug.enable_all"},{"location":"1.2/stdlib/modules/debug/#debugdisable_all","text":"Changed in 0.20.0-beta Now also disables PRINT TIME debug option. Syntax: debug.disable_all Disables DEBUG mode and all its options.","title":"debug.disable_all"},{"location":"1.2/stdlib/modules/lorem/","text":"Lorem Source code Lorem is a lib to generate Lorem Ipsum texts (dummy texts). Function lorem.ipsum Syntax: lorem.ipsum(paragraphs: int = 1) Generate a random Lorem Ipsum text (dummy text) with as many paragraphs as specified in paragraphs (defaults to 1).","title":"Lorem"},{"location":"1.2/stdlib/modules/lorem/#lorem","text":"Source code Lorem is a lib to generate Lorem Ipsum texts (dummy texts).","title":"Lorem"},{"location":"1.2/stdlib/modules/lorem/#function","text":"","title":"Function"},{"location":"1.2/stdlib/modules/lorem/#loremipsum","text":"Syntax: lorem.ipsum(paragraphs: int = 1) Generate a random Lorem Ipsum text (dummy text) with as many paragraphs as specified in paragraphs (defaults to 1).","title":"lorem.ipsum"},{"location":"1.2/stdlib/modules/math/","text":"Math Source code The math module can be imported with the statement import math . The math module is used to do math. To do statistics, use the statistics module. Constants math.pi : Pi . \\pi = 3.141592653589793 math.tau : Tau . \\tau = 6.283185307179586 math.sqrt_pi : square root of pi ( math.sqrt(math.pi) ). \\sqrt\\pi = 1.7724538509055159 math.sqrt_tau : square root of tau ( math.sqrt(math.tau) ). \\sqrt\\tau = 2.5066282746310002 math.e : Euler's number . e = 2.718281828459045 Functions math.sqrt Syntax: math.sqrt(n) Returns \\sqrt{n} (square root of n ), n \\in \\mathbb{R}_+ math.isqrt Syntax: math.isqrt(n) Returns \\left\\lfloor\\sqrt{n}\\right\\rfloor (integer square root of n ), n \\in \\mathbb{N} math.root Syntax: math.root(n, k) Returns the \\sqrt[k]{n} ( k -th root of n ), n \\in \\mathbb{R}_+, k \\in \\mathbb{R} math.iroot Syntax: math.iroot(n, k) Returns \\left\\lfloor\\sqrt[k]{n}\\right\\rfloor (integer k -th root of n ), n \\in \\mathbb{R}_+, k \\in \\mathbb{R} math.degrees Syntax: math.degrees(angle) Transforms a radian angle to a degree angle. \\verb|angle| \\in \\mathbb{R} math.radians Syntax: math.radians(angle) Transform a degree angle to a radian angle. \\verb|angle| \\in \\mathbb{R} math.sin Syntax: math.sin(angle) Returns sine of an angle in radians. \\verb|angle| \\in \\mathbb{R} math.cos Syntax: math.cos(angle) Returns cosine of an angle in radians. \\verb|angle| \\in \\mathbb{R} math.tan Syntax: math.tan(angle) Returns tangent of an angle in radians. \\verb|angle| \\in \\mathbb{R} math.asin Syntax: math.asin(sin) Returns arcsine of an sin (result in radians). \\verb|sin| \\in [-1, 1] math.acos Syntax: math.acos(cos) Returns arccosine of an cos (result in radians). \\verb|cos| \\in [-1, 1] math.atan Syntax: math.atan(tan) Returns arctangent of an tan (result in radians). \\verb|tan| \\in \\mathbb{R} math.abs Syntax: math.abs(n) Returns \\left|n\\right| (absolute value of n ), n \\in \\mathbb{R} math.log Syntax: math.log(n, <base>) Returns the natural logarithm ( base = e ) of n if no base is given, or the logarithm of n in the given base. n \\in \\mathbb{R}^+_*, base \\in \\mathbb{R}^+_*\\setminus \\{1\\} math.log2 Syntax: math.log2(n) Same as math.log(n, 2) . n \\in \\mathbb{R} math.factorial Added in 0.19.0-beta Syntax: math.factorial(n) Returns n! ( factorial of n ). n \\in \\mathbb{N} math.gcd Added in 1.2.0 Syntax: math.gcd(a, b) Returns the GCD (greatest common divisor) of two integer numbers ( a, b \\in \\mathbb{Z} ). Note that \\textbf{GCD} \\in \\mathbb{N} .","title":"Math"},{"location":"1.2/stdlib/modules/math/#math","text":"Source code The math module can be imported with the statement import math . The math module is used to do math. To do statistics, use the statistics module.","title":"Math"},{"location":"1.2/stdlib/modules/math/#constants","text":"math.pi : Pi . \\pi = 3.141592653589793 math.tau : Tau . \\tau = 6.283185307179586 math.sqrt_pi : square root of pi ( math.sqrt(math.pi) ). \\sqrt\\pi = 1.7724538509055159 math.sqrt_tau : square root of tau ( math.sqrt(math.tau) ). \\sqrt\\tau = 2.5066282746310002 math.e : Euler's number . e = 2.718281828459045","title":"Constants"},{"location":"1.2/stdlib/modules/math/#functions","text":"","title":"Functions"},{"location":"1.2/stdlib/modules/math/#mathsqrt","text":"Syntax: math.sqrt(n) Returns \\sqrt{n} (square root of n ), n \\in \\mathbb{R}_+","title":"math.sqrt"},{"location":"1.2/stdlib/modules/math/#mathisqrt","text":"Syntax: math.isqrt(n) Returns \\left\\lfloor\\sqrt{n}\\right\\rfloor (integer square root of n ), n \\in \\mathbb{N}","title":"math.isqrt"},{"location":"1.2/stdlib/modules/math/#mathroot","text":"Syntax: math.root(n, k) Returns the \\sqrt[k]{n} ( k -th root of n ), n \\in \\mathbb{R}_+, k \\in \\mathbb{R}","title":"math.root"},{"location":"1.2/stdlib/modules/math/#mathiroot","text":"Syntax: math.iroot(n, k) Returns \\left\\lfloor\\sqrt[k]{n}\\right\\rfloor (integer k -th root of n ), n \\in \\mathbb{R}_+, k \\in \\mathbb{R}","title":"math.iroot"},{"location":"1.2/stdlib/modules/math/#mathdegrees","text":"Syntax: math.degrees(angle) Transforms a radian angle to a degree angle. \\verb|angle| \\in \\mathbb{R}","title":"math.degrees"},{"location":"1.2/stdlib/modules/math/#mathradians","text":"Syntax: math.radians(angle) Transform a degree angle to a radian angle. \\verb|angle| \\in \\mathbb{R}","title":"math.radians"},{"location":"1.2/stdlib/modules/math/#mathsin","text":"Syntax: math.sin(angle) Returns sine of an angle in radians. \\verb|angle| \\in \\mathbb{R}","title":"math.sin"},{"location":"1.2/stdlib/modules/math/#mathcos","text":"Syntax: math.cos(angle) Returns cosine of an angle in radians. \\verb|angle| \\in \\mathbb{R}","title":"math.cos"},{"location":"1.2/stdlib/modules/math/#mathtan","text":"Syntax: math.tan(angle) Returns tangent of an angle in radians. \\verb|angle| \\in \\mathbb{R}","title":"math.tan"},{"location":"1.2/stdlib/modules/math/#mathasin","text":"Syntax: math.asin(sin) Returns arcsine of an sin (result in radians). \\verb|sin| \\in [-1, 1]","title":"math.asin"},{"location":"1.2/stdlib/modules/math/#mathacos","text":"Syntax: math.acos(cos) Returns arccosine of an cos (result in radians). \\verb|cos| \\in [-1, 1]","title":"math.acos"},{"location":"1.2/stdlib/modules/math/#mathatan","text":"Syntax: math.atan(tan) Returns arctangent of an tan (result in radians). \\verb|tan| \\in \\mathbb{R}","title":"math.atan"},{"location":"1.2/stdlib/modules/math/#mathabs","text":"Syntax: math.abs(n) Returns \\left|n\\right| (absolute value of n ), n \\in \\mathbb{R}","title":"math.abs"},{"location":"1.2/stdlib/modules/math/#mathlog","text":"Syntax: math.log(n, <base>) Returns the natural logarithm ( base = e ) of n if no base is given, or the logarithm of n in the given base. n \\in \\mathbb{R}^+_*, base \\in \\mathbb{R}^+_*\\setminus \\{1\\}","title":"math.log"},{"location":"1.2/stdlib/modules/math/#mathlog2","text":"Syntax: math.log2(n) Same as math.log(n, 2) . n \\in \\mathbb{R}","title":"math.log2"},{"location":"1.2/stdlib/modules/math/#mathfactorial","text":"Added in 0.19.0-beta Syntax: math.factorial(n) Returns n! ( factorial of n ). n \\in \\mathbb{N}","title":"math.factorial"},{"location":"1.2/stdlib/modules/math/#mathgcd","text":"Added in 1.2.0 Syntax: math.gcd(a, b) Returns the GCD (greatest common divisor) of two integer numbers ( a, b \\in \\mathbb{Z} ). Note that \\textbf{GCD} \\in \\mathbb{N} .","title":"math.gcd"},{"location":"1.2/stdlib/modules/noug_version/","text":"Noug Version Source code The noug_version module can be imported with the statement import noug_version . The noug_version module is used to have better informations about the current Nougaro version. Note Nougaro uses semantic versionning . We recommend you to read the whole semver specification. Constants Examples are given considering the version 3.14.15-rc.92 noug_version.major : integer of the MAJOR version ( 3 ) noug_version.minor : integer of the MINOR version ( 14 ) noug_version.patch : integer of the PATCH version ( 15 ) noug_version.phase : string of the PHASE name ( \"rc\" ). Usually alpha , beta , rc , stable . noug_version.release_serial : integer of the MINOR INDEV version ( 92 ). It resets when the phase switches back to stable . When the version is under the form 3.14.15-stable or 0.16.0-beta , this number is 0 . noug_version.version_list : list under the form [major, minor, patch, phase, release_serial] (in our example: [3, 14, 15, \"rc\", 92] ) Changed in 0.19.0 and 0.20.0 noug_version.release_serial is the new name for noug_version.phase_minor in 0.19.0-beta. noug_version.phase_minor has been removed in 0.20.0-beta. Functions noug_version.clean_version_for_gh Version history Added in 0.19.0-beta Changed in 0.23.0-beta: added optional parameters print_value and return_value . Syntax: noug_version.clean_version_for_gh(<print_value=False>, <return_value=True>) Generates a beautiful str for the GitHub issues or PRs. If print_value is true, it prints the value. If return_value is true, it returns the value. noug_version.clean_version_for_nuitka_under_windows Added in 0.23.0-beta Syntax: noug_version.clean_version_for_nuitka_under_windows(<print_value=False>, <return_value=True>) Generates a string under the form \"<major>.<minor>.<patch>\" , or \"<major>.<minor>.<patch>.<release_serial>\" if release_serial \u2260 0. This is meant to be passed as the --windows-product-version option of Ntuika. If print_value is true, it prints the value. If return_value is true, it returns the value.","title":"Noug Version"},{"location":"1.2/stdlib/modules/noug_version/#noug-version","text":"Source code The noug_version module can be imported with the statement import noug_version . The noug_version module is used to have better informations about the current Nougaro version. Note Nougaro uses semantic versionning . We recommend you to read the whole semver specification.","title":"Noug Version"},{"location":"1.2/stdlib/modules/noug_version/#constants","text":"Examples are given considering the version 3.14.15-rc.92 noug_version.major : integer of the MAJOR version ( 3 ) noug_version.minor : integer of the MINOR version ( 14 ) noug_version.patch : integer of the PATCH version ( 15 ) noug_version.phase : string of the PHASE name ( \"rc\" ). Usually alpha , beta , rc , stable . noug_version.release_serial : integer of the MINOR INDEV version ( 92 ). It resets when the phase switches back to stable . When the version is under the form 3.14.15-stable or 0.16.0-beta , this number is 0 . noug_version.version_list : list under the form [major, minor, patch, phase, release_serial] (in our example: [3, 14, 15, \"rc\", 92] ) Changed in 0.19.0 and 0.20.0 noug_version.release_serial is the new name for noug_version.phase_minor in 0.19.0-beta. noug_version.phase_minor has been removed in 0.20.0-beta.","title":"Constants"},{"location":"1.2/stdlib/modules/noug_version/#functions","text":"","title":"Functions"},{"location":"1.2/stdlib/modules/noug_version/#noug_versionclean_version_for_gh","text":"Version history Added in 0.19.0-beta Changed in 0.23.0-beta: added optional parameters print_value and return_value . Syntax: noug_version.clean_version_for_gh(<print_value=False>, <return_value=True>) Generates a beautiful str for the GitHub issues or PRs. If print_value is true, it prints the value. If return_value is true, it returns the value.","title":"noug_version.clean_version_for_gh"},{"location":"1.2/stdlib/modules/noug_version/#noug_versionclean_version_for_nuitka_under_windows","text":"Added in 0.23.0-beta Syntax: noug_version.clean_version_for_nuitka_under_windows(<print_value=False>, <return_value=True>) Generates a string under the form \"<major>.<minor>.<patch>\" , or \"<major>.<minor>.<patch>.<release_serial>\" if release_serial \u2260 0. This is meant to be passed as the --windows-product-version option of Ntuika. If print_value is true, it prints the value. If return_value is true, it returns the value.","title":"noug_version.clean_version_for_nuitka_under_windows"},{"location":"1.2/stdlib/modules/random/","text":"Random Source code The random module can be imported with the statement import random . The random module is used to generate random numbers. Functions random.randint Syntax: random.randint(a: int, b: int) Generates a random integer between a and b . a and b must be integers . The condition a <= b MUST be verified. random.random Syntax: random.random Generates a random floating number between 0.0000000000000000 and 1.0000000000000000. random.choice Syntax: random.choice(list) Returns a random element of the list . random.shuffle Syntax: random.shuffle(list) Shuffles (by reference) and returns list . random.seed Syntax: random.seed(int) Sets the seed to generate numbers to int .","title":"Random"},{"location":"1.2/stdlib/modules/random/#random","text":"Source code The random module can be imported with the statement import random . The random module is used to generate random numbers.","title":"Random"},{"location":"1.2/stdlib/modules/random/#functions","text":"","title":"Functions"},{"location":"1.2/stdlib/modules/random/#randomrandint","text":"Syntax: random.randint(a: int, b: int) Generates a random integer between a and b . a and b must be integers . The condition a <= b MUST be verified.","title":"random.randint"},{"location":"1.2/stdlib/modules/random/#randomrandom","text":"Syntax: random.random Generates a random floating number between 0.0000000000000000 and 1.0000000000000000.","title":"random.random"},{"location":"1.2/stdlib/modules/random/#randomchoice","text":"Syntax: random.choice(list) Returns a random element of the list .","title":"random.choice"},{"location":"1.2/stdlib/modules/random/#randomshuffle","text":"Syntax: random.shuffle(list) Shuffles (by reference) and returns list .","title":"random.shuffle"},{"location":"1.2/stdlib/modules/random/#randomseed","text":"Syntax: random.seed(int) Sets the seed to generate numbers to int .","title":"random.seed"},{"location":"1.2/stdlib/modules/statistics/","text":"Statistics Source code The statistics module can be imported with the statement import statistics . The statistics module is used to do statistics. To do math, use the math module. Functions statistics.mean Syntax: statistics.mean(list) Calculates the mean of a list of numbers. statistics.geometric_mean Syntax: statistics.geometric_mean(list) Calculates the geometric mean of a list of positive numbers. statistics.harmonic_mean Syntax: statistics.harmonic_mean Calculates the harmonic mean of a list of positive numbers. statistics.median Syntax: statistics.median(list) Calculates the median of a list of numbers. statistics.quantiles Syntax: statistics.quantiles(list, n=4, method='exclusive') Cuts a list of numbers in n parts and returns a list of the values where the list was cut, using exclusive or inclusive method. n and method are optional. Disclamer from the Python source code Notes on methods for computing quantiles There is no one perfect way to compute quantiles. Here we offer two methods that serve common needs. Most other packages surveyed offered at least one or both of these two, making them \"standard\" in the sense of \"widely-adopted and reproducible\". They are also easy to explain, easy to compute manually, and have straight-forward interpretations that aren't surprising. The default method is known as \"R6\", \"PERCENTILE.EXC\", or \"expected value of rank order statistics\". The alternative method is known as \"R7\", \"PERCENTILE.INC\", or \"mode of rank order statistics\". For sample data where there is a positive probability for values beyond the range of the data, the R6 exclusive method is a reasonable choice. Consider a random sample of nine values from a population with a uniform distribution from 0.0 to 1.0. The distribution of the third ranked sample point is described by betavariate(alpha=3, beta=7) which has mode=0.250, median=0.286, and mean=0.300. Only the latter (which corresponds with R6) gives the desired cut point with 30% of the population falling below that value, making it comparable to a result from an inv_cdf() function. The R6 exclusive method is also idempotent. For describing population data where the end points are known to be included in the data, the R7 inclusive method is a reasonable choice. Instead of the mean, it uses the mode of the beta distribution for the interior points. Per Hyndman & Fan, \"One nice property is that the vertices of Q7(p) divide the range into n - 1 intervals, and exactly 100p% of the intervals lie to the left of Q7(p) and 100(1 - p)% of the intervals lie to the right of Q7(p).\" If needed, other methods could be added. However, for now, the position is that fewer options make for easier choices and that external packages can be used for anything more advanced. statistics.scope(list) Syntax: statistics.scope(list) Calculates the scope of a list of numbers: max(list) - min(list) . statistics.mode(list) Syntax: statistics.mode(list) Calculates the mode of a list of numbers, i.e. the most common value. statistics.multimode(value) Syntax: statistics.multimode(value) Calculates the modes of a list or a str, i.e. the most common values. It returns a list.","title":"Statistics"},{"location":"1.2/stdlib/modules/statistics/#statistics","text":"Source code The statistics module can be imported with the statement import statistics . The statistics module is used to do statistics. To do math, use the math module.","title":"Statistics"},{"location":"1.2/stdlib/modules/statistics/#functions","text":"","title":"Functions"},{"location":"1.2/stdlib/modules/statistics/#statisticsmean","text":"Syntax: statistics.mean(list) Calculates the mean of a list of numbers.","title":"statistics.mean"},{"location":"1.2/stdlib/modules/statistics/#statisticsgeometric_mean","text":"Syntax: statistics.geometric_mean(list) Calculates the geometric mean of a list of positive numbers.","title":"statistics.geometric_mean"},{"location":"1.2/stdlib/modules/statistics/#statisticsharmonic_mean","text":"Syntax: statistics.harmonic_mean Calculates the harmonic mean of a list of positive numbers.","title":"statistics.harmonic_mean"},{"location":"1.2/stdlib/modules/statistics/#statisticsmedian","text":"Syntax: statistics.median(list) Calculates the median of a list of numbers.","title":"statistics.median"},{"location":"1.2/stdlib/modules/statistics/#statisticsquantiles","text":"Syntax: statistics.quantiles(list, n=4, method='exclusive') Cuts a list of numbers in n parts and returns a list of the values where the list was cut, using exclusive or inclusive method. n and method are optional. Disclamer from the Python source code","title":"statistics.quantiles"},{"location":"1.2/stdlib/modules/statistics/#notes-on-methods-for-computing-quantiles","text":"There is no one perfect way to compute quantiles. Here we offer two methods that serve common needs. Most other packages surveyed offered at least one or both of these two, making them \"standard\" in the sense of \"widely-adopted and reproducible\". They are also easy to explain, easy to compute manually, and have straight-forward interpretations that aren't surprising. The default method is known as \"R6\", \"PERCENTILE.EXC\", or \"expected value of rank order statistics\". The alternative method is known as \"R7\", \"PERCENTILE.INC\", or \"mode of rank order statistics\". For sample data where there is a positive probability for values beyond the range of the data, the R6 exclusive method is a reasonable choice. Consider a random sample of nine values from a population with a uniform distribution from 0.0 to 1.0. The distribution of the third ranked sample point is described by betavariate(alpha=3, beta=7) which has mode=0.250, median=0.286, and mean=0.300. Only the latter (which corresponds with R6) gives the desired cut point with 30% of the population falling below that value, making it comparable to a result from an inv_cdf() function. The R6 exclusive method is also idempotent. For describing population data where the end points are known to be included in the data, the R7 inclusive method is a reasonable choice. Instead of the mean, it uses the mode of the beta distribution for the interior points. Per Hyndman & Fan, \"One nice property is that the vertices of Q7(p) divide the range into n - 1 intervals, and exactly 100p% of the intervals lie to the left of Q7(p) and 100(1 - p)% of the intervals lie to the right of Q7(p).\" If needed, other methods could be added. However, for now, the position is that fewer options make for easier choices and that external packages can be used for anything more advanced.","title":"Notes on methods for computing quantiles"},{"location":"1.2/stdlib/modules/statistics/#statisticsscopelist","text":"Syntax: statistics.scope(list) Calculates the scope of a list of numbers: max(list) - min(list) .","title":"statistics.scope(list)"},{"location":"1.2/stdlib/modules/statistics/#statisticsmodelist","text":"Syntax: statistics.mode(list) Calculates the mode of a list of numbers, i.e. the most common value.","title":"statistics.mode(list)"},{"location":"1.2/stdlib/modules/statistics/#statisticsmultimodevalue","text":"Syntax: statistics.multimode(value) Calculates the modes of a list or a str, i.e. the most common values. It returns a list.","title":"statistics.multimode(value)"},{"location":"1.2/stdlib/modules/time/","text":"Time Source code The time module can be imported with the statement import time . The time module is used to sleep for seconds or milliseconds, and to know current time, timezone and system\u2019s epoch. Constants time.timezone : the timezone (number of seconds to add to GMT) Functions time.sleep Syntax: time.sleep(seconds) Pauses the program for seconds ( int or float ) and do nothing. Returns None . time.sleep_milliseconds Syntax: time.sleep_milliseconds(milliseconds) Pauses the program for milliseconds ( integer ) and do nothing. Returns None . time.time Syntax: time.time() Returns the float value of the time in seconds since the Epoch (system-dependent, check your epoch with time.epoch() ). time.epoch Syntax: time.epoch() Returns the str value of the Epoch of your system.","title":"Time"},{"location":"1.2/stdlib/modules/time/#time","text":"Source code The time module can be imported with the statement import time . The time module is used to sleep for seconds or milliseconds, and to know current time, timezone and system\u2019s epoch.","title":"Time"},{"location":"1.2/stdlib/modules/time/#constants","text":"time.timezone : the timezone (number of seconds to add to GMT)","title":"Constants"},{"location":"1.2/stdlib/modules/time/#functions","text":"","title":"Functions"},{"location":"1.2/stdlib/modules/time/#timesleep","text":"Syntax: time.sleep(seconds) Pauses the program for seconds ( int or float ) and do nothing. Returns None .","title":"time.sleep"},{"location":"1.2/stdlib/modules/time/#timesleep_milliseconds","text":"Syntax: time.sleep_milliseconds(milliseconds) Pauses the program for milliseconds ( integer ) and do nothing. Returns None .","title":"time.sleep_milliseconds"},{"location":"1.2/stdlib/modules/time/#timetime","text":"Syntax: time.time() Returns the float value of the time in seconds since the Epoch (system-dependent, check your epoch with time.epoch() ).","title":"time.time"},{"location":"1.2/stdlib/modules/time/#timeepoch","text":"Syntax: time.epoch() Returns the str value of the Epoch of your system.","title":"time.epoch"},{"location":"1.2/stdlib/modules/unicodedata/","text":"Unicodedata Source code Credits This is massively copied from python documentation of unicodedata , under the Python Software Foundation License Version 2 . \u00a9 Copyright 2001-2023, Python Software Foundation. This text has not been edited. The unicodedata module can be imported with the statement import unicodedata . The unicodedata provides access to the Unicode database. Constants unicodedata.unicodedata_version : the version of the Unicode database used in this module. Depends on Python version! Functions unicodedata.lookup Syntax: unicodedata.lookup(name) Look up character by name. If a character with the given name is found, return the corresponding character. If not found, NotDefinedError is raised. unicodedata.name Syntax: unicodedata.name(chr, <default>) Returns the name assigned to the character chr as a string. If no name is defined, default is returned, or, if not given, RunTimeError is raised. unicodedata.category Syntax: unicodedata.category(chr) Returns the general category assigned to the character chr as string. unicodedata.bidirectional Syntax: unicodedata.bidirectional(chr) Returns the bidirectional class assigned to the character chr as string. If no such value is defined, an empty string is returned. unicodedata.combining Syntax: unicodedata.combining(chr) Returns the canonical combining class assigned to the character chr as integer. Returns 0 if no combining class is defined. unicodedata.east_asian_width Syntax: unicodedata.east_asian_width(chr) Returns the east asian width assigned to the character chr as string. unicodedata.mirrored Syntax: unicodedata.mirrored(chr) Returns the mirrored property assigned to the character chr as integer. Returns 1 if the character has been identified as a \u201cmirrored\u201d character in bidirectional text, 0 otherwise. unicodedata.decomposition Syntax: unicodedata.decomposition(chr) Returns the character decomposition mapping assigned to the character chr as string. An empty string is returned in case no such mapping is defined. unicodedata.normalize Syntax: unicodedata.normalize(form, unistr) Returns the normal form form for the Unicode string unistr . Valid values for form are \u2018NFC\u2019, \u2018NFKC\u2019, \u2018NFD\u2019, and \u2018NFKD\u2019. The Unicode standard defines various normalization forms of a Unicode string, based on the definition of canonical equivalence and compatibility equivalence. In Unicode, several characters can be expressed in various way. For example, the character U+00C7 (LATIN CAPITAL LETTER C WITH CEDILLA) can also be expressed as the sequence U+0043 (LATIN CAPITAL LETTER C) U+0327 (COMBINING CEDILLA). For each character, there are two normal forms: normal form C and normal form D. Normal form D (NFD) is also known as canonical decomposition, and translates each character into its decomposed form. Normal form C (NFC) first applies a canonical decomposition, then composes pre-combined characters again. In addition to these two forms, there are two additional normal forms based on compatibility equivalence. In Unicode, certain characters are supported which normally would be unified with other characters. For example, U+2160 (ROMAN NUMERAL ONE) is really the same thing as U+0049 (LATIN CAPITAL LETTER I). However, it is supported in Unicode for compatibility with existing character sets (e.g. gb2312). The normal form KD (NFKD) will apply the compatibility decomposition, i.e. replace all compatibility characters with their equivalents. The normal form KC (NFKC) first applies the compatibility decomposition, followed by the canonical composition. Even if two unicode strings are normalized and look the same to a human reader, if one has combining characters and the other doesn\u2019t, they may not compare equal. unicodedata.is_normalized Syntax: unicodedata.is_normalized(form, unistr) Return whether the Unicode string unistr is in the normal form form . Valid values for form are \u2018NFC\u2019, \u2018NFKC\u2019, \u2018NFD\u2019, and \u2018NFKD\u2019.","title":"Unicodedata"},{"location":"1.2/stdlib/modules/unicodedata/#unicodedata","text":"Source code Credits This is massively copied from python documentation of unicodedata , under the Python Software Foundation License Version 2 . \u00a9 Copyright 2001-2023, Python Software Foundation. This text has not been edited. The unicodedata module can be imported with the statement import unicodedata . The unicodedata provides access to the Unicode database.","title":"Unicodedata"},{"location":"1.2/stdlib/modules/unicodedata/#constants","text":"unicodedata.unicodedata_version : the version of the Unicode database used in this module. Depends on Python version!","title":"Constants"},{"location":"1.2/stdlib/modules/unicodedata/#functions","text":"","title":"Functions"},{"location":"1.2/stdlib/modules/unicodedata/#unicodedatalookup","text":"Syntax: unicodedata.lookup(name) Look up character by name. If a character with the given name is found, return the corresponding character. If not found, NotDefinedError is raised.","title":"unicodedata.lookup"},{"location":"1.2/stdlib/modules/unicodedata/#unicodedataname","text":"Syntax: unicodedata.name(chr, <default>) Returns the name assigned to the character chr as a string. If no name is defined, default is returned, or, if not given, RunTimeError is raised.","title":"unicodedata.name"},{"location":"1.2/stdlib/modules/unicodedata/#unicodedatacategory","text":"Syntax: unicodedata.category(chr) Returns the general category assigned to the character chr as string.","title":"unicodedata.category"},{"location":"1.2/stdlib/modules/unicodedata/#unicodedatabidirectional","text":"Syntax: unicodedata.bidirectional(chr) Returns the bidirectional class assigned to the character chr as string. If no such value is defined, an empty string is returned.","title":"unicodedata.bidirectional"},{"location":"1.2/stdlib/modules/unicodedata/#unicodedatacombining","text":"Syntax: unicodedata.combining(chr) Returns the canonical combining class assigned to the character chr as integer. Returns 0 if no combining class is defined.","title":"unicodedata.combining"},{"location":"1.2/stdlib/modules/unicodedata/#unicodedataeast_asian_width","text":"Syntax: unicodedata.east_asian_width(chr) Returns the east asian width assigned to the character chr as string.","title":"unicodedata.east_asian_width"},{"location":"1.2/stdlib/modules/unicodedata/#unicodedatamirrored","text":"Syntax: unicodedata.mirrored(chr) Returns the mirrored property assigned to the character chr as integer. Returns 1 if the character has been identified as a \u201cmirrored\u201d character in bidirectional text, 0 otherwise.","title":"unicodedata.mirrored"},{"location":"1.2/stdlib/modules/unicodedata/#unicodedatadecomposition","text":"Syntax: unicodedata.decomposition(chr) Returns the character decomposition mapping assigned to the character chr as string. An empty string is returned in case no such mapping is defined.","title":"unicodedata.decomposition"},{"location":"1.2/stdlib/modules/unicodedata/#unicodedatanormalize","text":"Syntax: unicodedata.normalize(form, unistr) Returns the normal form form for the Unicode string unistr . Valid values for form are \u2018NFC\u2019, \u2018NFKC\u2019, \u2018NFD\u2019, and \u2018NFKD\u2019. The Unicode standard defines various normalization forms of a Unicode string, based on the definition of canonical equivalence and compatibility equivalence. In Unicode, several characters can be expressed in various way. For example, the character U+00C7 (LATIN CAPITAL LETTER C WITH CEDILLA) can also be expressed as the sequence U+0043 (LATIN CAPITAL LETTER C) U+0327 (COMBINING CEDILLA). For each character, there are two normal forms: normal form C and normal form D. Normal form D (NFD) is also known as canonical decomposition, and translates each character into its decomposed form. Normal form C (NFC) first applies a canonical decomposition, then composes pre-combined characters again. In addition to these two forms, there are two additional normal forms based on compatibility equivalence. In Unicode, certain characters are supported which normally would be unified with other characters. For example, U+2160 (ROMAN NUMERAL ONE) is really the same thing as U+0049 (LATIN CAPITAL LETTER I). However, it is supported in Unicode for compatibility with existing character sets (e.g. gb2312). The normal form KD (NFKD) will apply the compatibility decomposition, i.e. replace all compatibility characters with their equivalents. The normal form KC (NFKC) first applies the compatibility decomposition, followed by the canonical composition. Even if two unicode strings are normalized and look the same to a human reader, if one has combining characters and the other doesn\u2019t, they may not compare equal.","title":"unicodedata.normalize"},{"location":"1.2/stdlib/modules/unicodedata/#unicodedatais_normalized","text":"Syntax: unicodedata.is_normalized(form, unistr) Return whether the Unicode string unistr is in the normal form form . Valid values for form are \u2018NFC\u2019, \u2018NFKC\u2019, \u2018NFD\u2019, and \u2018NFKD\u2019.","title":"unicodedata.is_normalized"},{"location":"1.2/stdlib/modules/webbrowser/","text":"Webbrowser Source code Added in 0.19.0-beta The webbrowser module can be imported with the statement import webbrowser . Convenient web-browser controller. The webbrowser module allows you to open pages in the browser. Functions webbrowser.open Syntax: webbrowser.open(url, <new=0>, <autoraise=True>) Displays url using the default browser. If new is 0, the url is opened in the same browser window if possible. If new is 1, a new browser window is opened if possible. If new is 2, a new tab is opened if possible. If autoraise is True, the window is raised if possible (note that under many window managers this will occur regardless of the setting of this variable).","title":"Webbrowser"},{"location":"1.2/stdlib/modules/webbrowser/#webbrowser","text":"Source code Added in 0.19.0-beta The webbrowser module can be imported with the statement import webbrowser . Convenient web-browser controller. The webbrowser module allows you to open pages in the browser.","title":"Webbrowser"},{"location":"1.2/stdlib/modules/webbrowser/#functions","text":"","title":"Functions"},{"location":"1.2/stdlib/modules/webbrowser/#webbrowseropen","text":"Syntax: webbrowser.open(url, <new=0>, <autoraise=True>) Displays url using the default browser. If new is 0, the url is opened in the same browser window if possible. If new is 1, a new browser window is opened if possible. If new is 2, a new tab is opened if possible. If autoraise is True, the window is raised if possible (note that under many window managers this will occur regardless of the setting of this variable).","title":"webbrowser.open"}]}